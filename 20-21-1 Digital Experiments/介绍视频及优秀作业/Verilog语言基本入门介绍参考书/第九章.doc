{\rtf1\ansi\ansicpg936\uc2 \deff15\deflang1033\deflangfe2052{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fnil\fcharset134\fprq0{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}\'cb\'ce\'cc\'e5;}{\f16\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}\'ba\'da\'cc\'e5;}
{\f17\froman\fcharset134\fprq1{\*\panose 00000000000000000000}\'82\'6c\'82\'72 \'96\'be\'92\'a9;}{\f18\fmodern\fcharset134\fprq1{\*\panose 00000000000000000000}\'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e;}
{\f19\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Century{\*\falt Times New Roman};}{\f20\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times;}{\f21\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}LinePrinter;}
{\f22\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Univers;}{\f23\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Univers Condensed;}{\f24\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Antique Olive;}
{\f25\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}{\f26\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}CG Omega;}{\f27\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Albertus Medium;}
{\f28\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Albertus Extra Bold;}{\f29\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Clarendon Condensed;}{\f30\fscript\fcharset0\fprq2{\*\panose 00000000000000000000}Coronet;}
{\f31\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic;}{\f32\fscript\fcharset0\fprq2{\*\panose 00000000000000000000}Marigold;}{\f33\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}
{\f34\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}@\'cb\'ce\'cc\'e5;}{\f35\fmodern\fcharset134\fprq1{\*\panose 02010609030101010101}\'d0\'c2\'cb\'ce\'cc\'e5;}
{\f36\fmodern\fcharset134\fprq1{\*\panose 02010609030101010101}@\'d0\'c2\'cb\'ce\'cc\'e5;}{\f37\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}@\'ba\'da\'cc\'e5;}
{\f38\fmodern\fcharset134\fprq2{\*\panose 02010609030101010101}\'bf\'ac\'cc\'e5_GB2312;}{\f39\fmodern\fcharset134\fprq2{\*\panose 02010609030101010101}@\'bf\'ac\'cc\'e5_GB2312;}
{\f40\fmodern\fcharset134\fprq2{\*\panose 02010609030101010101}\'b7\'c2\'cb\'ce_GB2312;}{\f41\fmodern\fcharset134\fprq2{\*\panose 02010609030101010101}@\'b7\'c2\'cb\'ce_GB2312;}{\f42\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}
{\f43\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f44\fmodern\fcharset134\fprq1{\*\panose 02010509060101010101}\'d3\'d7\'d4\'b2;}{\f45\fmodern\fcharset134\fprq1{\*\panose 02010509060101010101}@\'d3\'d7\'d4\'b2;}
{\f46\fmodern\fcharset134\fprq1{\*\panose 02010509060101010101}\'c1\'a5\'ca\'e9;}{\f47\fmodern\fcharset134\fprq1{\*\panose 02010509060101010101}@\'c1\'a5\'ca\'e9;}{\f48\froman\fcharset2\fprq2{\*\panose 05050102010205020202}MT Extra;}
{\f49\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f50\froman\fcharset0\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f51\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}
{\f52\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Outlook;}{\f53\fswiss\fcharset0\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f54\froman\fcharset0\fprq2{\*\panose 02040602050305030304}Book Antiqua;}
{\f55\fscript\fcharset0\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f56\fswiss\fcharset0\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f57\froman\fcharset0\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}
{\f58\froman\fcharset0\fprq2{\*\panose 02040502050405020303}Georgia;}{\f59\fswiss\fcharset0\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}{\f60\fswiss\fcharset0\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}
{\f61\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f62\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math1;}{\f63\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math1Mono;}
{\f64\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math2;}{\f65\fnil\fcharset2\fprq2{\*\panose 05000400030000000000}Math2Mono;}{\f66\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math3;}
{\f67\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math3Mono;}{\f68\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math4;}{\f69\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math4Mono;}
{\f70\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math5;}{\f71\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Math5Mono;}{\f72\fmodern\fcharset0\fprq2{\*\panose 020b0509020102020204}Letter Gothic MT;}
{\f73\froman\fcharset0\fprq2{\*\panose 02020a06060301020303}Times New Roman MT Extra Bold;}{\f74\fmodern\fcharset0\fprq1{\*\panose 020b0609020202020204}HE_TERMINAL;}{\f75\fmodern\fcharset0\fprq1{\*\panose 00000009000000000000}System VT Special;}
{\f76\fmodern\fcharset0\fprq1{\*\panose 00000009000000000000}System APL Special;}{\f77\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f78\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}
{\f79\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}{\f80\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f81\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}
{\f82\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}MTBWidgets;}{\f83\fnil\fcharset2\fprq2{\*\panose 02000600020000020004}TeXplus EX;}{\f84\fnil\fcharset2\fprq2{\*\panose 02000603080000090004}TeXplus MI;}
{\f85\fnil\fcharset2\fprq2{\*\panose 02000603080000020004}TeXplus RM;}{\f86\fnil\fcharset2\fprq2{\*\panose 02000605070000090004}TeXplus SY;}{\f87\froman\fcharset134\fprq2{\*\panose 02010600030101010101}\'b7\'c2\'cb\'ce\'cc\'e5{\*\falt \'cb\'ce\'cc\'e5};}
{\f88\froman\fcharset134\fprq2{\*\panose 00000000000000000000}@\'b7\'c2\'cb\'ce\'cc\'e5;}{\f89\froman\fcharset0\fprq2{\*\panose 00050102010706020507}Map Symbols;}{\f90\fdecor\fcharset0\fprq2{\*\panose 04020705040a02060702}Algerian;}
{\f91\fdecor\fcharset0\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f92\fswiss\fcharset0\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f93\fdecor\fcharset0\fprq2{\*\panose 04020805060202030203}Colonna MT;}
{\f94\fdecor\fcharset0\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f95\froman\fcharset0\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f96\fdecor\fcharset0\fprq2{\*\panose 040307050d0c02020703}Kino MT;}
{\f97\froman\fcharset0\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f98\fscript\fcharset0\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f99\fdecor\fcharset0\fprq2{\*\panose 040506030a0602020202}Playbill;}
{\f100\fnil\fcharset134\fprq2{\*\panose 02010509060101010101}\'c1\'a5\'ca\'e9_GB2312;}{\f101\fnil\fcharset134\fprq2{\*\panose 02010509060101010101}@\'c1\'a5\'ca\'e9_GB2312;}
{\f102\fnil\fcharset134\fprq2{\*\panose 02010509060101010101}\'d3\'d7\'d4\'b2_GB2312;}{\f103\fnil\fcharset134\fprq2{\*\panose 02010509060101010101}@\'d3\'d7\'d4\'b2_GB2312;}{\f104\fswiss\fcharset0\fprq2{\*\panose 020b0506030101010103}Abadi MT Condensed;}
{\f105\froman\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f106\froman\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f107\fmodern\fcharset255\fprq2{\*\panose 00000000000000000000}Modern;}
{\f108\froman\fcharset134\fprq0{\*\panose 00000000000000000000}(\'ca\'b9\'d3\'c3\'d6\'d0\'ce\'c4\'d7\'d6\'cc\'e5){\*\falt \'cb\'ce\'cc\'e5};}
{\f109\froman\fcharset204\fprq0{\*\panose 00000000000000000000}(?????\'a1\'ec\'a7\'c0?\'a7\'de\'a1\'ec???\'a7\'de\'a1\'ec\'a7\'a1?\'a1\'ec\'a7\'c0????\'a7\'de\'a1\'ec\'a7\'a1?\'a1\'ec\'a7\'c0?{\*\falt \'cb\'ce\'cc\'e5};}
{\f110\froman\fcharset161\fprq0{\*\panose 00000000000000000000}(|a?|2|?||?|||?|?||?||?|?|?||??{\*\falt \'cb\'ce\'cc\'e5};}{\f111\froman\fcharset238\fprq2 Times New Roman CE;}{\f112\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f114\froman\fcharset161\fprq2 Times New Roman Greek;}{\f115\froman\fcharset162\fprq2 Times New Roman Tur;}{\f116\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f117\fswiss\fcharset238\fprq2 Arial CE;}{\f118\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f120\fswiss\fcharset161\fprq2 Arial Greek;}{\f121\fswiss\fcharset162\fprq2 Arial Tur;}{\f122\fswiss\fcharset186\fprq2 Arial Baltic;}{\f123\fmodern\fcharset238\fprq1 Courier New CE;}{\f124\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f126\fmodern\fcharset161\fprq1 Courier New Greek;}{\f127\fmodern\fcharset162\fprq1 Courier New Tur;}{\f128\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f261\froman\fcharset238\fprq2 Garamond CE;}{\f262\froman\fcharset204\fprq2 Garamond Cyr;}
{\f264\froman\fcharset161\fprq2 Garamond Greek;}{\f265\froman\fcharset162\fprq2 Garamond Tur;}{\f266\froman\fcharset186\fprq2 Garamond Baltic;}{\f363\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f364\fmodern\fcharset204\fprq1 Lucida Console Cyr;}
{\f366\fmodern\fcharset161\fprq1 Lucida Console Greek;}{\f367\fmodern\fcharset162\fprq1 Lucida Console Tur;}{\f369\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f370\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}
{\f372\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}{\f373\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}{\f405\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f406\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}
{\f408\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f409\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f410\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}{\f411\froman\fcharset238\fprq2 Bookman Old Style CE;}
{\f412\froman\fcharset204\fprq2 Bookman Old Style Cyr;}{\f414\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f415\froman\fcharset162\fprq2 Bookman Old Style Tur;}{\f416\froman\fcharset186\fprq2 Bookman Old Style Baltic;}
{\f471\fswiss\fcharset238\fprq2 Trebuchet MS CE;}{\f475\fswiss\fcharset162\fprq2 Trebuchet MS Tur;}{\f477\fswiss\fcharset238\fprq2 Tahoma CE;}{\f478\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f480\fswiss\fcharset161\fprq2 Tahoma Greek;}
{\f481\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f482\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f555\fmodern\fcharset238\fprq1 HE_TERMINAL CE;}{\f556\fmodern\fcharset204\fprq1 HE_TERMINAL Cyr;}{\f558\fmodern\fcharset161\fprq1 HE_TERMINAL Greek;}
{\f559\fmodern\fcharset162\fprq1 HE_TERMINAL Tur;}{\f573\fswiss\fcharset238\fprq2 Arial Black CE;}{\f574\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f576\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f577\fswiss\fcharset162\fprq2 Arial Black Tur;}
{\f578\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f579\fscript\fcharset238\fprq2 Comic Sans MS CE;}{\f580\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}{\f582\fscript\fcharset161\fprq2 Comic Sans MS Greek;}
{\f583\fscript\fcharset162\fprq2 Comic Sans MS Tur;}{\f584\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}{\f585\fswiss\fcharset238\fprq2 Impact CE;}{\f586\fswiss\fcharset204\fprq2 Impact Cyr;}{\f588\fswiss\fcharset161\fprq2 Impact Greek;}
{\f589\fswiss\fcharset162\fprq2 Impact Tur;}{\f590\fswiss\fcharset186\fprq2 Impact Baltic;}{\f591\fswiss\fcharset238\fprq2 Verdana CE;}{\f592\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f594\fswiss\fcharset161\fprq2 Verdana Greek;}
{\f595\fswiss\fcharset162\fprq2 Verdana Tur;}{\f596\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qj\fi-5400\li5940\nowidctlpar\aspalpha\aspnum\faroman \kerning2\loch\af0\hich\af0\dbch\f15\cgrid 
\sbasedon0 \snext15 Body Text 2;}{\s16\qj\fi-3780\li5940\nowidctlpar\aspalpha\aspnum\faroman \kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext16 Body Text Indent 2;}{\s17\qj\nowidctlpar\aspalpha\aspnum\faroman \cbpat9 
\fs21\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext17 Document Map;}{\s18\qj\fi-2340\li3960\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af15\hich\af0\dbch\f15\cgrid \sbasedon0 \snext18 Body Text Indent 3;}{\s19\qc\nowidctlpar
\brdrb\brdrs\brdrw15\brsp20 \tqc\tx4153\tqr\tx8306\aspalpha\aspnum\faroman \fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext19 header;}{\s20\nowidctlpar\tqc\tx4153\tqr\tx8306\aspalpha\aspnum\faroman 
\fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext20 footer;}{\*\cs21 \additive \sbasedon10 page number;}{\s22\sb120\sa120\nowidctlpar\aspalpha\aspnum\faroman \b\caps\fs20\kerning2\loch\af0\hich\af0\dbch\f15\cgrid 
\sbasedon0 \snext0 \sautoupd toc 1;}{\s23\li210\nowidctlpar\aspalpha\aspnum\faroman \scaps\fs20\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{\s24\li420\nowidctlpar\aspalpha\aspnum\faroman 
\i\fs20\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s25\li630\nowidctlpar\aspalpha\aspnum\faroman \fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{
\s26\li840\nowidctlpar\aspalpha\aspnum\faroman \fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext0 \sautoupd toc 5;}{\s27\li1050\nowidctlpar\aspalpha\aspnum\faroman \fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid 
\sbasedon0 \snext0 \sautoupd toc 6;}{\s28\li1260\nowidctlpar\aspalpha\aspnum\faroman \fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{\s29\li1470\nowidctlpar\aspalpha\aspnum\faroman 
\fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s30\li1680\nowidctlpar\aspalpha\aspnum\faroman \fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{
\s31\qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af15\hich\af2\dbch\f15\cgrid \sbasedon0 \snext31 Plain Text;}}{\*\listtable{\list\listtemplateid24773816\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'02\'00);}{\levelnumbers\'01;}\b0\i0\fs21\loch\af15\dbch\f15\fbias1 \fi-425\li425\jclisttab\tx425 }{\listname ;}\listid589318873}}{\*\listoverridetable{\listoverride\listid589318873\listoverridecount0\ls1}}{\*\revtbl {Unknown;}}{\info
{\title Module I8251A(dbus,rcd,gnd,txc_,write_,chipsel_,comdat_,read_,rxrdy,txrdysyndet,cts_,txe,txd,clk,reset,dsr_,rts_,dtr_,rxc_,vcc}{\author xyw}{\operator gjian}{\creatim\yr1997\mo12\dy23\hr9\min19}{\revtim\yr2000\mo9\dy4\hr8\min31}
{\printim\yr1998\mo3\dy19\hr18\min14}{\version102}{\edmins1031}{\nofpages53}{\nofwords9254}{\nofchars52749}{\vern77}}\paperw11906\paperh16838\margl1797\margr1797\margt1157\margb1440\gutter0 {\*\fchars 
!),.:\'3b?]\'7d\'a1\'a7\'a1\'a4\'a1\'a6\'a1\'a5\'a8\'44\'a1\'ac\'a1\'af\'a1\'b1\'a1\'ad\'a1\'c3\'a1\'a2\'a1\'a3\'a1\'a8\'a1\'a9\'a1\'b5\'a1\'b7\'a1\'b9\'a1\'bb\'a1\'bf\'a1\'b3\'a1\'bd\'a3\'a1\'a3\'a2\'a3\'a7\'a3\'a9\'a3\'ac\'a3\'ae\'a3\'ba\'a3\'bb
\'a3\'bf\'a3\'dd\'a3\'e0\'a3\'fc\'a3\'fd\'a1\'ab\'a1\'e9}{\*\lchars ([\'7b\'a1\'a4\'a1\'ae\'a1\'b0\'a1\'b4\'a1\'b6\'a1\'b8\'a1\'ba\'a1\'be\'a1\'b2\'a1\'bc\'a3\'a8\'a3\'ae\'a3\'db\'a3\'fb\'a1\'ea\'a3\'a4}
\deftab425\ftnbj\aenddoc\pgnstart213\hyphcaps0\formshade\horzdoc\dgmargin\dghspace105\dgvspace156\dghorigin1797\dgvorigin1157\dghshow0\dgvshow2\jcompress\lnongrid\viewkind1\viewscale100 \fet0\sectd 
\psz9\pgnrestart\pgnstarts213\linex0\headery851\footery992\colsx425\endnhere\pgnhn1\sectlinegrid312\sectspecifyl {\header \pard\plain \s19\qr\ri360\nowidctlpar\brdrb\brdrs\brdrw15 \tqc\tx4153\tqr\tx8306\aspalpha\aspnum\faroman 
\fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid {\loch\af16\dbch\f16 \hich\af0\dbch\af16\loch\f16  }{\v\loch\af16\dbch\f16 \hich\af0\dbch\af16\loch\f16  }{\v\loch\af16\hich\af1\dbch\f16 \hich\af1\dbch\af16\loch\f16 _}{\loch\af16\dbch\f16 
\hich\af0\dbch\af16\loch\f16             }{\v\loch\af16\hich\af1\dbch\f16 \hich\af1\dbch\af16\loch\f16 _}{\loch\af16\dbch\f16 \loch\af16\hich\af0\dbch\f16 \'b5\'da\'be\'c5}{\v\loch\af16\hich\af1\dbch\f16 \hich\af1\dbch\af16\loch\f16 _}{
\loch\af16\dbch\f16 \loch\af16\hich\af0\dbch\f16 \'d5\'c2}{\loch\af16\dbch\f16 \hich\af0\dbch\af16\loch\f16  }{\loch\af16\dbch\f16 \loch\af16\hich\af0\dbch\f16 \'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'d3\'eb\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd}{
\v\loch\af16\hich\af1\dbch\f16 \hich\af1\dbch\af16\loch\f16 L_}{\loch\af16\dbch\f16 
\par }}{\footer \pard\plain \s20\nowidctlpar\tqc\tx4153\tqr\tx8306\pvpara\phmrg\posxr\posy0\aspalpha\aspnum\faroman \fs18\kerning2\loch\af0\hich\af0\dbch\f15\cgrid {\field{\*\fldinst {\cs21 \hich\af0\dbch\af15\loch\f0 PAGE  }}{\fldrslt {\cs21\lang1024 
\hich\af0\dbch\af15\loch\f0 218}}}{\cs21 
\par }\pard \s20\ri360\nowidctlpar\tqc\tx4153\tqr\tx8306\aspalpha\aspnum\faroman {
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta \dbch .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta \dbch .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta \dbch .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxta \dbch )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}
{\pntxta \dbch )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}{\pntxta \dbch )}}\pard\plain \qc\nowidctlpar\aspalpha\aspnum\faroman\outlinelevel0 
\fs21\kerning2\loch\af0\hich\af0\dbch\f15\cgrid {\fs32\loch\af16\hich\af1\dbch\f16 \loch\af16\hich\af1\dbch\f16 \'b5\'da\'be\'c5\'d5\'c2\'a1\'a1\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd}{
\fs32\loch\af16\hich\af1\dbch\f16 
\par }\pard \qc\nowidctlpar\aspalpha\aspnum\faroman {\fs28\loch\af16\hich\af1\dbch\f16 \loch\af16\hich\af1\dbch\f16 \'d2\'d4\'bc\'b0\'cb\'fc\'c3\'c7\'d4\'da\'b4\'f3\'d0\'cd\'ca\'fd\'d7\'d6\'cf\'b5\'cd\'b3\'c9\'e8\'bc\'c6\'d6\'d0\'b5\'c4\'d7\'f7\'d3\'c3}{
\fs28\loch\af16\hich\af1\dbch\f16 
\par }\pard \qj\nowidctlpar\aspalpha\aspnum\faroman\outlinelevel0 {\b \loch\af15\hich\af1\dbch\f15 \'c7\'b0\'d1\'d4}{\b 
\par }\pard \qj\nowidctlpar\aspalpha\aspnum\faroman {
\par }{\loch\af15\hich\af1\dbch\f15 \'ba\'ea\'b5\'a5\'d4\'aa}{\hich\af1\dbch\af15\loch\f15 (Macrocells}{\loch\af15\hich\af1\dbch\f15 \'bb\'f2}{\hich\af1\dbch\af15\loch\f15  Megacells)}{\loch\af15\hich\af1\dbch\f15 \'bb\'f2\'ba\'cb}{
\hich\af1\dbch\af15\loch\f15 (Cores)}{\loch\af15\hich\af1\dbch\f15 \'ca\'c7\'d4\'a4\'cf\'c8\'c9\'e8\'bc\'c6\'ba\'c3\'b5\'c4\'a3\'ac\'c6\'e4\'b9\'a6\'c4\'dc\'be\'ad\'b9\'fd\'d1\'e9\'d6\'a4\'b5\'c4\'a1\'a2\'d3\'c9\'d7\'dc\'ca\'fd\'b3\'ac\'b9\'fd}{
\hich\af1\dbch\af15\loch\f15 5000}{\loch\af15\hich\af1\dbch\f15 \'b8\'f6\'c3\'c5\'b9\'b9\'b3\'c9\'b5\'c4\'d2\'bb\'cc\'e5\'bb\'af\'b5\'c4\'b5\'e7\'c2\'b7\'c4\'a3\'bf\'e9\'a3\'ac\'d5\'e2\'b8\'f6\'c4\'a3\'bf\'e9\'bf\'c9\'d2\'d4\'ca\'c7\'d2\'d4\'c8\'ed
\'bc\'fe\'ce\'aa\'bb\'f9\'b4\'a1\'b5\'c4\'a3\'ac\'d2\'b2\'bf\'c9\'d2\'d4\'ca\'c7\'d2\'d4\'d3\'b2\'bc\'fe\'ce\'aa\'bb\'f9\'b4\'a1\'b5\'c4\'a1\'a3\'d5\'e2\'be\'cd\'ca\'c7\'ce\'d2\'c3\'c7\'d4\'da\'b5\'da\'d2\'bb\'d5\'c2\'b5\'c4}{\hich\af1\dbch\af15\loch\f15 
1.5.3}{\loch\af15\hich\af1\dbch\f15 \'ba\'cd}{\hich\af1\dbch\af15\loch\f15 1.5.4}{\loch\af15\hich\af1\dbch\f15 \'bd\'da\'d6\'d0\'cc\'d6\'c2\'db\'b9\'fd\'b5\'c4\'c8\'ed\'ba\'cb\'ba\'cd\'d3\'b2\'ba\'cb\'a1\'a3\'cb\'f9\'ce\'bd\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe
}{\hich\af1\dbch\af15\loch\f15 (Virtual Chips)}{\loch\af15\hich\af1\dbch\f15 \'d2\'b2\'be\'cd\'ca\'c7\'d3\'c3\'c8\'ed\'ba\'cb\'b9\'b9\'b3\'c9\'b5\'c4\'c6\'f7\'bc\'fe\'a3\'ac\'bc\'b4\'d3\'c3}{\hich\af1\dbch\af15\loch\f15 Verilog HDL}{
\loch\af15\hich\af1\dbch\f15 \'bb\'f2}{\hich\af1\dbch\af15\loch\f15 VHDL}{\loch\af15\hich\af1\dbch\f15 \'d3\'ef\'d1\'d4\'c3\'e8\'ca\'f6\'b5\'c4\'b3\'a3\'d3\'c3\'b4\'f3\'b9\'e6\'c4\'a3\'bc\'af\'b3\'c9\'b5\'e7\'c2\'b7\'c4\'a3\'d0\'cd\'a1\'a3}{\loch\af15 
\hich\af0\dbch\af15\loch\f15  }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d4\'da\'d0\'c2\'b5\'e7\'c2\'b7\'d1\'d0\'d6\'c6\'b9\'fd\'b3\'cc\'d6\'d0\'a3\'ac\'bd\'e8\loch\af15\hich\af0\dbch\f15 \'d6\'fa}{\loch\af15 \hich\af0\dbch\af15\loch\f15 EDA}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'d7\'db\'ba\'cf\'b9\'a4\'be\'df\'a3\'ac\'c8\'ed\'ba\'cb\'ba\'cd\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'bf\'c9\'d2\'d4\'ba\'dc\'c8\'dd\'d2\'d7\'b5\'d8\'d3\'eb\'c6\'e4\'cb\'fc\'cd\'e2\'b2\'bf\'c2\'df\'bc\'ad\'bd\'e1\'ba\'cf\'ce\'aa
\'d2\'bb\'cc\'e5\'a3\'ac\'b4\'d3\'b6\'f8\'b4\'f3\'b4\'f3\'c0\'a9\'d5\'b9\'c1\'cb\'c9\'e8\'bc\'c6\'d5\'df\'bf\'c9\'d1\'a1\'d3\'c3\'b5\'c4\'d7\'ca\'d4\'b4\'a1\'a3\'d5\'c6\'ce\'d5\'c8\'ed\'ba\'cb\'ba\'cd\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'a3\'a8\'d2\'b2
\'b3\'c6}{\loch\af15\hich\af1\dbch\f15 \'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'a3\'a9\'b5\'c4\'d6\'d8\'d3\'c3\'bc\'bc\'ca\'f5\'bf\'c9\'b4\'f3\'b4\'f3\'cb\'f5\'b6\'cc\'c9\'e8\'bc\'c6\'d6\'dc\'c6\'da\'a3\'ac\'bc\'d3
\'bf\'ec\'b8\'df\'bc\'bc\'ca\'f5\'d0\'c2\'d0\'be\'c6\'ac\'b5\'c4\'cd\'b6\'b2\'fa\'ba\'cd\'c9\'cf\'ca\'d0}{\loch\af15 \hich\af0\dbch\af15\loch\f15  }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'a1\'a3\'b6\'f8}{\loch\af15\hich\af1\dbch\f15 \'cb\'f9\'ce\'bd
\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'d4\'f2\'ca\'c7\'d3\'c3\'cf\'b5\'cd\'b3\'bc\'b6}{\hich\af1\dbch\af15\loch\f15 Verilog HDL}{\loch\af15\hich\af1\dbch\f15 \'bb\'f2}{\hich\af1\dbch\af15\loch\f15 VHDL}{\loch\af15\hich\af1\dbch\f15 \'d3\'ef
\'d1\'d4\'c3\'e8\'ca\'f6\'b5\'c4\'b3\'a3\'d3\'c3\'b4\'f3\'b9\'e6\'c4\'a3\'bc\'af\'b3\'c9\'b5\'e7\'c2\'b7\'a3\'a8\'c8\'e7}{\hich\af1\dbch\af15\loch\f15 ROM}{\loch\af15\hich\af1\dbch\f15 \'ba\'cd}{\hich\af1\dbch\af15\loch\f15 RAM}{
\loch\af15\hich\af1\dbch\f15 \'a3\'a9\'bb\'f2\'d7\'dc\'cf\'df\'bd\'d3\'bf\'da\'b5\'c4\'d0\'d0\'ce\'aa\'c4\'a3\'d0\'cd\'b5\'c8\'a3\'ac\'cd\'f9\'cd\'f9\'ca\'c7\'b2\'bb\'bf\'c9\'d7\'db\'ba\'cf\'b5\'c4\'a3\'ac\'d2\'b2\'c3\'bb\'d3\'d0\'b1\'d8\'d2\'aa\'d7\'db
\'ba\'cf\'b3\'c9\'be\'df\'cc\'e5\'b5\'e7\'c2\'b7\'a3\'ac\'b5\'ab\'c6\'e4\'cb\'f9\'d3\'d0\'b6\'d4\'cd\'e2\'b5\'c4\'d0\'d4\'c4\'dc\'d3\'eb\'d5\'e6\'ca\'b5\'b5\'c4\'c6\'f7\'bc\'fe\'bb\'f2\'bd\'d3\'bf\'da\'cd\'ea\'c8\'ab\'d2\'bb\'d6\'c2\'a3\'ac\'d4\'da
\'b7\'c2\'d5\'e6\'ca\'b1\'bf\'c9\'d3\'c3\'c0\'b4\'b4\'fa\'cc\'e6\'d5\'e6\'ca\'b5\'b5\'c4\'b2\'bf\'bc\'fe\'a3\'ac\'d3\'c3\'d2\'d4\'d1\'e9\'d6\'a4\'cb\'f9\'c9\'e8\'bc\'c6\'b5\'c4\'b5\'e7\'c2\'b7\'a3\'a8\'b1\'d8\'d0\'eb\'d7\'db\'ba\'cf\'b5\'c4\'b2\'bf
\'b7\'d6\'a3\'a9\'ca\'c7\'b7\'f1\'d5\'fd\'c8\'b7\'a1\'a3}{
\par 
\par }{\loch\af15\hich\af1\dbch\f15 \'d4\'da\'c3\'c0\'b9\'fa\loch\af15\hich\af1\dbch\f15 \'ba\'cd\'b5\'e7\'d7\'d3\'b9\'a4\'d2\'b5\'cf\'c8\'bd\'f8\'b5\'c4\'b9\'fa\'bc\'d2\'a3\'ac\'b8\'f7\'d6\'d6\'ce\'a2\'b4\'a6\'c0\'ed\'c6\'f7\'d0\'be\'c6\'ac\'a3\'a8\'c8\'e7}{
\hich\af1\dbch\af15\loch\f15 8051}{\loch\af15\hich\af1\dbch\f15 \'a3\'a9\'a1\'a2\'cd\'a8\'d3\'c3\'b4\'ae\'d0\'d0\'bd\'d3\'bf\'da\'d0\'be\'c6\'ac\'a3\'a8\'c8\'e7}{\hich\af1\dbch\af15\loch\f15 8251}{\loch\af15\hich\af1\dbch\f15 \'a3\'a9\'a1\'a2\'d6\'d0
\'b6\'cf\'bf\'d8\'d6\'c6\'c6\'f7\'d0\'be\'c6\'ac\'a3\'a8\'c8\'e7}{\hich\af1\dbch\af15\loch\f15 8259}{\loch\af15\hich\af1\dbch\f15 \'a3\'a9\'a1\'a2\'b2\'a2\'d0\'d0\'ca\'e4\'c8\'eb\'ca\'e4\'b3\'f6\'bd\'d3\'bf\'da\'d0\'be\'c6\'ac}{
\hich\af1\dbch\af15\loch\f15 (PIO)}{\loch\af15\hich\af1\dbch\f15 \'a1\'a2\'d6\'b1\'bd\'d3\'b4\'e6\'b4\'a2\'c6\'f7\'b4\'e6\'c8\'a1\'d0\'be\'c6\'ac\'a3\'a8}{\hich\af1\dbch\af15\loch\f15 DMA}{\loch\af15\hich\af1\dbch\f15 \'a3\'a9\'a1\'a2\'ca\'fd\'d7\'d6
\'d0\'c5\'ba\'c5\'b4\'a6\'c0\'ed\'d0\'be\'c6\'ac}{\hich\af1\dbch\af15\loch\f15 (DSP)}{\loch\af15\hich\af1\dbch\f15 \'a1\'a2}{\hich\af1\dbch\af15\loch\f15 RAM}{\loch\af15\hich\af1\dbch\f15 \'ba\'cd}{\hich\af1\dbch\af15\loch\f15 ROM}{
\loch\af15\hich\af1\dbch\f15 \'d0\'be\'c6\'ac\'ba\'cd}{\hich\af1\dbch\af15\loch\f15 PCI}{\loch\af15\hich\af1\dbch\f15 \'d7\'dc\'cf\'df\'bf\'d8\'d6\'c6\'c6\'f7\'d0\'be\'c6\'ac\'d2\'d4\'bc\'b0}{\hich\af1\dbch\af15\loch\f15 PCI}{\loch\af15\hich\af1\dbch\f15 
\'d7\'dc\'cf\'df\'bf\'d8\'d6\'c6\'bd\'d3\'bf\'da\'b5\'c8\'b6\'bc\'d3\'d0\'c6\'e4\'cf\'e0\'b6\'d4\'d3\'a6\'b5\'c4\'c9\'cc\'c6\'b7\'bb\'af\'b5\'c4\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'bf\'c9\'b9\'a9
\'d1\'a1\'d3\'c3\'a1\'a3\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'cd\'f9\'cd\'f9\'d6\'bb\'cc\'e1\'b9\'a9\'c3\'c5\'bc\'b6\'ba\'cd}{\hich\af1\dbch\af15\loch\f15 RTL}{\loch\af15\hich\af1\dbch\f15 \'bc\'b6\'b5\'c4}{\hich\af1\dbch\af15\loch\f15 Verilog HDL}{
\loch\af15\hich\af1\dbch\f15 \'bb\'f2}{\hich\af1\dbch\af15\loch\f15 VHDL}{\loch\af15\hich\af1\dbch\f15 \'d4\'b4\'b4\'fa\'c2\'eb\'a3\'ac\'b6\'f8\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'cd\'f9\'cd\'f9\'cc\'e1\'b9\'a9\'cf\'b5\'cd\'b3\'bc\'b6\'b4\'fa
\'c2\'eb\'a1\'a3\'d5\'e2\'ca\'c7\'d2\'f2\'ce\'aa\'c3\'c5\'bc\'b6\'ba\'cd}{\hich\af1\dbch\af15\loch\f15 RTL}{\loch\af15\hich\af1\dbch\f15 \'bc\'b6\'b5\'c4}{\hich\af1\dbch\af15\loch\f15 Verilog HDL}{\loch\af15\hich\af1\dbch\f15 \'bb\'f2}{
\hich\af1\dbch\af15\loch\f15 VHDL}{\loch\af15\hich\af1\dbch\f15 \'ca\'c7\'bf\'c9\'d7\'db\'ba\'cf\'b5\'c4\'a3\'ac\'cb\'fc\'d3\'eb\'be\'df\'cc\'e5\'b5\'c4\'c2\'df\loch\af15\hich\af1\dbch\f15 \'bc\'ad\'b5\'e7\'c2\'b7\'d3\'d0\'d7\'c5\'be\'ab\'c8\'b7\'b5\'c4
\'b6\'d4\'d3\'a6\'b9\'d8\'cf\'b5\'a1\'a3}{
\par 
\par }{\loch\af15\hich\af1\dbch\f15 \'bd\'fc\'c4\'ea\'c0\'b4\'d4\'da\'cf\'d6\'b4\'fa\'ca\'fd\'d7\'d6\'cf\'b5\'cd\'b3\'c9\'e8\'bc\'c6\'c1\'ec\'d3\'f2\'d6\'d0\'b7\'a2\'d5\'b9\'d7\'ee\'bf\'ec\'b5\'c4\'d2\'bb\'b8\'f6\'b2\'bf\'c3\'c5\'be\'cd\'ca\'c7\'cc\'e1\'b9\'a9
\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'b5\'c4\'c9\'e8\'bc\'c6\'ba\'cd\'b7\'fe\'ce\'f1\'a1\'a3}{\hich\af1\dbch\af15\loch\f15  }{\loch\af15\hich\af1\dbch\f15 \'c4\'bf\'c7\'b0}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'b9\'fa\'bc\'ca\'c9\'cf\'d3\'d0\'d2\'bb\'b8\'f6\'bd\'d0\'d7\'f7}{\ul\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c1\'aa\'c3\'cb}{\ul\loch\af15 \hich\af0\dbch\af15\loch\f15 (VSIA)}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'b5\'c4\'d7\'e9\'d6\'af\'a3\'ac\'cb\'fc\'ca\'c7\'d0\'ad\'b5\'f7}{\loch\af15\hich\af1\dbch\f15 \'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd}
{\loch\af15\hich\af1\dbch\f15 \'b5\'c4\'c9\'e8\'bc\'c6\'b1\'ea\'d7\'bc\'ba\'cd\'b7\'fe\'ce\'f1}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b9\'a4\'d7\'f7\'b5\'c4\'b9\'fa\'bc\'ca\'d7\'e9\'d6\'af\'a1\'a3}{\loch\af15\hich\af1\dbch\f15 \'d0\'e9\'c4\'e2\'c6\'f7
\'bc\'fe\'ba\'cd}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd}{\loch\af15\hich\af1\dbch\f15 \'b1\'d8\'d0\'eb\'b7\'fb\'ba\'cf\'cd\'a8\'d3\'c3\'b5\'c4\'b9\'a4\'d2\'b5\'b1\'ea\'d7\'bc\'ba\'cd\'b4\'ef\'b5\'bd
\'d2\'bb\'b6\'a8\'b5\'c4\'d6\'ca\'c1\'bf\'cb\'ae\'d7\'bc\'a3\'ac\'b2\'c5\'c4\'dc\'b7\'a2\'b2\'bc}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'a1\'a3\'d5\'e2\'b6\'d4}{\loch\af15\hich\af1\dbch\f15 \'d1\'a1\'d3\'c3\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd}{
\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd}{\loch\af15\hich\af1\dbch\f15 \'c0\'b4\'c9\'e8\'bc\'c6\'b8\'b4\'d4\'d3\'cf\'b5\'cd\'b3\'b5\'c4\'b9\'a4\'b3\'cc\'ca\'a6\'c3\'c7\'ce\'de\'d2\'c9\'d3\'d0\'ba\'dc\'b4\'f3
\'b5\'c4\'b0\'ef\'d6\'fa\'a1\'a3\'c8\'e7\'b9\'fb\'cb\'fb\'c3\'c7\'b2\'c9\'d3\'c3\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd}{\loch\af15\hich\af1\dbch\f15 \'bc\'bc
\'ca\'f5\'c0\'b4\'c9\'e8\'bc\'c6\'b8\'b4\'d4\'d3\'b5\'c4\'ca\'fd\'d7\'d6\'cf\'b5\'cd\'b3\'b1\'d8\'bd\'ab\'b4\'f3\'b4\'f3\'cb\'f5\'b6\'cc\'c9\'e8\'bc\'c6\'d6\'dc\'c6\'da\'b2\'a2\'cc\'e1\'b8\'df\'c9\'e8\'bc\'c6\'b5\'c4\'d6\'ca\'c1\'bf\'a3\'ac\'d2\'b2
\'ce\'aa\'c7\'a7\'cd\'f2\'c3\'c5\'bc\'b6\'b5\'a5\'c6\'ac\'cf\'b5\'cd\'b3\'b5\'c4\'ca\'b5\'cf\'d6\'c6\'cc\'c6\'bd\loch\af15\hich\af1\dbch\f15 \'c1\'cb\'b5\'c0\'c2\'b7\'a1\'a3}{\fs32\loch\af16\hich\af1\dbch\f16 
\par }{
\par 
\par 
\par }{\b \hich\af1\dbch\af15\loch\f15 9.1}{\b \loch\af15\hich\af1\dbch\f15 \'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'bf\'e9\'b5\'c4\'b9\'a9\'d3\'a6\'c9\'cc}{\b 
\par 
\par }{\loch\af15\hich\af1\dbch\f15 \'d4\'da\'d5\'e2\'d2\'bb\'bd\'da\'d6\'d0\'ce\'d2\'c3\'c7\'c1\'d0\'b3\'f6\'d2\'bb\'d0\'a9\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd\'bd\'d3\'bf\'da\'b5\'c4\'b9\'a9\'d3\'a6\'c9\'cc\'b5\'c4}{\hich\af1\dbch\af15\loch\f15 E-mail}{
\loch\af15\hich\af1\dbch\f15 \'b5\'d8\'d6\'b7\'bc\'b0\'cb\'fc\'c3\'c7\'cc\'e1\'b9\'a9\'b5\'c4\'b2\'fa\'c6\'b7\'ba\'cd\'b7\'fe\'ce\'f1\'b9\'a9\'b6\'c1\'d5\'df\'b2\'ce\'bf\'bc\'a3\'ba}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\trowd \trgaph108\trhdr \clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx2592\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx5000\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx6212\clvertalt\clbrdrt\brdrs\brdrw30 
\clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7140\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb 
\cellx8295\pard \qc\nowidctlpar\intbl\aspalpha\aspnum\faroman {
\par }{\loch\af15\hich\af1\dbch\f15 \'b9\'ab\'cb\'be\'c3\'fb}{\cell 
\par }{\loch\af15\hich\af1\dbch\f15 \'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'c0\'e0\'d0\'cd}{
\par \cell 
\par }{\loch\af15\hich\af1\dbch\f15 \'cb\'f9\'d3\'c3\'d3\'ef\'d1\'d4}{\cell 
\par }\pard \qj\nowidctlpar\intbl\aspalpha\aspnum\faroman {\loch\af15\hich\af1\dbch\f15 \'bc\'d3\'c3\'dc\'b7\'f1}{\cell }\pard \qc\nowidctlpar\intbl\aspalpha\aspnum\faroman {
\par }{\loch\af15\hich\af1\dbch\f15 \'d3\'ef\'d1\'d4\'bc\'b6\'b1\'f0}{\cell }\pard \nowidctlpar\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright {\row }\trowd \trgaph108\trhdr \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx2592\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx5000\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx6212\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr
\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7140\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx8295\pard \qj\nowidctlpar\intbl\aspalpha\aspnum\faroman {
\loch\af16\hich\af1\dbch\f16 \hich\af1\dbch\af16\loch\f16 American Microsystem}{
\par }{\loch\af15\hich\af1\dbch\f15 \'b5\'e7\'d7\'d3\'d0\'c5\'cf\'e4\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 tdrake@poci.amis.com\cell }{\loch\af15\hich\af1\dbch\f15 \'cb\'e3\'ca\'f5\'d4\'cb\'cb\'e3\'ba\'af\'ca\'fd}{
\par }{\loch\af15\hich\af1\dbch\f15 \'d2\'ec\'b2\'bd\'cd\'ac\'b2\'bd}{\hich\af1\dbch\af15\loch\f15 FIFO
\par \hich\af1\dbch\af15\loch\f15 DSP
\par }{\loch\af15\hich\af1\dbch\f15 \'ce\'a2\'b4\'a6\'c0\'ed\'c6\'f7}{
\par }{\hich\af1\dbch\af15\loch\f15 UART}{\loch\af15\hich\af1\dbch\f15 \'ba\'cd}{\hich\af1\dbch\af15\loch\f15  USARTs
\par \hich\af1\dbch\af15\loch\f15 RAM }{\loch\af15\hich\af1\dbch\f15 \'ba\'cd}{\hich\af1\dbch\af15\loch\f15 ROM\cell }\pard \qc\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 Verilog
\par \hich\af1\dbch\af15\loch\f15 VHDL\cell }{\loch\af15\hich\af1\dbch\f15 \'b2\'bb}{\cell }{\loch\af15\hich\af1\dbch\f15 \'c3\'c5\'bc\'b6}{
\par }{\hich\af1\dbch\af15\loch\f15 RTL}{\loch\af15\hich\af1\dbch\f15 \'bc\'b6}{\cell }\pard \nowidctlpar\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright {\row }\pard \qj\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 ARM
\par \hich\af1\dbch\af15\loch\f15 Semiconductor
\par }{\loch\af15\hich\af1\dbch\f15 \'b5\'e7\'d7\'d3\'d0\'c5\loch\af15\hich\af1\dbch\f15 \'cf\'e4\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 armsemi@netcom.com\cell }{\loch\af15\hich\af1\dbch\f15 \'ce\'a2\'b4\'a6\'c0\'ed\'c6\'f7\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 8031,8032,8051
\par }{\loch\af15\hich\af1\dbch\f15 \'cd\'a8\'d0\'c5\'c6\'f7\'bc\'fe\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 8530
\par }{\loch\af15\hich\af1\dbch\f15 \'d7\'dc\'cf\'df\'bf\'d8\'d6\'c6\'c6\'f7\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 82365(PCMCIA Host i/f)\cell }\pard \qc\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 Verilog\cell }{\loch\af15\hich\af1\dbch\f15 \'bf\'c9\'d1\'a1}{\cell }{\loch\af15\hich\af1\dbch\f15 \'cf\'b5
\'cd\'b3\'bc\'b6}{
\par }{\loch\af15\hich\af1\dbch\f15 \'a3\'a8\'d6\'bb\'bf\'c9\'d3\'c3\'d3\'da\'b7\'c2\'d5\'e6\'a3\'a9}{\cell }\pard \nowidctlpar\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright {\row }\pard \qj\nowidctlpar\intbl\aspalpha\aspnum\faroman {
\hich\af1\dbch\af15\loch\f15 Scenix Semiconductor
\par }{\loch\af15\hich\af1\dbch\f15 \'b5\'e7\'d7\'d3\'d0\'c5\'cf\'e4\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 sales@scenix.com\cell }{\loch\af15\hich\af1\dbch\f15 \'bf\'d8\'d6\'c6\'c6\'f7\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 NS COP8
\par \hich\af1\dbch\af15\loch\f15 PCI arbiter,master
\par \hich\af1\dbch\af15\loch\f15 & target
\par \hich\af1\dbch\af15\loch\f15 8237 DMA\cell }\pard \qc\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 Verilog
\par \cell }{\loch\af15\hich\af1\dbch\f15 \'b2\'bb}{\cell }{\loch\af15\hich\af1\dbch\f15 \'c3\'c5\'bc\'b6}{
\par }{\hich\af1\dbch\af15\loch\f15 RTL}{\loch\af15\hich\af1\dbch\f15 \'bc\'b6}{\cell }\pard \nowidctlpar\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright {\row }\pard \qj\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 
Sierra Research and
\par \hich\af1\dbch\af15\loch\f15 Technology
\par }{\loch\af15\hich\af1\dbch\f15 \'b5\'e7\'d7\'d3\loch\af15\hich\af1\dbch\f15 \'d0\'c5\'cf\'e4\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 core@srti.com
\par \cell \hich\af1\dbch\af15\loch\f15 ATM SAR 622 Mbits
\par \hich\af1\dbch\af15\loch\f15 Ethernet }{\loch\af15\hich\af1\dbch\f15 \'bf\'d8\'d6\'c6\'c6\'f7}{\hich\af1\dbch\af15\loch\f15 100/10-Mbits
\par \hich\af1\dbch\af15\loch\f15 CPU R3000}{\loch\af15\hich\af1\dbch\f15 \'ba\'cb}{\cell }\pard \qc\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 Verilog
\par \cell }{\loch\af15\hich\af1\dbch\f15 \'b2\'bb}{\cell }{\loch\af15\hich\af1\dbch\f15 \'c3\'c5\'bc\'b6}{
\par }{\hich\af1\dbch\af15\loch\f15 RTL}{\loch\af15\hich\af1\dbch\f15 \'bc\'b6}{\cell }\pard \nowidctlpar\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright {\row }\trowd \trgaph108\trhdr \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 
\clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx2592\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx5000\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrr
\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx6212\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7140\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrr
\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx8295\pard \qj\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 Silicon Engineering
\par }{\loch\af15\hich\af1\dbch\f15 \'b5\'e7\'d7\'d3\'d0\'c5\'cf\'e4\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 info@sei.com \cell \hich\af1\dbch\af15\loch\f15 Micro VGA \cell }\pard \qc\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 Verilog
\par \cell }{\loch\af15\hich\af1\dbch\f15 \'b2\'bb}{\cell }{\loch\af15\hich\af1\dbch\f15 \'c3\'c5\'bc\'b6}{
\par }{\hich\af1\dbch\af15\loch\f15 RTL}{\loch\af15\hich\af1\dbch\f15 \'bc\'b6}{\cell }\pard \nowidctlpar\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright {\row }\trowd \trgaph108\trhdr \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 
\clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx2592\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx5000\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx6212\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15\brdrcf1 
\cltxlrtb \cellx7140\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx8295\pard \qj\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 
Lucent Technology
\par }{\loch\af15\hich\af1\dbch\f15 \'b5\'e7\'d7\'d3\'d0\'c5\'cf\'e4\'a3\'ba}{
\par }{\hich\af1\dbch\af15\loch\f15 attfpga@aloft.att.com\cell \hich\af1\dbch\af15\loch\f15 DSP
\par \hich\af1\dbch\af15\loch\f15 PCI Master
\par \hich\af1\dbch\af15\loch\f15 PCI target\cell }\pard \qc\nowidctlpar\intbl\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 Verilog
\par \hich\af1\dbch\af15\loch\f15 VHDL\cell }{\loch\af15\hich\af1\dbch\f15 \'b2\'bb}{\cell }{\loch\af15\hich\af1\dbch\f15 \'c3\'c5\'bc\'b6}{
\par }{\hich\af1\dbch\af15\loch\f15 RTL}{\loch\af15\hich\af1\dbch\f15 \'bc\'b6}{
\par }{\loch\af15\hich\af1\dbch\f15 \'ba\'cd}{
\par }{\loch\af15\hich\af1\dbch\f15 \'cf\'b5\'cd\'b3\'bc\'b6}{
\par }\pard \qj\nowidctlpar\intbl\aspalpha\aspnum\faroman {\loch\af15\hich\af1\dbch\f15 \'a3\'a8\'d6\'bb\'bf\'c9\'d3\'c3\'d3\'da\'b7\'c2\'d5\'e6\'a3\'a9}{
\par }{\loch\af15\hich\af1\dbch\f15 \'c8\'fd\'d6\'d6\'b6\'bc\'bf\'c9\'cc\'e1\'b9\'a9}{\cell }\pard \nowidctlpar\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright {\row }\pard \qj\nowidctlpar\aspalpha\aspnum\faroman {
\par }{\loch\af15 
\par }{\b\loch\af15 \hich\af0\dbch\af15\loch\f15 9.2 }{\b\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'b5\'c4\'c9\'e8\'bc\'c6}{\b\loch\af15 
\par 
\par }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ce\'d2\'b9\'fa\'b4\'f3\'c2\'bd\'b5\'d8\'c7\'f8\'d3\'c9\'d3\'da\'b8\'b4\'d4\'d3\'d0\'be\'c6\'ac\'b5\'c4\'c9\'e8\'bc\'c6\'b9\'a4\'d7\'f7\'bf\'aa\'d5\'b9\'bd\'cf\'cd\'ed\'a3\'ac\'be\'ad\'b7\'d1\'d2\'b2\'b1\'c8
\'bd\'cf\'c9\'d9\'a3\'ac\'c4\'bf\'c7\'b0\'d0\'ed\'b6\'e0\'b5\'a5\'ce\'bb\'d3\'d0\'bb\'b9\'b2\'bb\'c4\'dc\'bc\'b0\'ca\'b1\'b5\'c3\'b5\'bd\'c9\'cc\'d2\'b5\'bb\'af\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'ba\'cd\'bd\'d3\'bf\'da\'a3\'ac\'d2\'f2\'b4\'cb
\'be\'cd\'d3\'d0\'b1\'d8\'d2\'aa\'d7\'d4\'bc\'ba\'c0\'b4\'c9\'e8\'bc\'c6\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'a1\'a3\'cf\'c2\'c3\'e6\'b5\'c4\'c0\'fd\'d7\'d3\'cb\'b5\'c3\'f7\'c1\'cb\'d4\'f5\'d1\'f9\'b8\'f9\'be\'dd\'ca\'fd\'be\'dd\'ca\'d6
\'b2\'e1\'ba\'cd\'b2\'a8\'d0\'ce\'cd\'bc\'c0\'b4\'b1\'e0\'d0\'b4\'d0\'e9\'c4\'e2\'b5\'c4\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'a1\'a3}{\loch\af15 
\par 
\par }{\b\loch\af15 \hich\af0\dbch\af15\loch\f15 [}{\b\loch\af15 \loch\af15\hich\af0\dbch\f15 \'c0\'fd}{\b\loch\af15 \hich\af0\dbch\af15\loch\f15 1]. }{\b\loch\af15 \loch\af15\hich\af0\dbch\f15 \'c4\'a3\'ca\'fd\'d7\'aa\'bb\'bb\'c6\'f7}{\b\loch\af15 
\hich\af0\dbch\af15\loch\f15 AD7886}{\b\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b7\'c2\'d5\'e6\'c4\'a3\'d0\'cd\'a3\'a8\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'a3\'a9\'b5\'c4\'c9\'e8\'bc\'c6\'a3\'ba}{\b\loch\af15 
\par 
\par }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'cf\'c2\'c3\'e6\'bd\'e9\'c9\'dc\'b5\'c4\'c3\'fb\'ce\'aa}{\loch\af15 \hich\af0\dbch\af15\loch\f15 ADC}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b5\'c4}{\loch\af15 \hich\af0\dbch\af15\loch\f15  Verilog }{
\loch\af15 \loch\af15\hich\af0\dbch\f15 \'c4\'a3\'bf\'e9\'d4\'da\'c9\'e8\'bc\'c6\'d6\'d0\'bf\'c9\'d2\'d4\'d3\'c3\'c0\'b4\'c4\'a3\'c4\'e2\'ca\'b5\'bc\'ca\'b5\'c4\'c4\'a3\'ca\'fd\'d7\'aa\'bb\'bb\'c6\'f7\'a3\'a8\'cf\'c2\'c3\'e6\'bc\'f2\'b3\'c6}{\loch\af15 
\hich\af0\dbch\af15\loch\f15 A/D}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'a3\'a9}{\loch\af15 \hich\af0\dbch\af15\loch\f15 AD7886}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'a1\'a3\'d2\'f2\'b4\'cb\'a3\'ac\'b8\'c3\'b7\'c2\'d5\'e6\'c4\'a3\'d0\'cd\'b5\'c4
\'ca\'e4\'c8\'eb\'d3\'eb\'b3\'f6\'b8\'f7\'ca\'e4\'b3\'f6\'d0\'c5\'ba\'c5\loch\af15\hich\af0\dbch\f15 \'bc\'e4\'b5\'c4\'c2\'df\'bc\'ad\'b9\'d8\'cf\'b5\'a3\'ac\'b1\'d8\'d0\'eb\'d1\'cf\'b8\'f1\'b0\'b4\'d5\'d5\'ca\'fd\'be\'dd\'ca\'d6\'b2\'e1\'c3\'e8\'ca\'f6
\'b5\'c4\'b2\'a8\'d0\'ce\'b1\'e0\'d0\'b4\'a3\'ac\'d0\'c5\'ba\'c5\'bc\'e4\'b5\'c4\'ca\'b1\'bc\'e4\'b9\'d8\'cf\'b5\'d2\'b2\'b1\'d8\'d0\'eb\'cd\'ea\'c8\'ab\'b7\'fb\'ba\'cf\'ca\'d6\'b2\'e1\'d2\'aa\'c7\'f3\'a3\'ac\'d5\'e2\'d1\'f9\'b2\'c5\'c4\'dc\'c6\'f0
\'b5\'bd\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'b5\'c4\'d7\'f7\'d3\'c3\'a1\'a3\'d6\'bb\'d3\'d0\'d5\'e2\'d1\'f9\'d4\'da\'c9\'e8\'bc\'c6\'b5\'e7\'c2\'b7\'b5\'c4\'b2\'e2\'ca\'d4\'d6\'d0\'b2\'c5\'c4\'dc\'d3\'c3\'cb\'fc\'c0\'b4\'b4\'fa\'cc\'e6\'ca\'b5\'bc\'ca
\'c6\'f7\'bc\'fe\'a1\'a3\'cd\'ac\'ca\'b1\'a3\'ac\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'bb\'b9\'d3\'a6\'be\'df\'b1\'b8\'ca\'b5\'bc\'ca\'b5\'e7\'c2\'b7\'cb\'f9\'c3\'bb\'d3\'d0\'b5\'c4\'b9\'a6\'c4\'dc\'a3\'ba}{\loch\af15 \hich\af0\dbch\af15\loch\f15  }{
\loch\af15 \loch\af15\hich\af0\dbch\f15 \'c8\'e7\'b6\'d4\'d3\'da\'b2\'bb\'b7\'fb\'ba\'cf\'d2\'aa\'c7\'f3\'b5\'c4\'ca\'e4\'c8\'eb\'d0\'c5\'ba\'c5\'bb\'b9\'c4\'dc\'b2\'fa\'c9\'fa\'b4\'ed\'ce\'f3\'cc\'e1\'ca\'be\'a1\'a3}{\loch\af15 
\hich\af0\dbch\af15\loch\f15  }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d4\'da\'ca\'b5\'bc\'ca\'b5\'c4\'b5\'e7\'c2\'b7\'d6\'d0\'a3\'ac\'ce\'d2\'c3\'c7\'ba\'dc\'c4\'d1\'bf\'d8\'d6\'c6}{\loch\af15 \hich\af0\dbch\af15\loch\f15 A/D}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'b5\'c4\'ca\'e4\'b3\'f6\'ca\'fd\'be\'dd\'a3\'ac\'c8\'bb\'b6\'f8\'d4\'da\'b8\'c3\'c9\'e8\'bc\'c6\'d6\'d0\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'b1\'e0\'d0\'b4\'ca\'fd\'be\'dd\'ce\'c4\'bc\'fe\'a3\'ac\'b5\'c3\'b5\'bd\'ce\'d2
\'c3\'c7\'cf\'eb\'d2\'aa\'b5\'c4\'b8\'f7\'d6\'d6\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'fd\'be\'dd\'a3\'ac}{\loch\af15 \hich\af0\dbch\af15\loch\f15  }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'c0\'b4\'b2\'e2\'ca\'d4\'ba\'f3\'d0\'f8\'b5\'e7\'c2\'b7\'b5\'c4\'b9\'a6
\'c4\'dc\'a3\'ac\'b2\'a2\'bf\'c9\'d2\'d4\'cb\'e6\'ca\'b1\'b8\'f9\'be\'dd\'b2\'e2\'ca\'d4\'d2\'aa\'c7\'f3\'b8\'fc\'b8\'c4\'ca\'fd\'be\'dd\'a3\'ac\'b7\'c7\'b3\'a3\'b7\'bd\'b1\'e3\'a1\'a3\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'b5\'c4\'b1\'e0\'d0\'b4\'ca\'c7}{
\loch\af15 \hich\af0\dbch\af15\loch\f15 Verilog }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d3\'ef\'d1\'d4\'d3\'a6\'d3\'c3\'b5\'c4\'d6\'d8\'d2\'aa\'b7\'bd\'c3\'e6\'a1\'a3\'cb\'fc\'ce\'aa}{\loch\af15 \hich\af0\dbch\af15\loch\f15 ASIC}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'c9\'e8\'bc\'c6\'cd\'b6\'c6\'ac\loch\af15\hich\af0\dbch\f15 \'d2\'bb\'b4\'ce\'b3\'c9\'b9\'a6\'cc\'e1\'b9\'a9\'c1\'cb\'bf\'c9\'c4\'dc\'a1\'a3}{\loch\af15 
\par 
\par }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d4\'da\'ca\'b5\'bc\'ca\'b5\'e7\'c2\'b7\'d6\'d0\'a3\'ac}{\loch\af15 \hich\af0\dbch\af15\loch\f15 A/D}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b0\'fc\'c0\'a8\'c4\'a3\'c4\'e2\'b2\'bf\'b7\'d6\'a3\'ac\'ba\'cd
\'d0\'ed\'b6\'e0\'b1\'d8\'d2\'aa\'b5\'c4\'bf\'d8\'d6\'c6\'ba\'cd\'b2\'ce\'bf\'bc\'b5\'e7\'c6\'bd\'ca\'e4\'c8\'eb\'a3\'ac\'b6\'f8\'d4\'da\'d5\'e2\'c0\'ef\'ce\'aa\'c1\'cb\'bc\'f2\'b5\'a5\'ba\'cd\'cb\'b5\'c3\'f7\'ce\'ca\'cc\'e2\'c6\'f0\'bc\'fb\'a3\'ac
\'d6\'bb\'bd\'e9\'c9\'dc}{\loch\af15 \hich\af0\dbch\af15\loch\f15 A/D }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'c4\'a3\'bf\'e9\'d3\'d0\'b9\'d8\'ca\'fd\'d7\'d6\'bd\'d3\'bf\'da\'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6\'b9\'a6\'c4\'dc\'a3\'ac\'b0\'d1\'d5\'e2
\'b2\'bf\'b7\'d6\'b9\'a6\'c4\'dc\'b1\'e0\'d0\'b4\'b3\'c9\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'a1\'a3\'c6\'e4\'d6\'d0\'d6\'bb\'b0\'fc\'c0\'a8\'c1\'cb}{\loch\af15 \hich\af0\dbch\af15\loch\f15 A/D}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'bf\'d8\'d6\'c6\'d0\'c5
\'ba\'c5\'b5\'c4\'ca\'e4\'c8\'eb\'a1\'a2\'ca\'fd\'be\'dd\'d7\'dc\'cf\'df\'ba\'cd\'a1\'b0\'c3\'a6\'a1\'b1\'d0\'c5\'ba\'c5\'b5\'c4\'ca\'e4\'b3\'f6\'a1\'a3\'ce\'aa\'c1\'cb\'bd\'f8\'d2\'bb\'b2\'bd\'bc\'f2\'bb\'af\'bb\'b9\'bc\'d9\'c9\'e8\'d1\'a1\'c6\'ac
\'d0\'c5\'ba\'c5}{\dn6\loch\af15 {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}
{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}
\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw741\pich564\picwgoal420\pichgoal320\wmetafile8\bliptag501338290\blipupi2304{\*\blipuid 1de1d0b25d4e61d2790787f44a5e11a3}
010009000003ca00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c020002a0021200000026060f001a00ffffffff000010000000c0ffffffb0ffffff60020000b00100000b000000
26060f000c004d617468547970650000300008000000fa0200001000000000000000040000002d01000005000000140258005b0005000000130258005d010500
0000140258008101050000001302580041021c000000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067
ec7700000a00d7020a0e040000002d01010008000000320aa001570101000000537908000000320aa0012e000100000043790a00000026060f000a00ffffffff
0100000000001c000000fb0210000800000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ba\'cd\'b6\'c1\'d0\'c5\'ba\'c5}{
\dn4\loch\af15 {\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}
{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}
\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw776\pich529\picwgoal440\pichgoal300\wmetafile8\bliptag-711820859\blipupi2304{\*\blipuid d59279c566ba93b4bafa379e35508410}
010009000003ca00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c02e001c0021200000026060f001a00ffffffff000010000000c0ffffffaaffffff800200008a0100000b000000
26060f000c004d617468547970650000200008000000fa0200001000000000000000040000002d0100000500000014025e0061000500000013025e004b010500
000014025e006c010500000013025e0080021c000000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067
ec7700000a000c020a74040000002d01010008000000320aa001510101000000447908000000320aa00146000100000052790a00000026060f000a00ffffffff
0100000000001c000000fb0210000800000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d7\'dc\'ca\'c7\'ce\'aa\'b5\'cd
\'b5\'e7\'c6\'bd\'a3\'a8\'d3\'d0\'d0\'a7\'a3\'a9\'a1\'a3\'d2\'f2\'b4\'cb\'a3\'ac\'b8\'c3\'c4\'a3\'d0\'cd\'ca\'b5\'d6\'ca\'c9\'cf\'ca\'c7\'ce\'aa\'bd\'cc\'d1\'a7\'c4\'bf\'b5\'c4\'b6\'f8\'b1\'e0\'d0\'b4\'b5\'c4\'bc\'f2\'bb\'af\'d0\'e9\'c4\'e2\'c4\'a3
\'bf\'e9}{\loch\af15 \hich\af0\dbch\af15\loch\f15 , }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d4\'da\'b7\'c2\'d5\'e6\'ca\'b1\'bd\'f6\'c4\'dc\'b4\'fa\'cc\'e6\loch\af15\hich\af0\dbch\f15 \'d5\'e6\'ca\'b5}{\loch\af15 \hich\af0\dbch\af15\loch\f15 A/D}{
\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6\'b9\'a6\'c4\'dc\'a1\'a3\'cb\'fc\'c0\'e0\'cb\'c6\'d2\'bb\'b8\'f6\'ca\'fd\'be\'dd\'b7\'a2\'c9\'fa\'c6\'f7\'a3\'ac\'b8\'f9\'be\'dd\'ca\'e4\'c8\'eb\'bf\'d8\'d6\'c6\'d0\'c5\'ba\'c5
\'ba\'cd}{\loch\af15 \hich\af0\dbch\af15\loch\f15 A/D}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d7\'d4\'c9\'ed\'b5\'c4\'cc\'d8\'d0\'d4\'ca\'e4\'b3\'f6\'d2\'bb\'b8\'f6\'d7\'d6\'bd\'da\'a3\'a8}{\loch\af15 \hich\af0\dbch\af15\loch\f15 8}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'ce\'bb\'a3\'a9\'ca\'fd\'be\'dd\'ba\'cd\'a1\'b0\'c3\'a6\'a1\'b1\'d0\'c5\'ba\'c5\'a1\'a3\'cd\'ac\'ca\'b1\'b8\'f9\'be\'dd\'ca\'d6\'b2\'e1\'b9\'e6\'b6\'a8\'a3\'ac\'b2\'bb\'b6\'cf\'bc\'ec\'b2\'e2\'ca\'e4\'c8\'eb\'d0\'c5\'ba\'c5
\'ca\'c7\'b7\'f1\'b7\'fb\'ba\'cf\'d2\'aa\'c7\'f3\'a1\'a3\'d0\'e9\'c4\'e2\'c4\'a3\'d0\'cd\'b5\'c4\'be\'ab\'c8\'b7\'d3\'eb\'b7\'f1\'a3\'ac\'d6\'b1\'bd\'d3\'d3\'b0\'cf\'ec\'b5\'bd\'c9\'e8\'bc\'c6\'ca\'c7\'b7\'f1\'c4\'dc\'b9\'bb\'d2\'bb\'b4\'ce\'cd\'b6
\'c6\'ac\'b3\'c9\'b9\'a6\'a1\'a3\'d2\'f2\'b4\'cb\'d4\'da}{\loch\af15 \hich\af0\dbch\af15\loch\f15 ASIC}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'cf\'b5\'cd\'b3\'d0\'be\'c6\'ac\'b5\'c4\'c9\'e8\'bc\'c6\'d6\'d0\'d3\'a6\'d3\'e8\'d2\'d4\'b3\'e4\'b7\'d6
\'b5\'c4\'d6\'d8\'ca\'d3\'a1\'a3}{\loch\af15 
\par 
\par \hich\af0\dbch\af15\loch\f15 AD7886}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ca\'c7\'be\'df\'d3\'d0\'d2\'bb\'b8\'f6\'b8\'df\'cb\'d9\'b5\'c4}{\loch\af15 \hich\af0\dbch\af15\loch\f15 8}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ce\'bb\'c8\'fd\'cc\'ac
\'ca\'fd\'be\'dd\'ca\'e4\'b3\'f6\'bd\'d3\'bf\'da\'b5\'c4\'c4\'a3\'ca\'fd\'d7\'aa\'bb\'bb\'c6\'f7}{\loch\af15 \hich\af0\dbch\af15\loch\f15 , }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d7\'aa\'bb\'bb\'b5\'c4\'b9\'fd\'b3\'cc\'d3\'c9\'ca\'e4\'c8\'eb\'d0\'c5
\'ba\'c5}{\dn6\loch\af15 {\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}
{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}
\picscalex99\picscaley90\piccropl0\piccropr0\piccropt0\piccropb0\picw1762\pich600\picwgoal999\pichgoal340\wmetafile8\bliptag-606988072\blipupi2305{\*\blipuid dbd218d89e07d671cfe80669927a4130}
010009000003ba00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c02200240061200000026060f001a00ffffffff000010000000c0ffffffa9ffffff00060000c90100000b000000
26060f000c004d617468547970650000300008000000fa0200001000000000000000040000002d0100000500000014025f0040000500000013025f00e3051c00
0000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067ec7700000a008d010a93040000002d0101000a00
0000320ac0012d0006000000434f4e5653540a00000026060f000a00ffffffff0100000000001c000000fb0214000900000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'bf\'d8\'d6\'c6}{\loch\af15 \hich\af0\dbch\af15\loch\f15 ,}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ca\'fd\'be\'dd\'b5\'c4\'b4\'e6\'c8\'a1\'d3\'c9\'d1\'a1\'c6\'ac\'d0\'c5\'ba\'c5}{\dn6\loch\af15 
{\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}
{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw741\pich564\picwgoal420\pichgoal320\wmetafile8\bliptag501338290\blipupi2304{\*\blipuid 1de1d0b25d4e61d2790787f44a5e11a3}010009000003ca00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c020002a0021200000026060f001a00ffffffff000010000000c0ffffffb0ffffff60020000b00100000b000000
26060f000c004d617468547970650000300008000000fa0200001000000000000000040000002d01000005000000140258005b0005000000130258005d010500
0000140258008101050000001302580041021c000000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067
ec7700000a00d7020a0e040000002d01010008000000320aa001570101000000537908000000320aa0012e000100000043790a00000026060f000a00ffffffff
0100000000001c000000fb0210000800000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ba\'cd\'b6\'c1\'d0\'c5\'ba\'c5}{
\dn4\loch\af15 {\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}
{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}
\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw776\pich529\picwgoal440\pichgoal300\wmetafile8\bliptag-711820859\blipupi2304{\*\blipuid d59279c566ba93b4bafa379e35508410}
010009000003ca00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c02e001c0021200000026060f001a00ffffffff000010000000c0ffffffaaffffff800200008a0100000b000000
26060f000c004d617468547970650000200008000000fa0200001000000000000000040000002d0100000500000014025e0061000500000013025e004b010500
000014025e006c010500000013025e0080021c000000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067
ec7700000a000c020a74040000002d01010008000000320aa001510101000000447908000000320aa00146000100000052790a00000026060f000a00ffffffff
0100000000001c000000fb0210000800000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ca\'e4\'c8\'eb\'d0\'c5\'ba\'c5
\'bf\'d8\'d6\'c6}{\loch\af15 \hich\af0\dbch\af15\loch\f15 (}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b5\'cd\'b5\'e7\'c6\'bd\'d3\'d0\'d0\'a7\'a3\'a9\'a1\'a3\'cf\'c2\'c3\'e6\'b5\'c4}{\loch\af15 \hich\af0\dbch\af15\loch\f15 Verilog }{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'d4\'b4\'b4\'fa\'c2\'eb\'c3\'e8\'ca\'f6\'c1\'cb\'b8\'c3}{\loch\af15 \hich\af0\dbch\af15\loch\f15 A/D}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b5\'c4\'d7\'aa\'bb\'bb\'c6\'f4\'b6\'af\'ba\'cd\'ca\'fd\'be\'dd\'b6\'c1\'b3\'f6
\'b9\'a6\'c4\'dc\'a3\'ac\'a3\'a8\'bc\'d9\'c9\'e8}{\dn6\loch\af15 {\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}
{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}
\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw741\pich564\picwgoal420\pichgoal320\wmetafile8\bliptag501338290\blipupi2304{\*\blipuid 1de1d0b25d4e61d2790787f44a5e11a3}
010009000003ca00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c020002a0021200000026060f001a00ffffffff000010000000c0ffffffb0ffffff60020000b00100000b000000
26060f000c004d617468547970650000300008000000fa0200001000000000000000040000002d01000005000000140258005b0005000000130258005d010500
0000140258008101050000001302580041021c000000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067
ec7700000a00d7020a0e040000002d01010008000000320aa001570101000000537908000000320aa0012e000100000043790a00000026060f000a00ffffffff
0100000000001c000000fb0210000800000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ba\'cd}{\dn4\loch\af15 
{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}
{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw776\pich529\picwgoal440\pichgoal300\wmetafile8\bliptag-711820859\blipupi2304{\*\blipuid d59279c566ba93b4bafa379e35508410}010009000003ca00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c02e001c0021200000026060f001a00ffffffff000010000000c0ffffffaaffffff800200008a0100000b000000
26060f000c004d617468547970650000200008000000fa0200001000000000000000040000002d0100000500000014025e0061000500000013025e004b010500
000014025e006c010500000013025e0080021c000000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067
ec7700000a000c020a74040000002d01010008000000320aa001510101000000447908000000320aa00146000100000052790a00000026060f000a00ffffffff
0100000000001c000000fb0210000800000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b6\'bc\'ce\'aa\'b5\'cd\'b5\'e7
\'c6\'bd\'a3\'a9\'b8\'f9\'be\'dd\'ca\'d6\'b2\'e1\'b5\'c4\'cb\'b5\'c3\'f7\'a3\'ac\'ca\'e4\'c8\'eb\'ba\'cd\'ca\'e4\'b3\'f6\'b2\'a8\'d0\'ce\'c8\'e7\'cf\'c2\'cd\'bc\'cb\'f9\'ca\'be\'a3\'ba}{\loch\af15 
\par 
\par }{\loch\af15 {\*\shppict{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureContrast}{\sv 819200}}{\sp{\sn pictureBrightness}{\sv 7864}}
{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}{\sp{\sn pictureActive}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}
{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw10582\pich5927\picwgoal5999\pichgoal3360\pngblip\bliptag60546470{\*\blipuid 039bdda6c372b5e9955fb9a0d4902f18}89504e470d0a1a0a0000000d49484452000001f4000001180103000000909e96300000000467414d410000b1889598f4a600000006504c5445000000ffffffa5
d99fdd0000000970485973000012750000127401153accdd000007fa49444154789ceddbcf6b14571c00f00d8baed092c58b3db475fa0ff4503c6848cc1c7ae8
a1507a6ba1480b1ed24b5190a2319bcc8688a110760f2d3445714efd015a103ca8883bab29e6a064a5a55ad4ecacc4ba0531bbe9dacec6997daf6f7ebc9d1fef
c7ce0fd3a8ec1792ecfcf8ec7bf3ebcdbc37dfa460a268a6fabeeffd51dba943ad1adf3faa3e6d662fc7f777ef0d74d4cb4a7c5fd527d51935b69f1f2d77eefe
24c4f6d5c66433732014a7fa3fdec877d4cfc5d8fe5e69b9a39e5062fb3bd5c7ba7a3db66fdc5aede8eab9d8be5201eb753527c5f6a120dbcb09bd92d08bc93c
909279230aa7f84e42bf9ed0df4de81712fad9847e66937d26a1cf26f442321fedf4a7f848fcb9bc7fbfd05e7feebc1cc9b742792561f96c4f964fbb20a3f8a4
e547f46dc253ee481c5f26fc053130c710d9be99b2635b77cec961b1f98adf6738e59b336a29372459149ba940886c4f6c7fb144d43fcd293fc82124bd10c92b
0a392b8abf94d013c72fa2a7c4f3eff9f7a1be7fe9bc61b70c87a0dd8301dd36448a527e7b17fa55f4794a70da8f73d07e840575b25423a4371f21c122a5da38
74b6ff1ad79fd78d5be778434ae66bc8abb01ddba30356146073508ee7afa29b43512ea7523c6f787cdb3924ce8c05a7fe3bc3fac0a24574b75d54e13a88e9cd
ee534345fb7f88e74576f9e62fd38f889019c0ebc58677511dfb514e47c6eb8dec4065f7dcab78ffe1d31e486982517dfbda3bb3bbe60bb834d7f33a621ebffe
3037bbebbb45d999d16d3f245e47d2e3d78cdcccf07cf729cbf5bc8eacc7b70ce3abe11181f47fc15247850dea405ec00f8d66496f48a5ce424d98a079bcb659
ff27b9b921b1bbfd6bce5f741a8af93dbb756542e27bb4ffe6f68cd7295eded799d615f7598deedb5bb717468ed0ca5ffcf8cd9ff5f31f8a900c8f37b2e9c248
aebbfd1ebfb2c578bb36a852b8d54239defe2be119d89b8f81f786cee8a59b122483f0dd687a7c6572415776bbdeed5bb0fd138f17266f6bcab734df3d3799fe
6fb3fe9dbb9a3246f33f32fdbf92ebd5c9914ac9f33c1cd507e3d9f9733dfdc3985e13137ae716bd7543fd45b6473f00f941aebfe09442f766d09e9f9e9d57f0
87beeffb48bebec97e6193cb4fe4db92e50d29a6cf23bf94e58ebff03c7a54ced4072b79def88ba6f7287faec21d7fe17ab4fd2b950a77fc85ebd1cf4a45861d
defeefe1614584dce3d7cb2f49c9fc8d6c327f2fa1b782ef5b9becef6fb2dfeced4fec6b097dbd97ef46d0cf6aba21b52aae57a3f9fc61bd2cad5d717dd1b3b0
b707a9d79ea65292e17a6f2f384cf99a5e93607c5f34b71fde885b7fe7fab5b65f88efd14d00b409bf10daa300f9d461cb67664e56256b5699d295e5f86dd6e0
5d213d3db724e57d6334a1bc53ffe387f61c5bb2679587a378a78f7a1ce68eddb06745db7e677a15e6be79e07c8ee301cccdff99c44fe4e6ef27f0303d7d12f7
a963f9e2cc493ca611cb7be2a5f6d6e0f0ebb09ec85b5f11cfa3b6aba7cf0707c229db7f6203bdccadbfedaf6fa0175f00bfb271fea914ded382e1cde18e14be
4fc6f0fef2392f108957c3cf870799a52387f0b8771c3f503838845fb7f03c2535ccf2e385b1797c9fd7288d44d71789598edf6fc861fc15ba4f170ee604ec39
f96beb3591ea070a4776e2253caf3785e02ca7fed2a950be4d2f1fedbf50be65e05c12d5e7077ed9ef7a4efe600bbc673d9b29cdd1c74e86b1bdff6acdd1501e
aec11aaac2a7d7ab2d27c3983c7fb9de9050bb001acba5fca49d611cc103882e6d01f9cef9c753131d3bc398f4cc0434cb1781981abe68ac1e75328ca3fa15a0
424d99de39ed641847f2d7a1dd2e2a6d439fb4338ce3f97fa66a4e863165fc45eced1f4fe94e8631c50bbdfdf229ddc930a678f66befd7b1dfdbd09d0ce3c83e
10ccf127323e4be841b8e7b7be4fe699891be13dfd124ae28b91bcfb7afd59f94c244fd67f36a18f567faad742f9225a4d0153c12f40be3985eebf3dfdb406da
22c829419f35dfa8e9f95ebe9cda0df259302e07562b646073ab397e1d4ce624c76f007ac8180afa6b63700d84a9ffac0680080d21b05a231be9fa01410f3291
7c470efab1489e3881237ae2048a587f3284ffb3fdb142213d2508ef0e5c5ecd6ad405e17cfbad5b8d066d41480fd2b71afed4b71edeea8521507026b5a5c6a3
28e503e726efbcb806d95bd965bfafe14e3fb3fee618c60e3c71a7f183bffe35cfa3045e426ebfd3116a0fdc593dec2f7fd106e1bcfee5d5ec35bff766b4894c
5fc7bedaf844f42e00dede536fbfa5baba4ff179d933813f931ef7ffd69777947d0b427a66ffc54dda82eeb0705c8ff725e9d9fd07c93381b3232d9fd16ba3dd
85867735a6c7dd6dcb0facd5dc6c39e6f33baad8effa800e2f99137894c2f247d60cb7c5f46da63750effd7d7d229f3d6d4ee0a364f9dc03c390bbebb13cdab1
bf9d9dd1c0476605f1902cf66dd70b6cbf6d624c2bdd7426bc3eb7ee7a999076a02abf7bf48bdae84367633cbe9c6bbb27779e3154bf02c1e9f1f4edcbd65565
78fd7839d7746fcc6546ef01dd42ceb40e9c1db51223f151b68f5f61a4e5a6cb16fdff3fe0f51fe8db35c5eaf73aad9560f9b43cd272d37559db8f0ef9a9a797
9ae23ec2fb436078b4ffbe3f7a492bfd4ad4df17ccf307f9431767b5bd0d93faf69fdf4b0cefbb307dc7cf17ccebc737fae43bffd8abf9bed83be13bff7dc16c
3f7c15f35d7fe13cfbfaf70573fc8cddfe84f3d0ebd9ed1f256fdc09d1f399ddfe86f332d3b3f3ce65cae7e0fb07ff0b47b6c77521df5fb0ffffb1d7fdf3917d4932bdb76191283e7474127a4ff47ddff7fd26faff00969f4a86bd3675460000000049454e44ae426082}}{\nonshppict
{\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw10582\pich5927\picwgoal5999\pichgoal3360\wmetafile8\bliptag60546470\blipupi120{\*\blipuid 039bdda6c372b5e9955fb9a0d4902f18}
0100090000034a23000000002623000000000400000003010800050000000b0200000000050000000c021801f4010500000007010400000026230000430f2000
cc0000001801f401000000001801f4010000000028000000f4010000180100000100010000000000004600007512000074120000020000000200000000000000
ffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd00007fffffffffff
fffff000ffffffffffffffffffffeb00000000001fffffffffffffffffffffffffffffffffffffffffffffffffffc000000000000000000000007fffffffffff
fffff000fffffffffffffffffc000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffff8fffffffffffffffffffffff3fffffffffff
fffff000fffffffffffffffffc0000000000ffff8fffffffffffffffffffffffffffffffffffffffffffffffffff9fffffffffffffffffffffff3fffffffffff
fffff000ffffffffffffffffffffffffffffffffc7ffffffffffffffffffffffffffffffffffffffffffffffffff9fffffffffffffffffffffff9fffffffffff
fffff000ffffffffffffffffffffffffffffffffe7ffffffffffffffffffffffffffffffffffffffffffffffffff3fffffffffffffffffffffff9fffffffffff
fffff000ffffffffffffffffffffffffffffffffe7ffffffffffffffffffffffffffffffffffffffffffffffffff3fffffffffffffffffffffff8fffffffffff
fffff000fffffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffcfffffffffff
fffff000fffffffffffffffffffffffffffffffff3fffffffffffffffffffffffffffffffffffffffffffffffffe7fffffffffffffffffffffffc7ffffffffff
fffff000fffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffffffffffffe7fffffffffffffffffffffffe7ffffffffff
fffff000fffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffffffffffffc7fffffffffffffffffffffffe3ffffffffff
fffff000fffffffffffffffffffffffffffffffff8fffffffffffffffffffffffffffffffffffffffffffffffffcfffffffffffffffffffffffff3ffffffffff
fffff000fffffffffffffffffffffffffffffffffc7ffffffffffffffffffffffffffffffffffffffffffffffff8fffffffffffffffffffffffff1ffffffffff
fffff000fffffffffffffffffffffffffffffffffe7ffffffffffffffffffffffffffffffffffffffffffffffff9fffffffffffffffffffffffff8ffffffffff
fffff000fffffffffffffffffffffffffffffffffe3ffffffffffffffffffffffffffffffffffffffffffffffff3ffff73b987f73def7ffffffffcffffffffff
fffff000ffffffffffffffffffffffffffffffffff1ffffffffffffffffffffffffffffffffffffffffffffffff3ffffa57abbf7bed2fffffffffc7fffffffff
fffff000ffffff039f3cf3e7ffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffffffffffe3ffff9efabbf03f5dfffffffffe0000000000
001ff000ffffff018e3cf3c7ffffffffffffffffff8fffffe0000000000000000000000000000000000000000007ffff4efb11f7bfbdfffffffffe0000000000
001ff000ffffff79c07cf00fffffffffffffffffffc0000000000000000000000000000000000000000000000007ffffacf36fb03e39fffffffffc7fffffffff
fffff000ffffff7cc07cf88fffffffffffffffffff800000000003ffffffffffffffffffffffffffffffffffffe3fffeab7903d7bdc6fffffffffcffffffffff
fffff000ffffff7ce47cf99fffffffffffffffffff9ffffffffffffffffffffffffffffffffffffffffffffffff3ffff437a6de03ee6fffffffff8ffffffffff
fffff000ffffff7ce4fcf89fffffffffffffffffff1ffffffffffffffffffffffffffffffffffffffffffffffff9ffff087b67f7bed0fffffffff9ffffffffff
fffff000ffffff7ce4fcfc9fffffffffffffffffff3ffffffffffffffffffffffffffffffffffffffffffffffff9ffffd3b083f7fe577ffffffff1ffffffffff
fffff000ffffff78f1fcfc3ffffffffffffffffffe3ffffffffffffffffffffffffffffffffffffffffffffffff8ffff4bfb7b800fabfffffffff3ffffffffff
fffff000ffffff01f1e03c3ffffffffffffffffffe7ffffffffffffffffffffffffffffffffffffffffffffffffcffffd5fb01fbffbbffffffffe3ffffffffff
fffff000ffffff07fbe03e7ffffffffffffffffffc7ffffffffffffffffffffffffffffffffffffffffffffffffe7fffffffffffffffffffffffe7ffffffffff
fffff000fffffffffffffffffffffffffffffffffcfffffffffffffffffffffffffffffffffffffffffffffffffe7fffffffffffffffffffffffc7ffffffffff
fffff000fffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffffffffffffe3fffffffffffffffffffffffcfffffffffff
fffff000fffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffffffffffffe3fffffffffffffffffffffff8fffffffffff
fffff000fffffffffffffffffffffffffffffffff3fffffffffffffff9dd16c0fffffffffffffffffffffffffffe9fffffffffffffffffffffff9fffffffffff
fffff000ffffffffffffffffffffffffffffffffe7fffffffffffffb05deee5dbffffffffffffffffffffffffffe9fffffffffffffffffffffff9fffffffffff
fffff000ffffffffffffffffffffffffffffffffe7fffffffffffffb75deef5b3ffffffffffffffffffffffffffe8fffffffffffffffffffffff3fffffffffff
fffff000ffffffffffffffffffffffffffffffffcffffffffffffffb75c20fc6fffffffffffffffffffffffffffecfffffffffffffffffffffff3fffffffffff
fffff000ffffffffffffffffffffffffffffffffcffffffffffffff801daee77fffffffffffffffffffffffffffec7fffffffff00000000000007fffffffffff
fffff000fffffffffffffffffffffffffc00000016ffffffffffffffffdaefa67ffffffffffffffffffffffffffee000000000000000000000007fffffffffff
fffff000fffffffffffffffffe000000000000000efffffffffffffe0fd60fddfffffffffffffffffffffffffffee000000000000000ffffffffffffffffffff
fffff000fffffffffffffffffe000000007fffff8efffffffffffffef7ceefebfffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffffefffffffffffffe03d6ef007ffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffffefffffffffffff820d6efeffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffffeffffffffffffffdfc20ff7fffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7feffffffffffffffbffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffffffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7feffffffffffffffffffffffffffffffffffffffffff1ffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffffe7ffffffffffffffffffffffffffffffffe07fffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffffc3ffffffffffffffffffffffffffffffffe67fffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffffd9ffffffffffffffffffffffffffffffffe67fffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffffe1ffffffffffffffffffffffffffffffffe07fffffefffbffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffff87f7fefe3ffffc1fffffffffffffffffffffffffffffffef0ffffffefffbffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffff80f7fee03fff399fffffffffffffffffffffffffffffffc667fff1fefffbf0ffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffc00037fe800ffe799fffffffffffffffffffffffffffffff8e07fff006fff800000fffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffff81f7fef83ffe7cbfffffffffffffffffffffffffffffff8f0f000006fffb80ffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffff8ff7feffbffe7e7fffffffffffffffffffffffffffffff8ffffff07efffbf0ffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffe7fffffffffffffffffffffffffffffffff8ffffff7fefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffe7fffffffffffffffffffffffffffffffff8ffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffe7fffffffffffffffffffffffffffffffff87fffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffc3fffffffffffffffffffffffffffffffff07fffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffc3fffffffffffffffffffffffffffffffff8ffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffe7fffffffffffffffffffffffffffffffff8ffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffe7ffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fefffffffffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffefffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffff60001bffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7ff00000000000000000000000000000000000000000000000000001bffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7ff00000000000000000000000000000000000000000000000000001bfffffffeffffffbf3deffbe7df7c7fff
fffff000fffffffffffffffffffffffffffffff7ff1ffffffffffffffffffffffffffffffffffffffffffffffffeffcbfffffffeffffffbfdd9efbfbdfb3bfff
fffff000fffffffffffffffffffffffffffffff7ff3ffffffffffffffffffffffffffffffffffffffffffffffffeffcbfffffffeffffffbfed7efbfbdfcbbfff
fffff000fffffffffffffffffffffffffffffff7fe7ffffffffffffffffffffffffffffffffffffffffffffffffeffcbfffffffeffffffbff57ee0fddf9bbfff
fffff000fffffffffffffffffffffffffffffff7fe7ffffffffffffffffffffffffffffffffffffffffffffffffeffcbfffffffeffffffbff8fcfb7ddf683fff
fffff000fffffffffffffffffffffffffffffff7fe7ffffffffffffffffffffffffffffffffffffffffffffffffeffe3ffffe3fedffff7bf811e81f0076fffff
fffff000fffffffffffffffffffffffffffffff7fe7ffffffffffffffffffffffffffffffffffffffffffffffffeffe3ffff8ffe3f003bb9fcee7afddba81fff
fffff000fffffffffffffffffffffffffffffff7fcfffffffffffffffffffffffffffffffffffffffffffffffffeffe3ffff1ffefffffdb7ed7e7bfddf83dfff
fffff000fffffffffffffffffffffffffffffff7fcfffffffffffffffffffffffffffffffffffffffffffffffffffff3fffc7ffefffffeefddbe807ddfbdbfff
fffff000fffffe03e0f03e3ffffffffffffffff7fcfffffffffffffffffffffffffffffffffffffffffffffffffffff3fff1ffe00fffff5fcbdef3f00fbdffff
fffff000fffffe01c4639e3ffffffffffffffff7fcfffffffffffffffffffffffffffffffffffffffffffffffffffff3fe47fffff7ffffbff03eedfff7deffff
fffff000fffffe798e679e3ffffffffffffffff7f9fffffffffffffffffffffffffffffffffffffffffffffffffffff3fc0fffffffffffffffdfffffffffffff
fffff000fffffe798e7f9e3ffffffffffffffff7f9fffffffffffffffffffffffffffffffffffffffffffffffffffffbf83fffffffffffffffffffffffffffff
fffff000fffffe018e781e3ffffffffffffffff7f9fffffffffffffffffffffffffffffffffffffffffffffffffffffbf01fffffffffffffffffffffffffffff
fffff000fffffe038e707c1ffffffffffffffff7f9fffffffffffffffffffffffffffffffffffffffffffffffffffff9e03fffffffffffffffffffffffffffff
fffff000fffffe798e63fc9ffffffffffffffff7fbfffffffffffffffffffffffffffffffffffffffffffffffffffff9c1ffffffffffffffffffffffffffffff
fffff000fffffe798e67988ffffffffffffffff7fbfffffffffffffffffffffffffffffffffffffffffffffffffffff98fffffffffffffffffffffffffffffff
fffff000fffffe018e7039cffffffffffffffff7f3fffffffffffffffffffffffffffffffffffffffffffffffffffff9ffffffffffffffffffffffffffffffff
fffff000fffffe07ce7873e7fffffffffffffff7f3fffffffffffffffffffffffffffffffffffffffffffffffffffff8ffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7f3fffffffffffffffffffffffffffffffffffffffffffffffffffff8ffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7f3fffffffffffffffffffffffffffffffffffffffffffffffffffff8ffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7f3fffffffffffffffffffffffffffffffffffffffffffffffffffff8ffffffffffffffffffffffffffffffff
fffff000fffffe0000000007fffffffffffffff7e3fffffffffffffffffffffffffffffffffffffffffffffffffffffa7fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7e3fffffffffffffffffffffffffffffffffffffffffffffffffffffa7fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7e3fffffffffffffefffffffffffffffffffffffffffffffffffffffa7fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7e3fffffffffffffefffffffffffffffffffffffffffffffffffffffb3fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7cbfffffffffffffefffffffffffffffffffffffffffffffffffffffb3fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7cbfffffffffffffefffffffffffffffffffffffffffffffffffffffb3fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7cbfffffffffffffefffffffffffffffffffffffffffffffffffffffb3fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7cbfffffffffffffefffffffffffffffffffffffffffffffffffffffb9fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff79bfffffffffffffefffffffffffffffffffffffffffffffffffffffb9fffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff79bfffffffffffffefffffffffffffffffffffffffffffffffffffffb80000000000000000000000000000000
00fff000ffffffffffffffffffff8000000000001bfffffffffffffefffffffffffffffffffffffffffffffffffffffb80000000000000000000000000000000
00fff000fffffffffffffffffc000000000000001bfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffc000000001bffe7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffeffffffffffffffff8f839cf3fffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffeffffffffffffffff03819cf1fffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffe7b7c98e1fffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffeff7c98e5fffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffeffffffffffffffeeff7c94e4fffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffeff9fffffffffff86ff7c84ccffffffffffffc3fbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffef81fffffffffff86733884ceffffffffffffc03bffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffe8008000000007f8e03818cce7f80000000000003ffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffe800077ffffffff8f07839cde7fffffffffffc07bffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffff7fffffef81fffffffffff8fffffffffffffffffffffc3fbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbffffffc1fffffeff1fffffffffff8ffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffff8ff7fbfc7fffccfffffeffffffffffffff8ffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffff80f7fbe07ffffcfffffeffffffffffffff07fffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffe0017fa00007ffcfffffeffffffffffffff07fffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffff8077fbc07ff1c1fffffeffffffffffffff8ffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffff87f7fbfc7ff3cffffffeffffffffffffffdffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffff3e7fffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffff3e0fffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffff3fffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffff3fffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffff3fffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbffffe1fffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbffffe1fffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffff3fffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffff3fffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffdc0fffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffcc0fffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffce7fffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffcf3fffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffe3cf9ffffdffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffbf87fffe3cfcffffc1fbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fbfffffffffffffefffffffffffffffffffffffffffffffffffffffb807fffe78ccffffc03bfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffff8000007e70ecf8000003fffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffb807fffe7ce0ffffc07bfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbf87fffe7fffffffc7fbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffe7ffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffe7ffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffc3ffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffe7ffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffe7ffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff7fffffffffffffffefffffffffffffffffffffffffffffffffffffffbffffffffffffffffffb8000000000000
00fff000fffffffffffffffffffffffffffffff7fffffffe0000000efffffffffffffffffffffffffffffffffffffffbffffffffffffffffffb8000000000000
00fff000fffffffffffffffffffffffffffffff70000000000000006fffffffffffffffffffffffffffffffffffffffbffffffffffffffffffb9ffffffffffff
fffff000fffffffffffffffffffffffffffffff70000000000000006fffffffffffffffffffffffffffffffffffffffbffffffffffffffffffb3ffffffffffff
fffff000fffffffffffffffffffffffffffffff73fffffffffffffe6fffffffffffffffffffffffffffffffffffffffbffffffffffffffffffb3ffffffffffff
fffff000fffffffffffffffffffffffffffffff67fffffffffffffe6fffffffffffffffffffffffffffffffffffffffbffffffffffffffffffb3ffffffffffff
fffff000fffffffffffffffffffffffffffffff67ffffffffffffff2fffffffffffffffffffffffffffffffffffffffbffffffffffffffffffb3ffffffffffff
fffff000fffffffffffffffffffffffffffffff67ffffffffffffff2fffffffffffffffffffffffffffffffffffffffbffffffffffffffffffa7ffffffffffff
fffff000fffffffffffffffffffffffffffffff67ffffffffffffff2ffffffdf7d3ccfbef8fffffffffffffffffffffbffffffffffffffffffa7ffffffffffff
fffff000fffffffffffffffffffffffffffffff4fffffffffffffff2ffffffdcfddbf7bf677ffffffffffffffffffffbffffffffffffffffffa7ffffffffffff
fffff000fffffffffffffffffffffffffffffff4fffffffffffffff8ffffff1f7dd7f7bf977ffffffffffffffffffffbffffffffffffffffff87ffffffffffff
fffff000fffffffffffffffffffffffffffffff0fffffffffffffff8ffffffcf7dc3fbbf377ffffffffffffffffffffbffffffffffffffffff8fffffffffffff
fffff000ffffffffffff7ffffffffffffffffff1fffffffffffffff8ffffffdc39acfbbed07fffffffffffffffffffffffffffffffffffffff8fffffffffffff
fffff000fc0f038e3c7c0f9ffffffffffffffff1fffffffffffffffcffffe305fc2de00edfffffffffffffffffffffffffffffffffffffffff8fffffffffffff
fffff000f806118e3c78c79ffffffffffffffff1fffffffffffffffcffffc7581dadfbb7503fffffffffffffffffffffffffffffffffffffff9fffffffffffff
fffff000f9e67c8c3879e79ffffffffffffffff1fffffffffffffffcffff9f5dfd81fbbf07bfffffffffffffffffffffffffffffffffffffff9fffffffffffff
fffff000f1f47c8c393fc79ffffffffffffffff1fffffffffffffffcffff3f803837fbbf7b7fffffffffffffffffffffffffffffffffffffff9fffffffffffff
fffff000f3fcfc89393e0f9ffffffffffffffff3fffffffffffffffe7ffc7fbefdc3e01f7bffffffffffffffffffffffffffffffffffffffff9fffffffffffff
fffff000f3fcfc893b3c1f9ffffffffffffffff3fffffffffffffffe7fe8ffbefddfffefbdffffffffffffffffffffffffffffffffffffffff3fffffffffffff
fffff000f1fc7c833b98ff9ffffffffffffffff3fffffffffffffffe7fc3ffffffffffffffffffffffffffffffffffffffffffffffffffffff3fffffffffffff
fffff000f9e67c873399c79ffffffffffffffff3fffffffffffffffe7f87ffffffffffffffffffffffffffffffffffffffffffffffffffffff3fffffffffffff
fffff000f8c6318733988e07ffffffffffffffe7fffffffffffffffe7f83ffffffffffffffffffffffffffffffffffffffffffffffffffffff3fffffffffffff
fffff000fc0f01cf378c0c03ffffffffffffffe7fffffffffffffffe7f03fffffffffffffffffffffffffffffffffffffffffffffffffffffe3fffffffffffff
fffff000ff3fefffffffffffffffffffffffffe7ffffffffdffffffe3e07fffffffffffffffffffffffffffffffffffffffffffffffffffffe3fffffffffffff
fffff000ffffffffffffffffffffffffffffffc7ffffffffdffffffe3c3ffffffffffffffffffffffffffffffffffffffffffffffffffffffe3fffffffffffff
fffff000ffffffffffffffffffffffffffffffc3ffffffefdffffffe39fffffffffffffffffffffffffffffffffffffffffffffffffffffffc3fffffffffffff
fffff000ffffffffffffffffffffffffffffffc7fcffffc7dffff9fe9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbfffffffffffff
fffff000f800000000000003ffffffffffffffc3e07fff8fdffff81e9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbfffffffffffff
fffff000ffffffffffffffffffffffffffffffc200003f8f9fc000009ffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbfffffffffffff
fffff000ffffffffffffffffffffffffffffff9300007f8f1ffff00e9ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9bfffffffffffff
fffff000ffffffffffffffffffffffffffffff93e07fff8fdffff8fecffffffffffffffffffffffffffffffffffffffffffffffffffffffff9bfffffffffffff
fffff000ffffffffffffffffffffffffffffff93fc7fff8ffffffffecffffffffffffffffffffffffffffffffffffffffffffffffffffffff9bfffffffffffff
fffff000ffffffffffffffffffffffffffffff93ffffff8ffffffffecffffffffffffffffffffffffffffffffffffffffffffffffffffffff9bfffffffffffff
fffff000ffffffffffffffffffffffffffffffb3ffffff07fffffffec7fffffffffffffffffffffffffffffffffffffffffffffffffffffffbbfffffffffffff
fffff000ffffffffffffffffffffffffffffffb3ffffff87fffffffee7fffffffffffffffffffffffffffffffffffffc000000000000000003bfffffffffffff
fffff000fffffffffffffffffffffffffffff833ffffff8ffffffffee000000000000000000000000000000000000000000000000000000003bfffffffffffff
fffff000fffffffffffffffffc00000000000073ffffffcffffffffee000000000000000007fffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3fffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3fffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3fffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3fffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3fffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3fffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3fffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3fffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffffffb83fffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffffffbbbfffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffffffbfbfffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffffffbe3ffffffffffffffffffffffffffffffffc1fbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3f8ffffffffffffffffffffffffffffffff8fbe3ffffffffffffffffffffffffffffffffc03bfffffffffffff
fffff000fffffffffffffffffffffffffffffff300ffffffe000000000000000000000007f9f3f3ff0000000000000000000000000000000003fffffffffffff
fffff000fffffffffffffffffffffffffffffff00000000000000008ffffffffffffffffff9c3b3ff00bfffffffffffffffffffffffffffc07bfffffffffffff
fffff000fffffffffffffffffffffffffffffff3c0ffffffffffffffffffffffffffffffff9fb83ffffffffffffffffffffffffffffffffc3fbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3f8ffffffffffffffffffffffffffffffff9ffcffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffff3ffffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffbfffffffffffff
fffff000fffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffff1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffff07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffff83ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffff83ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffff87ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffc3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffdbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffff9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffffcffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffffe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffff3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffff9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffcfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffcfcffef9e7df7c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffefd6eefdfbdfb3bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffdadeedfbdfcbbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffdcbeddfddf9bbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffd81c80fddf683fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffdeef7df0076fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffff983ec0fddba81fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffdbdefb7ddf83dfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffdbdc01fddfbdbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffebdefaf00fbdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffe01efbfff7deffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00005000000070101000000030000000000}}}{\loch\af15 
\par }\pard \qj\li850\nowidctlpar\aspalpha\aspnum\faroman {\loch\af15 \loch\af15\hich\af0\dbch\f15 \'cd\'bc}{\loch\af15 \hich\af0\dbch\af15\loch\f15 1  A/D}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d7\'aa\'bb\'bb\'c6\'f4\'b6\'af\'ba\'cd\'ca\'fd\'be\'dd
\'b6\'c1\'b3\'f6\'ca\'b1\'d0\'f2\'a3\'a8}{\dn6\loch\af15 {\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}
{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}
\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw741\pich564\picwgoal420\pichgoal320\wmetafile8\bliptag501338290\blipupi2304{\*\blipuid 1de1d0b25d4e61d2790787f44a5e11a3}
010009000003ca00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c020002a0021200000026060f001a00ffffffff000010000000c0ffffffb0ffffff60020000b00100000b000000
26060f000c004d617468547970650000300008000000fa0200001000000000000000040000002d01000005000000140258005b0005000000130258005d010500
0000140258008101050000001302580041021c000000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067
ec7700000a00d7020a0e040000002d01010008000000320aa001570101000000537908000000320aa0012e000100000043790a00000026060f000a00ffffffff
0100000000001c000000fb0210000800000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 \hich\af0\dbch\af15\loch\f15 =}{\dn4\loch\af15 
{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}
{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw776\pich529\picwgoal440\pichgoal300\wmetafile8\bliptag-711820859\blipupi2304{\*\blipuid d59279c566ba93b4bafa379e35508410}010009000003ca00000003001c00000000000500000009020000000005000000020101000000050000000102ffffff00050000002e0118000000050000003102
01000000050000000b0200000000050000000c02e001c0021200000026060f001a00ffffffff000010000000c0ffffffaaffffff800200008a0100000b000000
26060f000c004d617468547970650000200008000000fa0200001000000000000000040000002d0100000500000014025e0061000500000013025e004b010500
000014025e006c010500000013025e0080021c000000fb0280fe0000000000009001010000000402001054696d6573204e657720526f6d616e00778cea77c067
ec7700000a000c020a74040000002d01010008000000320aa001510101000000447908000000320aa00146000100000052790a00000026060f000a00ffffffff
0100000000001c000000fb0210000800000000009001000000860102022253797374656d00000200000000000a0008008a010600000000000a0008008a01040000002d01020004000000f001010003000000000000000000}}{\loch\af15 \hich\af0\dbch\af15\loch\f15 =0}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'a3\'a9}{\loch\af15 
\par }\pard \qj\nowidctlpar\aspalpha\aspnum\faroman {\b\fs30\loch\af15 
\par }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ce\'aa\'ca\'b9\'cb\'f9\'c9\'e8\'bc\'c6\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'b6\'d4\'ca\'e4\'c8\'eb\'d0\'c5\'ba\'c5\'d3\'d0\'bc\'ec\'b2\'e2\'b9\'a6\'c4\'dc\'a3\'ac\'bb\'b9\'d4\'da\'c4\'a3\'bf\'e9\'d6\'d0
\'bc\'d3\'c8\'eb\'c1\'cb\'cc\'e1\'ca\'be\'ca\'e4\'c8\'eb\'d0\'c5\'ba\'c5\'d3\'d0\'b4\'ed\'b5\'c4\'d3\'ef\'be\'e4\'a1\'a3\'ca\'e4\'b3\'f6\'b5\'c4}{\loch\af15 \hich\af0\dbch\af15\loch\f15 8}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'ce\'bb\'ca\'fd\'be\'dd
\'bf\'c9\'d2\'d4\'b8\'f9\'be\'dd\'d2\'aa\'c7\'f3\'d7\'d4\'bc\'ba\'b1\'e0\'d6\'c6\'a3\'ac\'b4\'d3\'ca\'fd\'be\'dd\'ce\'c4\'bc\'fe}{\loch\af15 \hich\af0\dbch\af15\loch\f15 AD.DATA}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d6\'d0\'b6\'c1\'c8\'a1\'a1\'a3
\'cf\'c2\'c3\'e6\'ca\'c7\'d2\'bb\'b8\'f6\'c3\'fb\'ce\'aa}{\loch\af15 \hich\af0\dbch\af15\loch\f15 ADC.V}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b5\'c4\'ce\'c4\'bc\'fe\'a3\'ac\'c3\'e8\'ca\'f6\'c1\'cb\'b8\'c3}{\loch\af15 \hich\af0\dbch\af15\loch\f15 A/D}
{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d7\'aa\'bb\'bb\'c6\'f7\'b2\'a8\'d0\'ce\'cb\'f9\'ca\'be\'b5\'c4\'d5\'e2\'d2\'bb\'b2\'bf\'b7\'d6\'b9\'a6\'c4\'dc\'a1\'a3\'c6\'e4\'b7\'c2\'d5\'e6\'c4\'a3\'bf\'e9\'b5\'c4\'be\'df\'cc\'e5\'d4\'b4\'b4\'fa\'c2\'eb
\'c8\'e7\'cf\'c2\'a3\'ba}{\loch\af15 
\par 
\par \hich\af0\dbch\af15\loch\f15 //+++++++++++++++++++++++++++++++++++++++++++++++++++++++\hich\af0\dbch\af15\loch\f15 ++++++++++++++++++++
\par \hich\af0\dbch\af15\loch\f15 `timescale 1ns/100ps
\par }\pard\plain \s31\qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af15\hich\af2\dbch\f15\cgrid {\hich\af2\dbch\af15\loch\f15 module   adc (nconvst, nbusy, data);  
\par \hich\af2\dbch\af15\loch\f15 input\tab   nconvst;         // A/D }{\loch\af15\hich\af2\dbch\f15 \'c6\'f4\'b6\'af\'c2\'f6\'b3\'e5}{\hich\af2\dbch\af15\loch\f15 ST}{\loch\af15\hich\af2\dbch\f15 \'a3\'ac\'bc\'b4\'c9\'cf\'cd\'bc\'d6\'d0}{
\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 output    nbusy;       // A/D }{\loch\af15\hich\af2\dbch\f15 \'b9\'a4\'d7\'f7\'b1\'ea\'d6\'be\'a3\'ac\'bc\'b4\'c9\'cf\'cd\'bc\'d6\'d0}{\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 output       data;         // }{\loch\af15\hich\af2\dbch\f15 \'ca\'fd\'be\'dd\'d7\'dc\'cf\'df\'a3\'ac\'b4\'d3}{\hich\af2\dbch\af15\loch\f15 AD.DATA}{\loch\af15\hich\af2\dbch\f15 \'ce\'c4\'bc\'fe\'d6\'d0\'b6\'c1\'c8\'a1\'ca\'fd
\'be\'dd\'ba\'f3\'be\'ad\'b6\'cb\'bf\'da\'ca\'e4\'b3\'f6}{
\par \hich\af2\dbch\af15\loch\f15 reg[7:0]  databuf,i;   // }{\loch\af15\hich\af2\dbch\f15 \'c4\'da\'b2\'bf\'bc\'c4\'b4\'e6\'c6\'f7}{
\par \hich\af2\dbch\af15\loch\f15 reg       nbusy;
\par \hich\af2\dbch\af15\loch\f15 wire[7:0] data;
\par \hich\af2\dbch\af15\loch\f15 reg[7:0]  data_mem[0:255];
\par \hich\af2\dbch\af15\loch\f15 reg       link_bus;
\par \hich\af2\dbch\af15\loch\f15 integer   tconv,
\par \hich\af2\dbch\af15\loch\f15           t5,
\par \hich\af2\dbch\af15\loch\f15           t8,
\par \hich\af2\dbch\af15\loch\f15           t9,
\par \hich\af2\dbch\af15\loch\f15           t12;
\par \hich\af2\dbch\af15\loch\f15 integer   wideth1,
\par \hich\af2\dbch\af15\loch\f15           wideth2,
\par \hich\af2\dbch\af15\loch\f15           wideth;          
\par \hich\af2\dbch\af15\loch\f15 //}{\loch\af15\hich\af2\dbch\f15 \'ca\'b1\'bc\'e4\'b2\'ce\'ca\'fd\'b6\'a8\'d2\'e5}{\hich\af2\dbch\af15\loch\f15 (}{\loch\af15\hich\af2\dbch\f15 \'d2\'c0\'be\'dd}{\hich\af2\dbch\af15\loch\f15 AD7886}{
\loch\af15\hich\af2\dbch\f15 \'ca\'d6\'b2\'e1}{\hich\af2\dbch\af15\loch\f15 )}{\loch\af15\hich\af2\dbch\f15 \'a3\'ba}{
\par \hich\af2\dbch\af15\loch\f15 always @(negedge nconvst)
\par \hich\af2\dbch\af15\loch\f15    begi\hich\af2\dbch\af15\loch\f15 n
\par \hich\af2\dbch\af15\loch\f15          tconv =9500+\{$random\}%500; //(type 950, max 1000}{\loch\af15\hich\af2\dbch\f15 \'a3\'a9}{\hich\af2\dbch\af15\loch\f15 Conversion Time
\par \hich\af2\dbch\af15\loch\f15          t5 =\{$random\}%1000;  //(max 100)   CONVST to BUSY Propagation Dlay
\par \hich\af2\dbch\af15\loch\f15                              // CL = 10pf
\par \hich\af2\dbch\af15\loch\f15          t8 = 200;     //(min 20)  CL=20pf  Data Setup Tim\hich\af2\dbch\af15\loch\f15 e Prior to BUSY
\par \hich\af2\dbch\af15\loch\f15                       //(min 10)  CL=100pf
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15          t9 = 100+\{$random\}%900; //(min 10, max 100) Bus Relinquish Time After }{\hich\af2\dbch\af15\loch\f15       
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15                                  //}{\hich\af2\dbch\af15\loch\f15 CONVST
\par \hich\af2\dbch\af15\loch\f15          t12 = 2500;   //(type) BUSY High to CONVST Low, SHA Acquisition Time
\par \hich\af2\dbch\af15\loch\f15    end
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 initial
\par \hich\af2\dbch\af15\loch\f15       begi\hich\af2\dbch\af15\loch\f15 n 
\par \tab \hich\af2\dbch\af15\loch\f15    $readmemh("adc.data",data_mem);  //}{\loch\af15\hich\af2\dbch\f15 \'b4\'d3\'ca\'fd\'be\'dd\'ce\'c4\'bc\'fe}{\hich\af2\dbch\af15\loch\f15 adc.data}{\loch\af15\hich\af2\dbch\f15 \'d6\'d0\'b6\'c1\'c8\'a1\'ca\'fd\'be\'dd}{
\hich\af2\dbch\af15\loch\f15     
\par \tab \hich\af2\dbch\af15\loch\f15    i = 0;
\par \tab \hich\af2\dbch\af15\loch\f15    nbusy  = 1; 
\par \hich\af2\dbch\af15\loch\f15            link_bus = 0;
\par \hich\af2\dbch\af15\loch\f15       end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 assign data = link_bus? databuf:8'bzz; //}{\loch\af15\hich\af2\dbch\f15 \'c8\'fd\'cc\'ac\'d7\'dc\'cf\'df}{
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 /*----------------------------------------------------------------------\hich\af2\dbch\af15\loch\f15 ------
\par }{\loch\af15\hich\af2\dbch\f15 \'d4\'da\'d0\'c5\'ba\'c5}{\hich\af2\dbch\af15\loch\f15 nconvst}{\loch\af15\hich\af2\dbch\f15 \'b5\'c4\'b8\'ba\'cc\'f8\'bd\'b5\'d1\'d8\'b5\'bd\'c0\'b4\'ba\'f3\'a3\'ac\'b8\'f4}{\hich\af2\dbch\af15\loch\f15 t5}{
\loch\af15\hich\af2\dbch\f15 \'c3\'eb}{\hich\af2\dbch\af15\loch\f15 nbusy}{\loch\af15\hich\af2\dbch\f15 \'d0\'c5\'ba\'c5\'d6\'c3\'ce\'aa\'b5\'cd\'a3\'ac}{\hich\af2\dbch\af15\loch\f15 tconv}{\loch\af15\hich\af2\dbch\f15 \'ca\'c7}{
\hich\af2\dbch\af15\loch\f15 AD}{\loch\af15\hich\af2\dbch\f15 \'bd\'ab\'c4\'a3\'c4\'e2\'d0\'c5\'ba\'c5\'d7\'aa\'bb\'bb\'ce\'aa\'ca\'fd\'d7\'d6\'d0\'c5\'ba\'c5\'b5\'c4\'ca\'b1\'bc\'e4\'a3\'ac\loch\af15\hich\af2\dbch\f15 \'d4\'da\'d0\'c5\'ba\'c5}{
\hich\af2\dbch\af15\loch\f15 nconvst}{\loch\af15\hich\af2\dbch\f15 \'b5\'c4\'d5\'fd\'cc\'f8\'bd\'b5\'d1\'d8\'b5\'bd\'c0\'b4\'ba\'f3\'be\'ad\'b9\'fd}{\hich\af2\dbch\af15\loch\f15 tconv}{\loch\af15\hich\af2\dbch\f15 \'ca\'b1\'bc\'e4\'ba\'f3\'a3\'ac\'ca\'e4
\'b3\'f6}{\hich\af2\dbch\af15\loch\f15 nbusy}{\loch\af15\hich\af2\dbch\f15 \'d0\'c5\'ba\'c5\'b1\'e4\'ce\'aa\'b8\'df\'a1\'a3}{\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 --------------------------------------*/  
\par \hich\af2\dbch\af15\loch\f15 always @(negedge nconvst) 
\par \tab \hich\af2\dbch\af15\loch\f15     fork
\par \tab \hich\af2\dbch\af15\loch\f15     \tab  #t5  nbusy =0;
\par \tab \hich\af2\dbch\af15\loch\f15        @(posedge nconvst)
\par \hich\af2\dbch\af15\loch\f15          \hich\af2\dbch\af15\loch\f15          begin 
\par \hich\af2\dbch\af15\loch\f15                        #tconv  nbusy=1;
\par \hich\af2\dbch\af15\loch\f15                   end\tab       
\par \tab \hich\af2\dbch\af15\loch\f15     join
\par \hich\af2\dbch\af15\loch\f15 /*------------------------------------------------------------------------\tab       
\par \hich\af2\dbch\af15\loch\f15 nconvst}{\loch\af15\hich\af2\dbch\f15 \'d0\'c5\'ba\'c5\'b5\'c4\'cf\'c2\'bd\'b5\'d1\'d8\'b4\'a5\'b7\'a2\'a3\'ac\'be\'ad\'b9\'fd}{\hich\af2\dbch\af15\loch\f15 t9 }{\loch\af15\hich\af2\dbch\f15 \'d1\'d3\'ca\'b1\'ba\'f3\'a3\'ac
\'b0\'d1\'ca\'fd\'be\'dd\'d7\'dc\'cf\'df\'ca\'e4\'b3\'f6\'b9\'d8\'b1\'d5\'d6\'c3\'ce\'aa\'b8\'df\'d7\'e8\'cc\'ac\'a3\'ac\'c8\'e7\'cd\'bc\'ca\'be\'a1\'a3}{
\par \hich\af2\dbch\af15\loch\f15  nconvst}{\loch\af15\hich\af2\dbch\f15 \'d0\'c5\'ba\'c5\'b5\'c4\'c9\'cf\'c9\'fd\'d1\'d8\'b5\'bd\'c0\'b4\'ba\'f3\'a3\'ac\'be\'ad\'b9\'fd\loch\af15\hich\af2\dbch\f15 \'a3\'a8}{\hich\af2\dbch\af15\loch\f15 tconv - t8)}{
\loch\af15\hich\af2\dbch\f15 \'ca\'b1\'bc\'e4\'a3\'ac\'ca\'e4\'b3\'f6\'d2\'bb\'b8\'f6\'d7\'d6\'bd\'da\'a3\'a8}{\hich\af2\dbch\af15\loch\f15 8}{\loch\af15\hich\af2\dbch\f15 \'ce\'bb\'ca\'fd\'be\'dd\'a3\'a9\'b5\'bd}{\hich\af2\dbch\af15\loch\f15 databuf}{
\loch\af15\hich\af2\dbch\f15 \'a3\'ac}{\hich\af2\dbch\af15\loch\f15  }{\loch\af15\hich\af2\dbch\f15 \'b8\'c3\'ca\'fd\'be\'dd\'c0\'b4\'d7\'d4\'d3\'da}{\hich\af2\dbch\af15\loch\f15 data_mem}{\loch\af15\hich\af2\dbch\f15 \'a1\'a3\'b6\'f8}{
\hich\af2\dbch\af15\loch\f15 data_mem}{\loch\af15\hich\af2\dbch\f15 \'d6\'d0\'b5\'c4\'ca\'fd\'be\'dd\'ca\'c7\'b3\'f5\'ca\'bc\'bb\'af\'ca\'b1\'b4\'d3\'ca\'fd\'be\'dd\'ce\'c4\'bc\'fe}{\hich\af2\dbch\af15\loch\f15 AD.DATA}{\loch\af15\hich\af2\dbch\f15 
\'d6\'d0\'b6\'c1\'c8\'a1\'b5\'c4\'a1\'a3}{\hich\af2\dbch\af15\loch\f15  }{\loch\af15\hich\af2\dbch\f15 \'b4\'cb\'ca\'b1\'d3\'a6\'c6\'f4\'b6\'af\'d7\'dc\'cf\'df\'b5\'c4\'c8\'fd\'cc\'ac\'ca\'e4\'b3\'f6\'a1\'a3}{\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 ---------------------------------------------------------------------------*/
\par \hich\af2\dbch\af15\loch\f15 always @(negedge nconvst)          
\par \hich\af2\dbch\af15\loch\f15       begin
\par \hich\af2\dbch\af15\loch\f15          @(posedg\hich\af2\dbch\af15\loch\f15 e nconvst)
\par \hich\af2\dbch\af15\loch\f15             begin 
\par \hich\af2\dbch\af15\loch\f15               #(tconv-t8)   databuf=data_mem[i];  
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             
\par \hich\af2\dbch\af15\loch\f15          if(wideth <10000  && wideth>500)  
\par \hich\af2\dbch\af15\loch\f15             begin
\par \hich\af2\dbch\af15\loch\f15               if(i==255) i=0;
\par \hich\af2\dbch\af15\loch\f15               else i=i+1;
\par \hich\af2\dbch\af15\loch\f15             end   
\par \hich\af2\dbch\af15\loch\f15          else  i = i;
\par \hich\af2\dbch\af15\loch\f15       end
\par \hich\af2\dbch\af15\loch\f15 //}{\loch\af15\hich\af2\dbch\f15 \'d4\'da\'c4\'a3\'ca\'fd\'d7\'aa\'bb\'bb\'c6\'da\'bc\'e4\'b9\'d8\'b1\'d5\'c8\'fd\'cc\'ac\'ca\'e4\'b3\'f6\'a3\'ac\'d7\'aa\'bb\'bb\'bd\'e1\'ca\'f8\'ca\'b1\'c6\'f4\'b6\'af\'c8\'fd\'cc\'ac\'ca\'e4
\'b3\'f6}{
\par \hich\af2\dbch\af15\loch\f15 always @(negedge nconvst)
\par \hich\af2\dbch\af15\loch\f15   fork
\par \hich\af2\dbch\af15\loch\f15        #t9 link_bus = 1'b0;    //}{\loch\af15\hich\af2\dbch\f15 \'b9\'d8\'b1\'d5\'c8\'fd\'cc\'ac\'ca\'e4\'b3\'f6\'a3\'ac\'b2\'bb\'d4\'ca\'d0\'ed\'d7\'dc\'cf\'df\'ca\'e4\'b3\'f6}{
\par \hich\af2\dbch\af15\loch\f15        @(posedge nconvst)
\par \hich\af2\dbch\af15\loch\f15             begin 
\par \hich\af2\dbch\af15\loch\f15             #(tconv-t8)   link_bus=1'b1;     
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15   join
\par \hich\af2\dbch\af15\loch\f15 /*------------------------------------------------------------------------
\par }{\loch\af15\hich\af2\dbch\f15 \'b5\'b1}{\hich\af2\dbch\af15\loch\f15 nconvst}{\loch\af15\hich\af2\dbch\f15 \'ca\'e4\'c8\'eb\'d0\'c5\'ba\'c5\'b5\'c4\'cf\'c2\'d2\'bb\'b8\'f6\'d7\'aa\'bb\'bb\'b5\'c4\'cf\'c2\'bd\'b5\'d1\'d8\'d3\'eb}{
\hich\af2\dbch\af15\loch\f15 nbusy}{\loch\af15\hich\af2\dbch\f15 \'d0\'c5\'ba\'c5\'c9\'cf\'c9\'fd\'d1\'d8\'d6\'ae\'bc\'e4\'ca\'b1\'bc\'e4\'d1\'d3\'b3\'d9\'d0\'a1\'d3\'da}{\hich\af2\dbch\af15\loch\f15 t12}{\loch\af15\hich\af2\dbch\f15 \'ca\'b1\'a3\'ac}{

\par }{\loch\af15\hich\af2\dbch\f15 \'bd\'ab\'bb\'e1\'b3\'f6\'cf\'d6\'be\'af\'b8\'e6\'d0\'c5\'cf\'a2\'a3\'ac\'cd\'a8\'d6\'aa\'c9\'e8\'bc\'c6\'d5\'df\'c7\'eb\'c7\'f3\'d7\'aa\'bb\'bb\'b5\'c4\'ca\'e4\'c8\'eb\'d0\'c5\'ba\'c5\'c6\'b5\'c2\'ca\'cc\'ab\'bf\'ec\'a3\'ac
}{\hich\af2\dbch\af15\loch\f15 A/D}{\loch\af15\hich\af2\dbch\f15 \'c6\'f7\'bc\'fe\'d7\'aa\'bb\'bb\'cb\'d9\'b6\'c8\'b8\'fa\'b2\'bb\'c9\'cf\'a1\'a3}{
\par }{\loch\af15\hich\af2\dbch\f15 \'b7\'c2\'d5\'e6\'c4\'a3\'d0\'cd\'b2\'bb\'bd\'f6\'c4\'dc\'b9\'bb\'ca\'b5\'cf\'d6\'d3\'b2\'bc\'fe\'b5\'e7\'c2\'b7\'b5\'c4\'ca\'e4\'b3\'f6\'b9\'a6\'c4\'dc\'a3\'ac\'cd\'ac\'ca\'b1\'c4\'dc\'b9\'bb\'b6\'d4\'ca\'e4\'c8\'eb\'d0\'c5
\'ba\'c5\'bd\'f8\'d0\'d0\'bc\'ec\'b2\'e2\'a3\'ac}{
\par }{\loch\af15\hich\af2\dbch\f15 \'b5\'b1\'ca\'e4\'c8\'eb\'d0\'c5\'ba\'c5\'b2\'bb\'b7\'fb\'ba\'cf\'ca\'d6\'b2\'e1\'d2\'aa\'c7\'f3\'ca\'b1\'a3\'ac\'cf\'d4\'ca\'be\'be\'af\'b8\'e6\'d0\'c5\'cf\'a2\'a1\'a3}{
\par \hich\af2\dbch\af15\loch\f15 -\hich\af2\dbch\af15\loch\f15 ------------------------------------------------------------------------*/
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 // }{\loch\af15\hich\af2\dbch\f15 \'bc\'ec\'b2\'e9}{\hich\af2\dbch\af15\loch\f15 A/D}{\loch\af15\hich\af2\dbch\f15 \'c6\'f4\'b6\'af\'d0\'c5\'ba\'c5\'b5\'c4\'c6\'b5\'c2\'ca
\'ca\'c7\'b7\'f1\'cc\'ab\'bf\'ec}{
\par \hich\af2\dbch\af15\loch\f15      always @(posedge nbusy)
\par \hich\af2\dbch\af15\loch\f15        begin
\par \hich\af2\dbch\af15\loch\f15           #t12;
\par \hich\af2\dbch\af15\loch\f15           if (!nconvst) 
\par \hich\af2\dbch\af15\loch\f15              begin 
\par \hich\af2\dbch\af15\loch\f15                $display("Warning!  SHA Acquisitio\hich\af2\dbch\af15\loch\f15 n Time is too short!");
\par \hich\af2\dbch\af15\loch\f15              end
\par \hich\af2\dbch\af15\loch\f15         //  else  $display(" SHA Acquisition Time is enough! ");
\par \hich\af2\dbch\af15\loch\f15        end
\par \hich\af2\dbch\af15\loch\f15 // }{\loch\af15\hich\af2\dbch\f15 \'bc\'ec\'b2\'e9}{\hich\af2\dbch\af15\loch\f15 A/D}{\loch\af15\hich\af2\dbch\f15 \'c6\'f4\'b6\'af\'d0\'c5\'ba\'c5\'b5\'c4\'b8\'ba\'c2\'f6\'b3\'e5\'bf\'ed\'b6\'c8\'ca\'c7\'b7\'f1\'d7\'e3
\'b9\'bb\'ba\'cd\'cc\'ab\'bf\'ed}{
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15    always @(negedge nconvst)
\par \hich\af2\dbch\af15\loch\f15      begin
\par \hich\af2\dbch\af15\loch\f15           wideth=$time;
\par \hich\af2\dbch\af15\loch\f15           @(posedge nconvst)  wideth=$t\hich\af2\dbch\af15\loch\f15 ime-wideth;
\par \hich\af2\dbch\af15\loch\f15           if (wideth<=500 || wideth > 10000)
\par \hich\af2\dbch\af15\loch\f15             begin
\par \hich\af2\dbch\af15\loch\f15              
\par \hich\af2\dbch\af15\loch\f15              $display("nCONVST Pulse Width = %d",wideth);
\par \hich\af2\dbch\af15\loch\f15              $display("Warning! nCONVST Pulse Width is too narrow or too wide!");
\par \hich\af2\dbch\af15\loch\f15              //$stop;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15     end
\par 
\par \hich\af2\dbch\af15\loch\f15 endmodule
\par }\pard\plain \qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af0\hich\af0\dbch\f15\cgrid {\loch\af15 
\par 
\par \hich\af0\dbch\af15\loch\f15 //+++++++++++++++++++\hich\af0\dbch\af15\loch\f15 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
\par \hich\af0\dbch\af15\loch\f15  
\par }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b6\'d4\'c9\'cc\'d2\'b5\'bb\'af\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'d3\'d0\'d7\'c5\'d1\'cf\'b8\'f1\'b5\'c4\'d2\'aa\'c7\'f3\'a3\'ac\'b2\'bb\'b5\'ab\'d2\'aa\'c7\'f3\'d4\'da\'cf\'b5\'cd\'b3\'c9\'e8\'bc\'c6
\'b5\'c4\'b7\'c2\'d5\'e6\'d6\'d0\'c4\'dc\'cd\'ea\'c8\'ab\'c0\'b4\'b4\'fa\'cc\'e6\'d5\'e6\'ca\'b5\'b5\'c4\'c6\'f7\'bc\'fe\'a3\'ac\'b6\'f8\'c7\'d2\'bb\'b9\'cf\'a3\'cd\'fb\'c4\'dc\'cc\'e1\'ca\'be\'b2\'fa\'c9\'fa\'b4\'ed\'ce\'f3\'b5\'c4\'d4\'ad\'d2\'f2
\'a1\'a3}{\b\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'b5\'c4\'be\'ab\'c8\'b7\'d3\'eb\'b7\'f1\'a3\'ac\'d6\'b1\'bd\'d3\'be\'f6\'b6\'a8\'c9\'e8\'bc\'c6\'b5\'c4\'b3\'c9\'b0\'dc\'a1\'a3}{\loch\af15 \hich\af0\dbch\af15\loch\f15 
 ASIC}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b5\'c4\'cd\'b6\'c6\'ac\'b3\'c9\'b1\'be\'ba\'dc\'b8\'df\'a3\'ac\'b1\'e0\'d0\'b4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'ca\'b1\'c8\'ce\'ba\'ce\'d0\'a1\'b5\'c4\'ca\'e8\'ba\'f6\'b6\'bc\'d3\'d0\'bf\'c9\'c4\'dc\'d4\'ec
\'b3\'c9\'cd\'b6\'c6\'ac\'b5\'c4\'ca\'a7\'b0\'dc\'a3\'ac\'d4\'ec\'b3\'c9\'b4\'f3\'c1\'bf\'d7\'ca\'bd\'f0\'b5\'c4\'c0\'cb\'b7\'d1\'a1\'a3}{\b\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d2\'f2\'b4\'cb\'b1\'e0\'d0\'b4\'d5\'e2\'d1\'f9\'b5\'c4\'c4\'a3\'bf\'e9
\'ca\'c7\'d2\'bb\'bc\'fe\'b8\'b4\'d4\'d3\'b6\'f8\'cf\'b8\'d6\'c2\'b5\'c4\'b9\'a4\'d7\'f7\'a3\'ac\'d0\'e8\'d2\'aa\'bc\'ab\'c6\'e4\'c8\'cf\'d5\'e6\'b5\'c4\'b9\'a4\'d7\'f7\'cc\'ac\'b6\'c8\'ba\'cd\'d7\'f7\'b7\'e7\'a3\'ac}{\loch\af15 
\loch\af15\hich\af0\dbch\f15 \'b1\'d8\'d0\'eb\'c8\'cf\'d5\'e6\'b6\'d4\'b4\'fd\'a1\'a3\'ce\'aa\'c1\'cb\'bc\'f2\'b5\'a5\'c6\'f0\'bc\'fb\'a3\'ac\'b1\'be\'bd\'da\'bd\'e9\'c9\'dc\'b5\'c4\'c4\'a3\'bf\'e9\'d6\'bb\'be\'df\'d3\'d0}{\loch\af15 
\hich\af0\dbch\af15\loch\f15 AD7886}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6\'b9\'a6\loch\af15\hich\af0\dbch\f15 \'c4\'dc\'a3\'ac\'cb\'f9\'d2\'d4\'bb\'b9\'b2\'bb\'c4\'dc\'b3\'c6\'ce\'aa}{\loch\af15 
\hich\af0\dbch\af15\loch\f15 AD7886}{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'cd\'ea\'d5\'fb\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'a1\'a3}{\loch\af15 
\par 
\par }{\loch\af15 \loch\af15\hich\af0\dbch\f15 \'cd\'a8\'b9\'fd\'c9\'cf\'ca\'f6\'bc\'f2\'b5\'a5\'b5\'c4\'c0\'fd\'d7\'d3\'ce\'d2\'c3\'c7\'c4\'dc\'c1\'cb\'bd\'e2\'d2\'bb\'b8\'f6\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'ca\'c7\'c8\'e7\'ba\'ce\'c9\'e8\'bc\'c6\'b5\'c4
\'a3\'ac\'b6\'d4\'b4\'f3\'b6\'e0\'ca\'fd\'b5\'c4\'b5\'e7\'c2\'b7\'cf\'b5\'cd\'b3\'b9\'a4\'b3\'cc\'ca\'a6\'c0\'b4\'cb\'b5\'a3\'ac\'ce\'d2\'c3\'c7\'be\'a1\'c1\'bf\'c0\'fb\'d3\'c3\'c9\'cc\'d2\'b5\'bb\'af\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'c0\'b4
\'c9\'e8\'bc\'c6\'d7\'d4\'bc\'ba\'b5\'c4\'b5\'e7\'c2\'b7\'cf\'b5\'cd\'b3\'a1\'a3}{\b\loch\af15 \loch\af15\hich\af0\dbch\f15 \'d6\'bb\'d3\'d0\'d4\'da\'c3\'bb\'d3\'d0\'b0\'ec\'b7\'a8\'b5\'c3\'b5\'bd\'c9\'cc\'d2\'b5\'bb\'af\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3
\'bf\'e9\'ca\'b1\'a3\'ac\'b2\'c5\'c0\'fb\'d3\'c3\'c6\'f7\'bc\'fe\'ca\'d6\'b2\'e1\'c0\'b4\'b1\'e0\'d0\'b4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'a3\'ac\'d2\'f2\'ce\'aa\'b1\'e0\'d0\'b4\'be\'ab\'c8\'b7\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'d0\'e8\'d2\'aa
\'bb\'a8\'b7\'d1\'ba\'dc\'b6\'e0\'ca\'b1\'bc\'e4\'ba\'cd\'be\'ab\'c1\'a6\'a1\'a3}{\b\loch\af15 
\par }{
\par }{\b \hich\af1\dbch\af15\loch\f15 9.3 }{\b \loch\af15\hich\af1\dbch\f15 \'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'bf\'e9\'b5\'c4\'ca\'b5\'c0\'fd}{\b 
\par 
\par }{\loch\af15\hich\af1\dbch\f15 \'cf\'c2\'c3\'e6\'ce\'d2\'c3\'c7\'bd\'e9\'c9\'dc\'c1\'bd\'b8\'f6\'b3\'a3\'d3\'c3\'b5\'c4\'b4\'f3\'b9\'e6\'c4\'a3\'bc\'af\'b3\'c9\'d0\'be\'c6\'ac\'a3\'ba\'cd\'a8\'d3\'c3\'b4\'ae\'d0\'d0\'ca\'d5\'b7\'a2\'bf\'d8\'d6\'c6\'c6\'f7
}{\hich\af1\dbch\af15\loch\f15 USART8251}{\loch\af15\hich\af1\dbch\f15 \'ba\'cd}{\hich\af1\dbch\af15\loch\f15 Intel8085 }{\loch\af15\hich\af1\dbch\f15 \'ce\'a2\'b4\'a6\'c0\'ed\'c6\'f7}{\hich\af1\dbch\af15\loch\f15 CPU}{\loch\af15\hich\af1\dbch\f15 
\'b5\'c4\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'bf\'e9\'a1\'a3\'d5\'e2\'c1\'bd\'b8\'f6\'d3\'c3}{\hich\af1\dbch\af15\loch\f15 Verilog HDL}{\loch\af15\hich\af1\dbch\f15 \'c3\'e8\'ca\'f6\'b5\'c4\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'b5\'c4\'d0\'d0\'ce\'aa
\'c4\'a3\'bf\'e9\loch\af15\hich\af1\dbch\f15 \'ca\'c7\'d3\'c9}{\hich\af1\dbch\af15\loch\f15 Verilog }{\loch\af15\hich\af1\dbch\f15 \'d3\'ef\'d1\'d4\'b5\'c4\'b4\'b4\'ca\'bc\'c8\'cb}{\hich\af1\dbch\af15\loch\f15 P.R.Moorby }{\loch\af15\hich\af1\dbch\f15 
\'ba\'cd}{\hich\af1\dbch\af15\loch\f15 D.E. Thomas}{\loch\af15\hich\af1\dbch\f15 \'ba\'cf\'d7\'f7\'b1\'e0\'d0\'b4\'b5\'c4}{\hich\af1\dbch\af15\loch\f15 (}{\i\fs15 \loch\af15\hich\af1\dbch\f15 \'d5\'e2\'ca\'c7\'ce\'d2\'c3\'c7\'b4\'d3}{\i\fs15 
\hich\af1\dbch\af15\loch\f15 Internet}{\i\fs15 \loch\af15\hich\af1\dbch\f15 \'cd\'f8\'c2\'e7\'c9\'cf\'cf\'c2\'d4\'d8\'b5\'c3\'b5\'bd\'b5\'c4}{\i\fs18 \hich\af1\dbch\af15\loch\f15 )}{\i\fs18 \loch\af15\hich\af1\dbch\f15 \'a1\'a3}{\ul 
\par }{
\par }{\loch\af15\hich\af1\dbch\f15 \'d2\'f2\'ce\'aa\'c9\'cc\'c6\'b7\'bb\'af\'b5\'c4\'d0\'e9\'c4\'e2\'c6\'f7\'bc\'fe\'ba\'cd\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'ca\'c7\'d6\'aa\'ca\'b6\'b2\'fa\'c8\'a8\'a3\'a8\'bc\'f2\'b3\'c6}{
\hich\af1\dbch\af15\loch\f15 IP}{\loch\af15\hich\af1\dbch\f15 \'a3\'a9\'a3\'ac\'b1\'d8\'d0\'eb\'b1\'a3\'d6\'a4\'c9\'e8\'bc\'c6\'cb\'f9\'d0\'e8\'b5\'c4\'b2\'ce\'ca\'fd\'be\'f8\'b6\'d4\'d5\'fd\'c8\'b7\'a3\'ac\'d2\'f2\'b4\'cb\'bc\'db\'b8\'f1\'b7\'c7\'b3\'a3
\'b0\'ba\'b9\'f3\'a3\'ac\'b2\'bb\'bf\'c9\'c4\'dc\'c3\'e2\'b7\'d1\'b5\'c3\'b5\'bd\'a1\'a3}{\b\ul \loch\af15\hich\af1\dbch\f15 \'cf\'c2\'c3\'e6\'b5\'c4\'c4\'a3\'bf\'e9\'b4\'d3\'d1\'cf\'b8\'f1\'d2\'e2\'d2\'e5\'c9\'cf\'cb\'b5\'c0\'b4\'b2\'a2\'b7\'c7\'ca\'c7
\'d5\'e6\'d5\'fd\'b5\'c4\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fc\'c3\'c7\'b2\'a2\'b2\'bb\'b6\'d4\'d3\'c3\'bb\'a7\'c9\'e8\'bc\'c6\'b5\'c4\'b3\'c9\'b0\'dc\'b8\'ba\'d4\'f0\'a1\'a3}{\loch\af15\hich\af1\dbch\f15 \'b0\'d1
\'cb\'fc\'c3\'c7\'c1\'d0\'d4\'da\'d5\'e2\'c0\'ef\'d6\'bb\'ca\'c7\'c4\'c3\'cb\'fc\'c3\'c7\'d7\'f7\'ce\'aa\'d1\'a7\'cf\'b0\'b1\'e0\'d0\'b4\'bd\'cf\'b8\'b4\'d4\'d3\'b5\'c4}{\hich\af1\dbch\af15\loch\f15 Verilog HDL}{\loch\af15\hich\af1\dbch\f15 \'d0\'d0
\'ce\'aa\'c4\'a3\'bf\'e9\'b5\'c4\'d1\'f9\'b1\'be\'b6\'f8\'d2\'d1\'a1\'a3}{
\par 
\par }{\b \hich\af1\dbch\af15\loch\f15 [}{\b \loch\af15\hich\af1\dbch\f15 \'c0\'fd}{\b \hich\af1\dbch\af15\loch\f15 1].}{\b \loch\af15\hich\af1\dbch\f15 \'a1\'b0\'c9\'cc\'d2\'b5\'bb\'af\'a1\'b1\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'d6\'ae\'d2\'bb\'a3\'ba}{
\b \hich\af1\dbch\af15\loch\f15 Intel USART 8251A (}{\b \loch\af15\hich\af1\dbch\f15 \'cd\'a8\'d3\'c3\'b4\'ae\'d0\'d0\'d2\'ec\'b2\'bd\'ca\'d5\'b7\'a2\'c6\'f7\'d0\'be\'c6\'ac}{\b \hich\af1\dbch\af15\loch\f15 ) }{\b 
\par }{
\par }{\loch\af15\hich\af1\dbch\f15 \'d4\'da}{\hich\af1\dbch\af15\loch\f15 8251A}{\loch\af15\hich\af1\dbch\f15 \'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'bf\'e9\'b3\'cc\'d0\'f2\'b5\'c4\'d4\'ad\'ca\'bc\'b2\'c4\'c1\'cf\'c9\'cf\'d3\'d0\'cf\'c2\'c3\'e6\'d5\'e2
\'d1\'f9\'d2\'bb\'b6\'ce\'bb\'b0\'a3\'ba}{
\par }\pard \qj\fi840\nowidctlpar\aspalpha\aspnum\faroman {
\par }\pard \qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af1\dbch\af15\loch\f15 /****************************************************************************
\par \hich\af1\dbch\af15\loch\f15 CADENCE DESIGN SYSTEMS, Inc. does not guarantee the accuracy or completeness of }{
\par }{\hich\af1\dbch\af15\loch\f15 this model. Anyone who using thi\hich\af1\dbch\af15\loch\f15 s does so at their own risk.
\par \hich\af1\dbch\af15\loch\f15 *****************************************************************************/
\par }{\loch\af15\hich\af1\dbch\f15 \'cf\'d4\'c8\'bb\'d5\'e2\'d2\'bb\'c4\'a3\'bf\'e9\'d6\'bb\'ca\'c7\'d2\'bb\'b8\'f6\'bd\'f6\'b9\'a9\'b2\'ce\'bf\'bc\'b5\'c4\'ca\'b5\'c0\'fd\'a3\'ac\'d4\'da\'b1\'be\'bd\'cc\'b2\'c4\'c9\'cf\'ce\'d2\'c3\'c7\'b9\'c3\'c7\'d2\'b0\'d1
\'cb\'fc\'b5\'b1\'d7\'f7\'d0\'e9\'c4\'e2\'bd\'d3\'bf\'da\'c4\'a3\'d0\'cd\'c0\'b4\'bf\'b4\'b4\'fd\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fc\'b5\'c4}{\hich\af1\dbch\af15\loch\f15 Verilog HDL}{\loch\af15\hich\af1\dbch\f15 \'b3\'cc\'d0\'f2\'ca\'c7\'d1\'cf\'b8\'f1
\'b5\'d8\'b0\'b4\'d5\'d5}{\hich\af1\dbch\af15\loch\f15 8251A}{\loch\af15\hich\af1\dbch\f15 \'b5\'c4\'cb\'b5\'c3\'f7\'ca\'e9\'b6\'f8\'b1\'e0\'d0\'b4\'b5\'c4\'a1\'a3\'b6\'c1\'d5\'df\'bf\'c9\'d2\'d4\'b6\'d4\'d5\'d5}{\hich\af1\dbch\af15\loch\f15 8251A}{
\loch\af15\hich\af1\dbch\f15 \'b5\'c4\'cb\'b5\'c3\'f7\'ca\'e9\'d7\'d0\'cf\'b8\'d4\'c4\'b6\'c1\'d5\'e2\'d2\'bb\'b3\'cc\'d0\'f2\'a3\'ac\'cf\'c2\'c3\'e6\'be\'cd\'ca\'c7}{\hich\af1\dbch\af15\loch\f15 USART8251A}{\loch\af15\hich\af1\dbch\f15 \'d0\'e9\'c4\'e2
\'c4\'a3\'bf\'e9\'b5\'c4}{\hich\af1\dbch\af15\loch\f15 Verilog HDL}{\loch\af15\hich\af1\dbch\f15 \'b3\'cc\'d0\'f2\'a3\'ac\'b9\'a9\'b6\'c1\'d5\'df\'b2\'ce\'bf\'bc\'a3\'ba}{
\par 
\par }{\loch\af15 \hich\af0\dbch\af15\loch\f15 /****\hich\af0\dbch\af15\loch\f15 *************************************************************************
\par }\pard \qc\nowidctlpar\aspalpha\aspnum\faroman\outlinelevel0 {\b \loch\af15\hich\af1\dbch\f15 \'cd\'a8\'d3\'c3\'b4\'ae\'d0\'d0\'d2\'ec\'b2\'bd\'ca\'d5\'b7\'a2\'c6\'f7}{\b \hich\af0\dbch\af15\loch\f0 8251}{\b \loch\af0\hich\af0\dbch\f15 \'b5\'c4}{\b 
\hich\af0\dbch\af15\loch\f0 Verilog HDL}{\b \loch\af0\hich\af0\dbch\f15 \'d4\'b4\'b4\'fa\'c2\'eb}{\b 
\par }\pard \qc\nowidctlpar\aspalpha\aspnum\faroman {\fs18\dbch\f38 \loch\af0\hich\af0\dbch\f38 \'d7\'a2\'d2\'e2\'a3\'ba\'d7\'f7\'d5\'df\'b2\'bb\'c4\'dc\'b1\'a3\'d6\'a4\'b1\'be\'c4\'a3\'bf\'e9\'b5\'c4\'cd\'ea\'d5\'fb\'ba\'cd\'be\'ab\'c8\'b7\'a3\'ac\'ca\'b9
\'d3\'c3\'b1\'be\'c4\'a3\'bf\'e9\'d5\'df\'c8\'e7\'d3\'f6\'ce\'ca\'cc\'e2\'d2\'bb\'c7\'d0\'d4\'f0\'c8\'ce\'d7\'d4\'b8\'ba}{\fs18\dbch\f38 
\par }\pard \qj\nowidctlpar\aspalpha\aspnum\faroman {\loch\af15\dbch\f38 \hich\af0\dbch\af38\loch\f15 ******************************************************************************/}{\loch\af15\hich\af1\dbch\f38 
\par }\pard\plain \s31\qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af15\hich\af2\dbch\f15\cgrid {
\par \hich\af2\dbch\af15\loch\f15 module I8251A ( dbus, rcd, gnd, txc_\hich\af2\dbch\af15\loch\f15 , write_, chipsel_, comdat_,  
\par }\pard \s31\qj\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15        read_, rxrdy, txrdy, syndet, cts_, txe, txd,  
\par \hich\af2\dbch\af15\loch\f15                   clk, reset, dsr_,rts_,dtr_,rxc_,vcc); 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15   
\par \hich\af2\dbch\af15\loch\f15 /* timing constants ,for A. C. timing check, only non-zero times are  
\par \hich\af2\dbch\af15\loch\f15 specified,in nano-sec  */ 
\par \hich\af2\dbch\af15\loch\f15 /*  read\hich\af2\dbch\af15\loch\f15  cycle */ 
\par \hich\af2\dbch\af15\loch\f15 `define TRR 250 
\par \hich\af2\dbch\af15\loch\f15 `define TRD 200 
\par \hich\af2\dbch\af15\loch\f15 `define TDF 100 // max. time used 
\par \hich\af2\dbch\af15\loch\f15 /* write cycle  */ 
\par \hich\af2\dbch\af15\loch\f15 `define TWW 250 
\par \hich\af2\dbch\af15\loch\f15 `define TDW 150 
\par \hich\af2\dbch\af15\loch\f15 `define TWD 20 
\par \hich\af2\dbch\af15\loch\f15 `define TRV 6  // in terms of clock cycles 
\par \hich\af2\dbch\af15\loch\f15 /* other timing */ 
\par \hich\af2\dbch\af15\loch\f15 `define TTXRDY 8 //  8 clock cycle 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 inpu\hich\af2\dbch\af15\loch\f15 t\tab rcd,  //receive data 
\par \hich\af2\dbch\af15\loch\f15         rxc_,  //receive clock  
\par \hich\af2\dbch\af15\loch\f15         txc_,  //transmit clock 
\par \hich\af2\dbch\af15\loch\f15         chipsel_, //chip selected when low 
\par \hich\af2\dbch\af15\loch\f15         comdat_,  //command /data_ select 
\par \hich\af2\dbch\af15\loch\f15         read_,write_, 
\par \hich\af2\dbch\af15\loch\f15         dsr_,  // data set ready 
\par \hich\af2\dbch\af15\loch\f15         cts_,  // clea\hich\af2\dbch\af15\loch\f15 r to send 
\par \hich\af2\dbch\af15\loch\f15        reset, // reset when high 
\par \hich\af2\dbch\af15\loch\f15        clk,   // at least 30 times of the transmit/rexeibe data bit rates 
\par \hich\af2\dbch\af15\loch\f15        gnd, 
\par \hich\af2\dbch\af15\loch\f15        vcc; 
\par \hich\af2\dbch\af15\loch\f15 output\tab rxrdy, //receive data ready when high 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 txd,  //transmit data lone  
\par \hich\af2\dbch\af15\loch\f15 txrdy, //transmit buffer ready to a\hich\af2\dbch\af15\loch\f15 ccept another byte to transfer 
\par \hich\af2\dbch\af15\loch\f15 txe,  // transmit buffer empty  
\par \hich\af2\dbch\af15\loch\f15 rts_,  // request to send 
\par \hich\af2\dbch\af15\loch\f15 dtr_; // data terminal ready 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 inout[7:0]\tab dbus; 
\par \hich\af2\dbch\af15\loch\f15 inout\tab syndet; //outside synchonous detect or output to indicate syn det  
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 supply0\tab \tab gnd; 
\par \hich\af2\dbch\af15\loch\f15 supply1\tab \tab vcc; 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg \tab \tab \tab \hich\af2\dbch\af15\loch\f15 txd, rxrdy, txe, dtr_, rts_; 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg [7:0]\tab \tab receivebuf, rdata, status; 
\par 
\par \hich\af2\dbch\af15\loch\f15 //*****ADD BY FWN 
\par \hich\af2\dbch\af15\loch\f15 reg [3:0] dflags; 
\par \hich\af2\dbch\af15\loch\f15 reg [7:0] instance_id; 
\par \hich\af2\dbch\af15\loch\f15 reg read,chipel_; 
\par \hich\af2\dbch\af15\loch\f15 //*****
\par \hich\af2\dbch\af15\loch\f15   
\par \hich\af2\dbch\af15\loch\f15 reg\tab \tab recvdrv,\tab statusdrv; 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 // if recvdrv 1 dbus is driven by rdata 
\par \hich\af2\dbch\af15\loch\f15 assign\tab dbus = recvdrv \hich\af2\dbch\af15\loch\f15 ? rdata : 8'bz; //*****:,->; 
\par \hich\af2\dbch\af15\loch\f15 assign   dbus = statusdrv ? status : 8'bz ; //*****:->; assign abscent 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg [7:0]\tab command, 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 tdata_out,  // data being transmitted serially 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold,  // data to be transmitted next if tdata_out is full 
\par \hich\af2\dbch\af15\loch\f15 sync1,sync2, // synchronous data bytes 
\par \hich\af2\dbch\af15\loch\f15 modreg; 
\par 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 and (txrdy, status[0], command[0], ~cts_); 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg  transmitter_reset,      // set to 1 upon a reset ,cleared upon write data  
\par \hich\af2\dbch\af15\loch\f15        tdata_out_full,       // 1 if data in tdata_out has not been transmitted\hich\af2\dbch\af15\loch\f15 . 
\par \hich\af2\dbch\af15\loch\f15       tdata_hold_full,       // 1 if data in tdata_hold has not been transferred 
\par \hich\af2\dbch\af15\loch\f15                              // to tdata_out for serial transmission.  
\par }\pard\plain \qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af0\hich\af0\dbch\f15\cgrid {\hich\af0\dbch\af15\loch\f0       tdata_hold_cts;           }{\loch\af15 \hich\af0\dbch\af15\loch\f15 // 1 if tdata_hold_full and it was cts when data 

\par \hich\af0\dbch\af15\loch\f15                  \hich\af0\dbch\af15\loch\f15             //   was transferred to tdata_hold.  
\par }\pard\plain \s31\qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af15\hich\af2\dbch\f15\cgrid {\hich\af2\dbch\af15\loch\f15                              //   0 if tdata_hold is empty or is full but was 
\par \hich\af2\dbch\af15\loch\f15                              //   filled  while it was not cts. 
\par \hich\af2\dbch\af15\loch\f15 reg  tdata_out_wait;          // 0 if a stop bit was just sent\hich\af2\dbch\af15\loch\f15  and we do not need 
\par \hich\af2\dbch\af15\loch\f15                              // to wait for a negedge on txc before transmitting 
\par \hich\af2\dbch\af15\loch\f15 reg [7:0] syncmask; 
\par 
\par \hich\af2\dbch\af15\loch\f15 nmos  syndet_gate1(syndet,status[6], ~modreg[6]); 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg sync_to_receive;     // 1(2) if looking for 1st(2nd) sync on rxd 
\par \hich\af2\dbch\af15\loch\f15 reg sync\hich\af2\dbch\af15\loch\f15 s_received;      // 1 if sync chars received, 0 if lookinf for sync
\par \hich\af2\dbch\af15\loch\f15 reg rec_sync_index;      //  indicating the syn. character to be matched 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 integer breakcount_period;  // number of clock periods to count as break 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg sync_to_transmit;       //1(2) i\hich\af2\dbch\af15\loch\f15 f 1st(2nd) sync char should be sent next 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg [7:0] data_mask;        //masks off the data bits (if char size is not 8) 
\par \hich\af2\dbch\af15\loch\f15                           // temporary registers 
\par \hich\af2\dbch\af15\loch\f15 reg [1:0] csel;  //indicates what next write means if comdat_=1: 
\par \hich\af2\dbch\af15\loch\f15          \hich\af2\dbch\af15\loch\f15        //(0=mode instruction ,1=sync1,2=sync2,3=command) 
\par \hich\af2\dbch\af15\loch\f15 reg [5:0]  \tab baudmx,  
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 tbaudcnt,  
\par \hich\af2\dbch\af15\loch\f15 rbaudcnt;   //  baud rate 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 reg[7:0]  tstoptotal;   // no. of tranmit clock pulses for stop bit (0 if sync mode 
\par \hich\af2\dbch\af15\loch\f15 reg[3:0]  databits;    // no. of data bits in a char\hich\af2\dbch\af15\loch\f15 acter (5,6,7 or 8) 
\par \hich\af2\dbch\af15\loch\f15 reg  rdatain;         // a data byte is read in if 1 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg was_cts_when_received;  // 0:if cts_ was high when char was received 
\par \hich\af2\dbch\af15\loch\f15                             // 1:if cts_ was low wheb char was received 
\par \hich\af2\dbch\af15\loch\f15                             //   \hich\af2\dbch\af15\loch\f15  (and so char was sent before shutdown) 
\par \hich\af2\dbch\af15\loch\f15 event\tab  resete, start_receiver_e,hunt_sysnc1_e; 
\par \hich\af2\dbch\af15\loch\f15 reg\tab  receive_in_progress; 
\par \hich\af2\dbch\af15\loch\f15 event \tab txende; 
\par \hich\af2\dbch\af15\loch\f15 /***   COMMUNICATION ERRORS    ***/ 
\par 
\par \hich\af2\dbch\af15\loch\f15 task frame_error; 
\par \hich\af2\dbch\af15\loch\f15 begin  
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(dflags[4]) 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A (%h)at %d: *** frame error \hich\af2\dbch\af15\loch\f15 ",instance_id,$time); 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 status[5]=1; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 task parity_error;
\par \hich\af2\dbch\af15\loch\f15 begin 
\par \hich\af2\dbch\af15\loch\f15 if(dflags[4]) 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A (%h)  at %d : ***parity error data: %b", 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  \tab \tab \tab \tab \tab instance_id, $time, receivebuf); 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 status[3]=1; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 task overrun_error; 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par \hich\af2\dbch\af15\loch\f15 if(dflags[4]) 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d: *** oerrun error",instance_id,$time); 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 status[4]=1; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15      /***       TIMING VIOLATIONS        ***/ 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 integer\tab time_dbus_setup, 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 time_write_begin, 
\par \hich\af2\dbch\af15\loch\f15 time_write_end, 
\par \hich\af2\dbch\af15\loch\f15 time_read_begin, 
\par \hich\af2\dbch\af15\loch\f15 time_read_end,\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 between_write_clks; //  to check between write recovery 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 reg \tab \tab reset_signal_in;  //to check the reset signal pulse width 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 initial 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par \hich\af2\dbch\af15\loch\f15 time_dbus_setup \tab = -9999; 
\par \hich\af2\dbch\af15\loch\f15 time_write_begin\tab = -9999; 
\par \hich\af2\dbch\af15\loch\f15 time_write_end\tab \tab = -9999; 
\par \hich\af2\dbch\af15\loch\f15 time_read_begin\tab \tab = -9999; 
\par \hich\af2\dbch\af15\loch\f15 time_read_end\tab \tab = -9999; 
\par \hich\af2\dbch\af15\loch\f15 between_write_clks\tab = `TRV; \tab \tab //start:TRV clk periods since last write 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /***  Timing analysis for read cycles  ***/ 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @( negedge read_) 
\par \hich\af2\dbch\af15\loch\f15 if (chipsel_==0) 
\par \hich\af2\dbch\af15\loch\f15 begin  
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 time_read_begin = $time; 
\par \hich\af2\dbch\af15\loch\f15 read_address_watch; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /* Timing violation :read pulse must be TRR ns */ 
\par \hich\af2\dbch\af15\loch\f15 always @(posedge read_) 
\par \hich\af2\dbch\af15\loch\f15 if  (chipsel_==0) 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 disable read_address_watch; 
\par \hich\af2\dbch\af15\loch\f15 time_read_end = $time; 
\par \hich\af2\dbch\af15\loch\f15 if(dflags[3] && (($time-time_read_begin) < `TRR)) 
\par \hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d:  *** read pulse wid\hich\af2\dbch\af15\loch\f15 th violation",  
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15       instance_id, $time); 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /* Timing violation :address (comdat_  and chipsel_) must be stable */ 
\par \hich\af2\dbch\af15\loch\f15 /*                          stable throughout read                  */ 
\par \hich\af2\dbch\af15\loch\f15 task read_address_watch; 
\par \hich\af2\dbch\af15\loch\f15      @(comdat_  or  \hich\af2\dbch\af15\loch\f15 chipsel_)   //if the  "address"  changes 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (read ==0)        //  and read_ did not change at the same time 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if  (dflags[3]) 
\par \hich\af2\dbch\af15\loch\f15 $display("I8251A  (%h)  at  %d : ***  address hold error on ready",  
\par }\pard \s31\qj\fi425\li3400\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 instance_id, $time);  
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /**  Timing analysis for \hich\af2\dbch\af15\loch\f15 write cycles  **/ 
\par \hich\af2\dbch\af15\loch\f15 always @(negedge write_) 
\par \hich\af2\dbch\af15\loch\f15 if  (chipsel_==0) 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 time_write_begin = $time; 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 write_address_watch; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /*  Timing violation : read pulse must be TRR ns */ 
\par \hich\af2\dbch\af15\loch\f15 /*  Timing violation : TDW ns bus setup time before posedge write_  */ 
\par \hich\af2\dbch\af15\loch\f15 /*  \hich\af2\dbch\af15\loch\f15 Timing violation : TWD ns bus hold time after posedge write_  */ 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @(posedge write_) 
\par \hich\af2\dbch\af15\loch\f15 if (chipsel_==0) 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 disable write_address_watch; 
\par \hich\af2\dbch\af15\loch\f15 time_write_end=$time; 
\par \hich\af2\dbch\af15\loch\f15 if(dflags[3]  &&  (($time-time_write_begin)  < `TWW)) 
\par \hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d:  *** write pulse 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 width violation",instance_id,$time);   
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @dbus 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 time_dbus_setup\tab = $time; 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(dflags[3] && (($time-time_write_end <  `TWD))) 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d: *** datahold violation on write",
\par \hich\af2\dbch\af15\loch\f15  \hich\af2\dbch\af15\loch\f15                                      instance_id ,$time); 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /*   Timing violation: address (comdat_ and chipsel_ ) must be stable*/ 
\par \hich\af2\dbch\af15\loch\f15 /*                       stable throughout write                   */ 
\par \hich\af2\dbch\af15\loch\f15 task write_address_watch; 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 @(comdat_  or  chip\hich\af2\dbch\af15\loch\f15 sel_ )  //if the "address" changes 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if  (write_==0)     //  and write_ did not  change at the same time 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (dflags[3]) 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d: *** address hold error on write",
\par \hich\af2\dbch\af15\loch\f15                                         instance_id , $time); 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /*  Timing violation: minimum of TRV clk cycles between writes */ 
\par \hich\af2\dbch\af15\loch\f15 always @( negedge write_ )  
\par \hich\af2\dbch\af15\loch\f15 if ( chipel_==0 ) 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 time_write_begin=$time; 
\par \hich\af2\dbch\af15\loch\f15 if(dflags[3] && between_write_clks < `TRV) 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A\hich\af2\dbch\af15\loch\f15  (%h) at %d: ***between write recovery violation",
\par \hich\af2\dbch\af15\loch\f15                                                 instance_id,$time); 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always  @(negedge write_) 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 repeat (`TRV) @(posedge clk) 
\par \hich\af2\dbch\af15\loch\f15 between_write_clks = between_write_clks +1 ; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /**Timing analysis for r\hich\af2\dbch\af15\loch\f15 eset sequence  **/ 
\par \hich\af2\dbch\af15\loch\f15 /*      Timing violation : reset pulse must be 6 clk cycles  */ 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @(posedge reset ) 
\par \hich\af2\dbch\af15\loch\f15 begin : reset_block 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 reset_signal_in=1; 
\par \hich\af2\dbch\af15\loch\f15 repeat(6)  @(posedge clk); 
\par \hich\af2\dbch\af15\loch\f15 reset_signal_in=0; 
\par \hich\af2\dbch\af15\loch\f15 //external reset 
\par \hich\af2\dbch\af15\loch\f15 -> resete; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par 
\par \hich\af2\dbch\af15\loch\f15 always @(negedge r\hich\af2\dbch\af15\loch\f15 eset) 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(dflags[3]  && (reset_signal_in==1)) 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15        $display("I8251A (%h) at %d: *** reset pulse too short ", instance_id ,
\par \hich\af2\dbch\af15\loch\f15                                             $time);// lack of ; 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 disable reset_block; 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /***  BEHA\hich\af2\dbch\af15\loch\f15 VIORAL DESCRIPTION   ***/ 
\par \hich\af2\dbch\af15\loch\f15 /*  Reset sequence  */ 
\par \hich\af2\dbch\af15\loch\f15 initial 
\par \hich\af2\dbch\af15\loch\f15 begin  //power-on reset  
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 reset_signal_in=0; 
\par \hich\af2\dbch\af15\loch\f15 -> resete; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @ resete 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(dflags[5]) 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A  (%h)  at  %d : performing reset sequence",  
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15                              \hich\af2\dbch\af15\loch\f15                    instance_id, $time); 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 csel=0; 
\par \hich\af2\dbch\af15\loch\f15 transmitter_reset=1; 
\par \hich\af2\dbch\af15\loch\f15 tdata_out_full=0; 
\par \hich\af2\dbch\af15\loch\f15 tdata_out_wait=0; 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold_full=0; 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold_cts=0; 
\par \hich\af2\dbch\af15\loch\f15 rdatain=0; 
\par \hich\af2\dbch\af15\loch\f15 status=4;  //only txe  is set 
\par \hich\af2\dbch\af15\loch\f15 txe=1; 
\par \hich\af2\dbch\af15\loch\f15 statusdrv=0; 
\par \hich\af2\dbch\af15\loch\f15 recvdrv=0; 
\par \hich\af2\dbch\af15\loch\f15 txd=1;  //line at mark state u\hich\af2\dbch\af15\loch\f15 pon reset until data is transmitted 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15         \tab \tab // assign not allowed for status ,etc. 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 rxrdy=0; 
\par \hich\af2\dbch\af15\loch\f15 command=0; 
\par \hich\af2\dbch\af15\loch\f15 dtr_=1; 
\par \hich\af2\dbch\af15\loch\f15 rts_=1; 
\par \hich\af2\dbch\af15\loch\f15 status[6]=0;         //  syndat is reset to output low 
\par \hich\af2\dbch\af15\loch\f15 sync_to_transmit=1;  //transmit sync char #1 when sync are transmit 
\par \hich\af2\dbch\af15\loch\f15 sync\hich\af2\dbch\af15\loch\f15 _to_receive=1; 
\par \hich\af2\dbch\af15\loch\f15 between_write_clks = `TRV; 
\par \hich\af2\dbch\af15\loch\f15 receive_in_progress=0; 
\par \hich\af2\dbch\af15\loch\f15 disable read_address_watch; 
\par \hich\af2\dbch\af15\loch\f15 disable write_address_watch; 
\par \hich\af2\dbch\af15\loch\f15 disable trans1; 
\par \hich\af2\dbch\af15\loch\f15 disable trans2; 
\par \hich\af2\dbch\af15\loch\f15 disable trans3; 
\par \hich\af2\dbch\af15\loch\f15 disable trans4; 
\par \hich\af2\dbch\af15\loch\f15 disable rcv_blk; 
\par \hich\af2\dbch\af15\loch\f15 disable sync_hunt_blk;  
\par \hich\af2\dbch\af15\loch\f15 disable double_syn\hich\af2\dbch\af15\loch\f15 c_hunt_blk; 
\par \hich\af2\dbch\af15\loch\f15 disable parity_sync_hunt_blk; 
\par \hich\af2\dbch\af15\loch\f15 disable syn_receive_internal; 
\par \hich\af2\dbch\af15\loch\f15 disable asyn_receive; 
\par \hich\af2\dbch\af15\loch\f15 disable break_detect_blk; 
\par \hich\af2\dbch\af15\loch\f15 disable break_delay_blk; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @ ( negedge read_) 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (chipsel_==0) 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15    \tab \tab \tab #(`TRD)  // time for data to show on the\hich\af2\dbch\af15\loch\f15  data bus 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (comdat_==0)  //8251A DATA ==> DATA BUS 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 recvdrv=1; 
\par \hich\af2\dbch\af15\loch\f15 rdatain=0; // no receive byte is ready 
\par \hich\af2\dbch\af15\loch\f15 rxrdy=0; 
\par \hich\af2\dbch\af15\loch\f15 status[1]=0; 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end              
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 else  // 8251A STATUS  ==> DATA  BUS 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin  
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 statusdrv=1; 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (modreg [1:0] ==2'b00)  // if sync mo\hich\af2\dbch\af15\loch\f15 de 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 status[6]=0;    // reset syndet upon status ready 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 //note: is only reset upon reset or rxd=1 in async mode 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @ ( posedge read_) 
\par \hich\af2\dbch\af15\loch\f15 begin  
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 #(`TDF)  //data from read stays on the bus after posedge read_ 
\par \hich\af2\dbch\af15\loch\f15 recvdrv=0; 
\par \hich\af2\dbch\af15\loch\f15 statusdrv=0; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @(negedge write_) 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if((chipsel_==0)&&(comdat_==0)) 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 txe=0; 
\par \hich\af2\dbch\af15\loch\f15 status[2]=0;//transmitter not empty after receiving data 
\par \hich\af2\dbch\af15\loch\f15 status[0]=0;//transmitter not ready after receiving data 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @(posedge write_)             //read t\hich\af2\dbch\af15\loch\f15 he command/data from the CPU 
\par }\pard \s31\qj\nowidctlpar\tx525\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (chipsel_==0) 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin  
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (comdat_==0)    //DATA BUS ==> 8251A DATA 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin  
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 case  (command[0]  & ~ cts_) 
\par \hich\af2\dbch\af15\loch\f15 0:                  //if it is not clear to send 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 tdata_hold=dbus; 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold_full=1; //then mark the data a\hich\af2\dbch\af15\loch\f15 s received and 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold_cts=0;  //  that it should be sent when cts 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 1:                      // if it is clear to send }{\loch\af15\hich\af2\dbch\f15 \'a1\'ad}{\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(transmitter_reset) //  }{\loch\af15\hich\af2\dbch\f15 \'a1\'ad}{\hich\af2\dbch\af15\loch\f15  and this is 1st data since reset 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi605\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 transmitter_reset=0; 
\par \hich\af2\dbch\af15\loch\f15 tdata_out=dbus; 
\par \hich\af2\dbch\af15\loch\f15 tdata_out_wait=1; \hich\af2\dbch\af15\loch\f15  //   then wait for a negedge on txc  
\par \hich\af2\dbch\af15\loch\f15 tdata_out_full=1;  //   and transmit the data 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold_full=0; 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold_cts=0; 
\par \hich\af2\dbch\af15\loch\f15 repeat(`TTXRDY)  @(posedge clk); 
\par \hich\af2\dbch\af15\loch\f15 status[0]=1;        // and set the txrdy status bit 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 else 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin  
\par }\pard \s31\qj\fi2730\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 tdata_hold=dbus;  // then\hich\af2\dbch\af15\loch\f15  mark the data as being receive 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold_full=1; //  and that it should be transmitted 
\par \hich\af2\dbch\af15\loch\f15 tdata_hold_cts=1;  //  it becomes not cts, 
\par \hich\af2\dbch\af15\loch\f15 // but do not set the txrdy status bit 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi830\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 endcase 
\par }\pard \s31\qj\fi840\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 else                        //   DATA BUS ==> CONTROL 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 case  (csel) 
\par \hich\af2\dbch\af15\loch\f15 0:                     // case 0: MODE INSTRUCTION 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 modreg=dbus; 
\par \hich\af2\dbch\af15\loch\f15 if(modreg[1:0]==0)   //  synchronous mode 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 csel=1; 
\par \hich\af2\dbch\af15\loch\f15 baudmx=1; 
\par \hich\af2\dbch\af15\loch\f15 tstoptotal=0;  //  no stop bit for synch. Op. 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 else              //synchronous mode 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li2975\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 cs\hich\af2\dbch\af15\loch\f15 el=3; 
\par \hich\af2\dbch\af15\loch\f15 baudmx=1;  //1X baud rate 
\par \hich\af2\dbch\af15\loch\f15 if (modreg[1:0]==2'b10) baudmx=16; 
\par \hich\af2\dbch\af15\loch\f15 if(modreg[1:0]==2'b11)  baudmx=64; 
\par \hich\af2\dbch\af15\loch\f15 //set up the stop bits in clocks 
\par \hich\af2\dbch\af15\loch\f15 tstoptotal=baudmx; 
\par \hich\af2\dbch\af15\loch\f15 if(modreg[7:6]==2'b10)
\par \hich\af2\dbch\af15\loch\f15     tstoptotal= tstoptotal + baudmx/2; 
\par }\pard \s31\qj\li3400\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(modreg[7:6]==2'b11)
\par \hich\af2\dbch\af15\loch\f15     tstopt\hich\af2\dbch\af15\loch\f15 otal= tstoptotal+tstoptotal; 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 databits=modreg[3:2]+5;  // bits per char 
\par \hich\af2\dbch\af15\loch\f15 data_mask=255 >> (3-modreg[3:2]); 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 1:            //case 1:  1st  SYNC CHAR  -SYNC MODE 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 sync1=dbus; 
\par \hich\af2\dbch\af15\loch\f15 /* the syn. character will be adjusted to the most 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 significant\hich\af2\dbch\af15\loch\f15  bit to simplify syn, hunt, 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 syncmask is also set to test the top data bits   */ 
\par \hich\af2\dbch\af15\loch\f15 case  (modreg[3:2]) 
\par \hich\af2\dbch\af15\loch\f15 0: 
\par }\pard \s31\qj\fi2835\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi2835\li565\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 sync1=sync1<<3; 
\par \hich\af2\dbch\af15\loch\f15 syncmask=8'b11111000; 
\par }\pard \s31\qj\fi2835\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 1: 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li2975\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 sync1=sync1<< 2; 
\par \hich\af2\dbch\af15\loch\f15 syncmask=8'b11111110; 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi2520\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 2: 
\par }\pard \s31\qj\fi2940\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi2940\li460\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 sync1=sync1<< 1; 
\par \hich\af2\dbch\af15\loch\f15 syncmas\hich\af2\dbch\af15\loch\f15 k=8'b11111110; 
\par }\pard \s31\qj\fi2520\li420\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 3: 
\par }\pard \s31\qj\fi425\li2550\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 syncmask=8'b11111111; 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 endcase 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(modreg[7]==0) 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 csel=2;       //if in double sync char mode, get 2 syncs 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 else 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 csel=3;      // if in single sync char mode,  get 1 sync 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 2:            //case 2: 2nd SYNC CHAR - SYNC MODE 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 sync2=dbus; 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 case (modreg[3:2]) 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 0: sync2=sync2<< 3; 
\par }\pard \s31\qj\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 1: sync2=sync2<< 2; 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 2: sync2=sync2<< 1; 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 endcase 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 csel=3; 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 3:                   // case 3: COMMAND INSTRUCTION - SYNC/ASYNC MODE 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 status[0]=0;         // Trick:force delay txtdy p\hich\af2\dbch\af15\loch\f15 in if command[0] 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 command=dbus; 
\par \hich\af2\dbch\af15\loch\f15 dtr_= ! command[1]; 
\par 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(command[3])        //  if send break command 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15   \tab \tab \tab \tab \tab assign txd=0;   // set txd=0  (ignores/override ***** only 
\par \hich\af2\dbch\af15\loch\f15                       \tab \tab \tab \tab // candence synerngy support assign,deassign  
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 else        \hich\af2\dbch\af15\loch\f15      // later non-assign assignment 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15   \tab \tab \tab \tab \tab deassign txd; 
\par 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(command[4])  
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 status[5:3]=0;  //Clear Frame /Parity/Overrun 
\par \hich\af2\dbch\af15\loch\f15 rts_= ! command[5]; 
\par 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(command[6]) -> resete;           //internal reset 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(modreg[1:0]==0  &&  command[7]) 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin          
\par \hich\af2\dbch\af15\loch\f15   \hich\af2\dbch\af15\loch\f15        // if sync mode and enter hunt 
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 disable syn_receive_internal; 
\par \hich\af2\dbch\af15\loch\f15      // disasble the sync receiver 
\par \hich\af2\dbch\af15\loch\f15 disable syn_receive_external; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li2125\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 receivebuf=8'hff;      //  reset receive buffer 1's 
\par \hich\af2\dbch\af15\loch\f15 -> start_receiver_e;   //  restart sync mode receiver 
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if\hich\af2\dbch\af15\loch\f15 (receive_in_progress==0) 
\par \hich\af2\dbch\af15\loch\f15 -> start_receiver_e; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li1700\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 repeat(`TTXRDY)  @(posedge clk); 
\par \hich\af2\dbch\af15\loch\f15 status[0]=1; 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 endcase 
\par }\pard \s31\qj\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par 
\par \hich\af2\dbch\af15\loch\f15 reg [7:0] serial_data; 
\par \hich\af2\dbch\af15\loch\f15 reg parity_bit; 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always wait (tdata_out_full==1) 
\par \hich\af2\dbch\af15\loch\f15 begin :trans1 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(dflags[1]) 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at \hich\af2\dbch\af15\loch\f15 %d: transmitting data: %b", 
\par }\pard \s31\qj\fi425\li2975\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 instance_id,$time, tdata_out); 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(tdata_out_wait)             \tab // if the data arrived any old time  
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 @(negedge txc_);            // wait for a negedge on txc_ 
\par }\pard \s31\qj\fi425\li3400\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 // but if a stop bit was just sent 
\par }\pard \s31\qj\li3825\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 // do not wait 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 serial_data=\hich\af2\dbch\af15\loch\f15 tdata_out; 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (tstoptotal  != 0)         // if async mode ... 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 txd=0;                       //then send a start bit 1st   
\par \hich\af2\dbch\af15\loch\f15 repeat(baudmx) @(negedge txc_); 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 repeat(databits)   //send all start,databits 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 txd=serial_data[0]; 
\par \hich\af2\dbch\af15\loch\f15 repeat(ba\hich\af2\dbch\af15\loch\f15 udmx)  @(negedge txc_); 
\par \hich\af2\dbch\af15\loch\f15 serial_data=serial_data>>1; 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (modreg [4])              //  if parity is enabled ...
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 parity_bit=^(tdata_out & data_mask); 
\par \hich\af2\dbch\af15\loch\f15 if(modreg[5]==0) parity_bit= ~parity_bit;  // odd parity 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 txd=parity_bit; 
\par \hich\af2\dbch\af15\loch\f15 repeat(baudmx) \hich\af2\dbch\af15\loch\f15  @(negedge txc_);       //then send the parity bit 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if(tstoptotal  != 0)       // if sync mode 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 begin 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 txd=1;       //then send out the stop bit (s 
\par \hich\af2\dbch\af15\loch\f15 repeat(tstoptotal)    @(negedge txc_); 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end  
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 tdata_out_full=0;  // block this routine until data/\hich\af2\dbch\af15\loch\f15 sync char to be sent 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15                    // is immediately transferred to tdata_out. 
\par \hich\af2\dbch\af15\loch\f15   
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 ->txende;         //decide what data should be sent (data/sync/stop bit) 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 event transmit_held_data_e,transmitter_idle_e; 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @txende \tab       //end of trans\hich\af2\dbch\af15\loch\f15 mitted data/sync character 
\par \hich\af2\dbch\af15\loch\f15 begin :trans2 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 case (command[0] & ~cts_) 
\par \hich\af2\dbch\af15\loch\f15 0:\tab                    //if its is not now cts 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\tab \tab \hich\af2\dbch\af15\loch\f15                //but data was received while it was c 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (tdata_hold_full && tdata_hold_cts) 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 -> transmit_held_data_e;        // then se\hich\af2\dbch\af15\loch\f15 nd the data char 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 else  
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 ->transmitter_idle_e;   //else send sync char(s) or 1 stop bit 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15  
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 1:\tab \tab //if its is now cts 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (tdata_hold_full) // if a character has been received  
\par }\pard \s31\qj\fi425\li2975\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 //but now yet ransmitted ... 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 ->transmit_held_data_e; // then send the data char 
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 else \tab \tab \tab // else (no character has been received 
\par }\pard \s31\qj\fi425\li1275\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 -> transmitter_idle_e; \tab //\tab send sync char(s) or 1 stop bit 
\par }\pard \s31\qj\fi425\li425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 endcase 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @ (transmitter_idle_e) \tab //if there are no data chars to send ...,
\par \hich\af2\dbch\af15\loch\f15 begin : trans3 
\par \tab \hich\af2\dbch\af15\loch\f15 status[2]=1;\tab                     // mard\hich\af2\dbch\af15\loch\f15  transmitter as being empty 
\par \tab \hich\af2\dbch\af15\loch\f15 txe=1; 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 if (tstoptotal !=0 || command[0] ==0 ||cts_ ==1) 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15       // if async mode or after areset or TxEnable = false or cts =false 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if (dflags[1]) 
\par }\pard\plain \qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af0\hich\af0\dbch\f15\cgrid {\tab \tab \tab \tab }{\loch\af15 \hich\af0\dbch\af15\loch\f15 $display("I8251A (%h) at %d : transmitting data : 1 (stop bit)\hich\af0\dbch\af15\loch\f15 
", 
\par \hich\af0\dbch\af15\loch\f15                                                       instance_id ,$time); 
\par }\pard\plain \s31\qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af15\hich\af2\dbch\f15\cgrid {\tab \tab \tab \hich\af2\dbch\af15\loch\f15 txd=1;\tab       //then  send out 1 stop bit and make any writes  
\par }\pard \s31\qj\fi425\li850\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 tdata_out=1;\tab \tab \tab // go to tdata_hold 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\tab \tab \tab \hich\af2\dbch\af15\loch\f15 repeat(baudmx) @(negedge txc_); 
\par \hich\af2\dbch\af15\loch\f15     \tab \tab \tab ->txende; 
\par \hich\af2\dbch\af15\loch\f15    \tab \tab end 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 else \tab \tab \tab \tab /\hich\af2\dbch\af15\loch\f15 / if sync mode 
\par \hich\af2\dbch\af15\loch\f15 case (sync_to_transmit) 
\par \hich\af2\dbch\af15\loch\f15 1: 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 tdata_out=sync1 >> (8-databits); 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 tdata_out_wait=0; \tab // without waiting on negedge t 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 tdata_out_full=1; 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if(modreg[7] == 0)\tab // if double sync mode 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 sync_to_transmit =2;// send 2nd sync a\hich\af2\dbch\af15\loch\f15 fter 1st 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 2: 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 tdata_out =sync2 >> (8-databits); 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 tdata_out_wait =0 ; \tab // without waiting on negedge t 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 tdata_out_full =1 ; 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 sync_to_transmit = 1; \tab //send 1st sync char next 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par }\pard \s31\qj\fi425\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 endcase 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @ (transmit_held_data_e)\hich\af2\dbch\af15\loch\f15  \tab // if a character has been received *****add ()  
\par \hich\af2\dbch\af15\loch\f15 begin : trans4 
\par \tab \hich\af2\dbch\af15\loch\f15 tdata_out=tdata_hold;\tab  // but not transmitted ... 
\par \tab \hich\af2\dbch\af15\loch\f15 tdata_out_wait = 0;\tab      // then do not wait on negedge txc 
\par \tab \hich\af2\dbch\af15\loch\f15 tdata_out_full = 1;\tab \tab  // and send the char immediately 
\par \tab \hich\af2\dbch\af15\loch\f15 tdata_hold_full \hich\af2\dbch\af15\loch\f15 = 0 ;   
\par \tab \hich\af2\dbch\af15\loch\f15 repeat (`TTXRDY ) @(posedge clk); 
\par \tab \hich\af2\dbch\af15\loch\f15 status[0] = 1;\tab \tab \tab  // and set the txrdy status bit 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 //************************* RECEIVER PORTION OF THE 8251A *******************/ 
\par \hich\af2\dbch\af15\loch\f15 // data is received at leading edge of the clock 
\par \hich\af2\dbch\af15\loch\f15 event break_detect_e,\tab 
\par \tab \hich\af2\dbch\af15\loch\f15   break_delay_e;\tab \tab // 
\par \hich\af2\dbch\af15\loch\f15 event hunt_sync1_e,   \tab //hunt for the 1st sync char 
\par \tab \hich\af2\dbch\af15\loch\f15   hunt_sync2_e,\tab     //hunt for the 2nd sync char (double sync mode) 
\par \tab \hich\af2\dbch\af15\loch\f15   sync_hunted_e, \tab //sync char(s) was found (on abit aligned basis  
\par \tab \hich\af2\dbch\af15\loch\f15   external_syndet_watche; //external sy\hich\af2\dbch\af15\loch\f15 nc mode: whenever syndet pin  
\par \tab \tab \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15  // goes high, set the syndet status bit 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @start_receiver_e 
\par \hich\af2\dbch\af15\loch\f15 begin :rcv_blk 
\par \tab \hich\af2\dbch\af15\loch\f15 receive_in_progress = 1; 
\par \tab \hich\af2\dbch\af15\loch\f15 case (modreg[1:0]) 
\par \tab \hich\af2\dbch\af15\loch\f15 2'b00: 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 if (modreg[6] ==0)\tab // if internal syndet mode ... 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if (dflags\hich\af2\dbch\af15\loch\f15 [5]) 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d : starting internal sync receive",
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 instance_id, $time);
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if (dflags[5] && command[7]) 
\par }\pard \s31\qj\fi-1155\li3255\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d : hunting for syncs", instance_id, $time); 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\tab \tab \tab \hich\af2\dbch\af15\loch\f15    if (modreg[7]==1)\tab // if enter hunt mode 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 b\hich\af2\dbch\af15\loch\f15 egin  
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if(dflags[5]) 
\par \tab \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d :receiver waiting on syndet",
\par \hich\af2\dbch\af15\loch\f15  \tab \tab \tab \tab \tab \tab    instance_id, $time);
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 ->hunt_sync1_e;\tab //start search for sync char(s 
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 @(posedge syndet); 
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if(dflags[5]) 
\par }\pard \s31\qj\fi-985\li3400\nowidctlpar\aspalpha\aspnum\faroman {\hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d : receiv\hich\af2\dbch\af15\loch\f15 er DONE waiting on syndet", instance_id, $time); 
\par }\pard \s31\qj\nowidctlpar\aspalpha\aspnum\faroman {\tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 syn_receive_internal;\tab //start sync mode receiver 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 else 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if(dflags[5]) 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d : starting external sync receive", instance_id, $time); 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if(dflags\hich\af2\dbch\af15\loch\f15 [5] && command[7]) 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d : hunting for syncs",  
\par \hich\af2\dbch\af15\loch\f15 instance_id, $time);  
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 ->external_syndet_watche;\tab // whenever syndet pin goes to 1 
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 // set syndet status bit 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if (command[7]==1) 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 begin:external_syn_hunt_blk 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 fork 
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 syn_receive_external;\tab // assemble chars while waiting 
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 @(posedge syndet) \tab // after rising edge of syndet 
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 @(negedge syndet)\tab \tab // wait for falling edge 
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 // begore starting char assemble 
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 disable external_syn_hunt_blk;\hich\af2\dbch\af15\loch\f15  
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 join 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \tab \tab \hich\af2\dbch\af15\loch\f15 syn_receive_external;\tab // start external sync mode receiving 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \hich\af2\dbch\af15\loch\f15 default:\tab // if async mode ... 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if(dflags[5]) 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d : starting asynchronous receiver", instance_id, $time);
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 ->break_detect\hich\af2\dbch\af15\loch\f15 _e;\tab // start check for rcd=0 too long 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 asyn_receive;\tab // and start async mode receiver 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \hich\af2\dbch\af15\loch\f15 endcase 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \tab \hich\af2\dbch\af15\loch\f15 /***** EXTERNAL SYNCHRONOUS MODE RECEIVE *****/ 
\par \hich\af2\dbch\af15\loch\f15 task syn_receive_rexternal; 
\par \hich\af2\dbch\af15\loch\f15 forever 
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 repeat(databits)\tab //Whether in hunt mode or n\hich\af2\dbch\af15\loch\f15 ot,assemble a character 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 @(posedge rxc_) 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 receivebuf=\{rcd, receivebuf[7:1]\}; 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 get_and_check_parity;\tab //receive and check parity bit, if any 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 mark_char_received;\tab //set rxrdy line, if enalbed 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @(external_synde\hich\af2\dbch\af15\loch\f15 t_watche)  
\par \tab \hich\af2\dbch\af15\loch\f15 @(posedge rxc_) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 status[6]=1; 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 /****INTERNAL SYNCHRONOUS MODE RECEIVE ***/ 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 /*   Hunt for the sync char(s)\tab \tab \tab   */ 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 /*\tab  (if in synchronous internal sync detect mode) */ 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 /* Syndet is set high when the sync(s) are found */ 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 alway\hich\af2\dbch\af15\loch\f15 s @ (hunt_sysnc1_e)\tab //search for 1st sync char in the data stream 
\par \hich\af2\dbch\af15\loch\f15 begin :sync_hunt_blk 
\par \tab \hich\af2\dbch\af15\loch\f15 while(!(((receivebuf ^ sync1) & syncmask) === 8'b0000_0000)) 
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 @(posedge rxc_) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 receivebuf = \{rcd, receivebuf[7:1]\}; 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \hich\af2\dbch\af15\loch\f15 if ( modreg[7]==0) \tab // if doub\hich\af2\dbch\af15\loch\f15 le sync mod 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 ->hunt_sync2_e;\tab //check for 2nd sync char directly agter 1 
\par \tab \hich\af2\dbch\af15\loch\f15 else 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 -> sync_hunted_e;\tab // if single sync mode , sync hunt is complete 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 always @ (hunt_sync2_e) \tab // find the second synchronous character 
\par \hich\af2\dbch\af15\loch\f15 begin : double_sync_hunt_blk 
\par \tab \hich\af2\dbch\af15\loch\f15 rep\hich\af2\dbch\af15\loch\f15 eat(databits) 
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 @(posedge rxc_) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 receivebuf=\{rcd,receivebuf[7:1]\}; 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \hich\af2\dbch\af15\loch\f15 if((receivebuf ^ sync2)& syncmask===8'b0000_0000) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 ->sync_hunted_e; // if sync2 followed syn1,sync hunt is complete 
\par \tab \hich\af2\dbch\af15\loch\f15 else 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 ->hunt_sync1_e;\tab //else hunt for sync1 agai\hich\af2\dbch\af15\loch\f15 n 
\par \hich\af2\dbch\af15\loch\f15  
\par \tab \hich\af2\dbch\af15\loch\f15 // Note : the data stream [sync1 sync1 sync2] will have sync detected. 
\par \tab \hich\af2\dbch\af15\loch\f15 // Suppose sync1=11001100: 
\par \tab \hich\af2\dbch\af15\loch\f15 // Then [1100 1100 1100 sync2]will NOT be detected . 
\par \tab \hich\af2\dbch\af15\loch\f15 // In general : never let a suffix of sync1 also be a prefix of sync1. 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @ (sync\hich\af2\dbch\af15\loch\f15 _hunted_e) 
\par \hich\af2\dbch\af15\loch\f15 begin :parity_sync_hunt_blk 
\par \tab \hich\af2\dbch\af15\loch\f15 get_and_check_parity; 
\par \tab \hich\af2\dbch\af15\loch\f15 status[6]=1;\tab //set syndet status bit (sync chars detected ) 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 task syn_receive_internal; 
\par \hich\af2\dbch\af15\loch\f15 forever 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \hich\af2\dbch\af15\loch\f15 repeat(databits)\tab //no longer in hunt mode so read entire chars and  
\par \tab \hich\af2\dbch\af15\loch\f15 begin  \hich\af2\dbch\af15\loch\f15            // then look for syncs (instead of on bit boundaries) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 @(posedge rxc_) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 receivebuf=\{rcd,receivebuf[7:1]\}; 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \hich\af2\dbch\af15\loch\f15 case (sync_to_receive)  
\par \tab \hich\af2\dbch\af15\loch\f15 2:\tab \tab \tab // if looking for 2nd sync char ...  
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 if(((receivebuf ^ sync2) & syncmask)===0) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 beg\hich\af2\dbch\af15\loch\f15 in \tab //... and 2nd sync char is found  
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 sync_to_receive =1;\tab //then look ofr 1st sync (or data) 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 status[6]=1;\tab \tab // and mark sync detected 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 else if (((receivebuf ^ sync1) & syncmask)===0) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 begin \tab //... and 1st sync char is found  
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 sync_to_r\hich\af2\dbch\af15\loch\f15 eceive = 2;\tab //then look for 2nd sync char 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \hich\af2\dbch\af15\loch\f15 1: 
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 if ((( receivebuf ^ sync1) & syncmask) ===0) // ... and 1st sync is found  
\par \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if(modreg[7]==0)\tab //if doulbe sync mode 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 sync_to_receive =2; \tab // look for 2nd sync to foll 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 else 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 status[6]=1; \tab //else look for 1st or data and mark sync detected  
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 else;\tab //and data was found , do nothing 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \hich\af2\dbch\af15\loch\f15 endcase 
\par \tab \hich\af2\dbch\af15\loch\f15 get_and_check_parity; \tab // receive and check parity bit, if any 
\par \tab \hich\af2\dbch\af15\loch\f15 mark_char_received; 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask 
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15 //******\hich\af2\dbch\af15\loch\f15 **************************************************
\par \hich\af2\dbch\af15\loch\f15 task syn_receive_external; 
\par \hich\af2\dbch\af15\loch\f15 forever 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par \hich\af2\dbch\af15\loch\f15 // have not found the original programs
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask
\par 
\par \hich\af2\dbch\af15\loch\f15 task get_and_check_parity; 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \hich\af2\dbch\af15\loch\f15 receivebuf=receivebuf >> (8-databits); 
\par \tab \hich\af2\dbch\af15\loch\f15 if(modreg[4] == 1) 
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 @(posedge rxc_) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 if (( ^receivebuf ^ modreg[5] ^ rcd) != 1) 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 parity_error; 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 task mark_char_received; 
\par \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \hich\af2\dbch\af15\loch\f15 if(command[2]==1) \tab // if receiving is enabled 
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \hich\af2\dbch\af15\loch\f15 rxrdy=1;\tab //set receive read status bit 
\par \tab \hich\af2\dbch\af15\loch\f15 status[1]=1;\tab //if prev\hich\af2\dbch\af15\loch\f15 ious data was not read 
\par \tab \hich\af2\dbch\af15\loch\f15 if(rdatain == 1) 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 overrun_error; // overrun error 
\par \tab \hich\af2\dbch\af15\loch\f15 rdata=receivebuf;\tab //latch the data 
\par \tab \hich\af2\dbch\af15\loch\f15 rdatain=1;\tab //mark data as not having been read 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 if(dflags[2]) 
\par \tab \hich\af2\dbch\af15\loch\f15 $display("I8251A (%h) at %d : receive data : %b", instance_id, $time,r\hich\af2\dbch\af15\loch\f15 eceivebuf); 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /************* ASYNCHRONOUS MODE RECEIVER ****************/ 
\par \hich\af2\dbch\af15\loch\f15 /* CHECK FOR BREAK DETECTION (RCD LOW THROUGH 2 */ 
\par \hich\af2\dbch\af15\loch\f15 /* RECEIVE SEQUENCES IN THE ASYNCHRONOUS MODE .*/ 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @ (break_detect_e) 
\par \hich\af2\dbch\af15\loch\f15 begin :break_detect_blk 
\par \tab \hich\af2\dbch\af15\loch\f15 #1 /* \hich\af2\dbch\af15\loch\f15 to be sure break_delay_clk is waiting on break_delay_e 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 after it triggered break_detect_e */ 
\par \tab \hich\af2\dbch\af15\loch\f15 if (rcd==0) 
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 ->break_delay_e; // start + databits +parity +stop bit 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 breakcount_period = 1 +databits + modreg[4] + (tstoptotal!=0); 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 // the numbe\hich\af2\dbch\af15\loch\f15 r of rxc periods needed for 2 receive sequence  
\par \tab \tab \hich\af2\dbch\af15\loch\f15 breakcount_period  = 2* breakcount_period*baudmx; 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 //if rcd stays low through 2 consecutive  
\par \tab \tab \hich\af2\dbch\af15\loch\f15 // (start ,data,prity ,stop ) sequences ...  
\par \tab \tab \hich\af2\dbch\af15\loch\f15 repeat(breakcount_period) 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 @(posedge rxc_); 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 status[6]\hich\af2\dbch\af15\loch\f15 =1;\tab // ... then set break detect (status[6]) high 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 always @(break_delay_e)\tab \tab 
\par \hich\af2\dbch\af15\loch\f15 begin : break_delay_blk 
\par \tab \hich\af2\dbch\af15\loch\f15 @(posedge rcd )\tab //but if rcd goes high during that time 
\par \tab \hich\af2\dbch\af15\loch\f15 begin :break_delay_blk   
\par \tab \tab \hich\af2\dbch\af15\loch\f15 disable break_detect_blk; 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 status[6] = 0;\tab //... then\hich\af2\dbch\af15\loch\f15  set the break detect low 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 @(negedge rcd ) \tab //and when rcd goes low again ... 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 ->break_detect_e; \tab // ... start the break detection again 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 /******** ASYNCHRONOUS MODE RECEIVE TASK ******************/ 
\par \hich\af2\dbch\af15\loch\f15 task asyn_receive; 
\par \hich\af2\dbch\af15\loch\f15 forever  
\par \tab \hich\af2\dbch\af15\loch\f15 @(negedg\hich\af2\dbch\af15\loch\f15 e rcd) // the receive line went to zero, maybe a start bit 
\par \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 rbaudcnt = baudmx /2; 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 if (baudmx == 1) 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 rbaudcnt=1; 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 repeat(rbaudcnt) @(posedge rxc_); // after half a bit ... 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 if(rcd == 0)\tab //if it is still a start bit 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 rbaudcnt \hich\af2\dbch\af15\loch\f15 = baudmx; 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 repeat(databits) // receive the data bits 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 repeat(rbaudcnt ) @(posedge rxc_); 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 #1 receivebuf=\{rcd,receivebuf[7:1]\}; 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 repeat (rbaudcnt) @(posedge rxc_); 
\par \hich\af2\dbch\af15\loch\f15  
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 //shift the data to the low part 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 receivebuf = rece\hich\af2\dbch\af15\loch\f15 ivebuf >> (8-databits); 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if(modreg[4]==1)\tab ///if parity is enabled 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 begin 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 if ((^receivebuf ^ modreg[5]^rcd)!=1) 
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 parity_error;\tab //check for a parity error 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 repeat(rbaudcnt) @(posedge rxc_); 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15  
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 #1 if (rcd == 0 )\tab  // if middle of\hich\af2\dbch\af15\loch\f15  stop bit is 0 
\par \tab \tab \tab \tab \hich\af2\dbch\af15\loch\f15 frame_error;\tab // frame error (should be 1) 
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15  
\par \tab \tab \tab \hich\af2\dbch\af15\loch\f15 mark_char_received; 
\par \tab \tab \hich\af2\dbch\af15\loch\f15 end 
\par \tab \hich\af2\dbch\af15\loch\f15 end 
\par \hich\af2\dbch\af15\loch\f15 endtask 
\par \hich\af2\dbch\af15\loch\f15 endmodule 
\par \hich\af2\dbch\af15\loch\f15  
\par }{\b 
\par 
\par \hich\af2\dbch\af15\loch\f15 [}{\b \loch\af15\hich\af2\dbch\f15 \'c0\'fd}{\b \hich\af2\dbch\af15\loch\f15 2]. }{\b \loch\af15\hich\af2\dbch\f15 \'a1\'b0\'c9\'cc\'d2\'b5\'bb\'af\'a1\'b1\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'d6\'ae\'b6\'fe}{\b 
\hich\af2\dbch\af15\loch\f15 : Intel 8085a }{\b \loch\af15\hich\af2\dbch\f15 \'ce\'a2\'b4\'a6\'c0\'ed\'c6\'f7\'b5\'c4\'d0\'d0\'ce\'aa\'c3\'e8\'ca\'f6\'c4\'a3\'bf\'e9}{\b 
\par }{
\par \hich\af2\dbch\af15\loch\f15 /****************************************************************************
\par }\pard \s31\qc\nowidctlpar\aspalpha\aspnum\faroman {\b \hich\af2\dbch\af15\loch\f15 Inte\hich\af2\dbch\af15\loch\f15 l 8085a }{\b \loch\af15\hich\af2\dbch\f15 \'ce\'a2\'b4\'a6\'c0\'ed\'c6\'f7\'b7\'c2\'d5\'e6\'c4\'a3\'bf\'e9\'b5\'c4}{\b 
\hich\af2\dbch\af15\loch\f15 Verilog}{\b \loch\af15\hich\af2\dbch\f15 \'d4\'b4\'b4\'fa\'c2\'eb}{\b 
\par }\pard\plain \qc\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af0\hich\af0\dbch\f15\cgrid {\fs18\dbch\f38 \loch\af0\hich\af0\dbch\f38 \'d7\'a2\'d2\'e2\'a3\'ba\'d7\'f7\'d5\'df\'b2\'bb\'c4\'dc\'b1\'a3\'d6\'a4\'b1\'be\'c4\'a3\'bf\'e9\'b5\'c4
\'cd\'ea\'d5\'fb\'ba\'cd\'be\'ab\'c8\'b7\'a3\'ac\'ca\'b9\'d3\'c3\'b1\'be\'c4\'a3\'bf\'e9\'d5\'df\'c8\'e7\'d3\'f6\'ce\'ca\'cc\'e2\'d2\'bb\'c7\'d0\'d4\'f0\'c8\'ce\'d7\'d4\'b8\'ba}{\fs18\loch\af15\hich\af1\dbch\f38 
\par }\pard \qj\nowidctlpar\aspalpha\aspnum\faroman {\hich\af0\dbch\af15\loch\f0 *****************************************************************************/
\par }\pard\plain \s31\qj\nowidctlpar\aspalpha\aspnum\faroman \fs21\kerning2\loch\af15\hich\af2\dbch\f15\cgrid {\hich\af2\dbch\af15\loch\f15  
\par \hich\af2\dbch\af15\loch\f15 module intel_8085a
\par \hich\af2\dbch\af15\loch\f15         (clock, x2, resetff, sodff, sid, trap, rst7p5, rst6p5, rst5p5, 
\par \hich\af2\dbch\af15\loch\f15          intr, intaf\hich\af2\dbch\af15\loch\f15 f, ad, a, s0, aleff, writeout, readout, s1,iomout, 
\par \hich\af2\dbch\af15\loch\f15          ready, nreset, clockff, hldaff, hold);
\par 
\par \hich\af2\dbch\af15\loch\f15     reg [8:1]      dflags;
\par \hich\af2\dbch\af15\loch\f15     initial         dflags = 'b011;
\par \hich\af2\dbch\af15\loch\f15     // diag flags:
\par \hich\af2\dbch\af15\loch\f15     // 1 = trace instructions
\par \hich\af2\dbch\af15\loch\f15     // 2 = trace IN and OUT instructions
\par \hich\af2\dbch\af15\loch\f15   \hich\af2\dbch\af15\loch\f15   // 3 = trace instruction count
\par 
\par \hich\af2\dbch\af15\loch\f15     output
\par \hich\af2\dbch\af15\loch\f15         resetff, sodff, intaff, s0, aleff,
\par \hich\af2\dbch\af15\loch\f15         writeout, readout, s1, iomout, clockff, hldaff;
\par 
\par \hich\af2\dbch\af15\loch\f15     inout[7:0] ad, a;
\par 
\par \hich\af2\dbch\af15\loch\f15     input
\par \hich\af2\dbch\af15\loch\f15             clock, x2, sid, trap,
\par \hich\af2\dbch\af15\loch\f15             rst7p5, rst6p5, rst5p5,
\par \hich\af2\dbch\af15\loch\f15         \hich\af2\dbch\af15\loch\f15     intr, ready, nreset, hold;
\par 
\par \hich\af2\dbch\af15\loch\f15     reg[15:0]
\par \hich\af2\dbch\af15\loch\f15         pc,        // program counter
\par \hich\af2\dbch\af15\loch\f15         sp,        // stack pointer
\par \hich\af2\dbch\af15\loch\f15         addr;      // address output
\par 
\par \hich\af2\dbch\af15\loch\f15     reg[8:0]
\par \hich\af2\dbch\af15\loch\f15         intmask;   // interrupt mask and status
\par 
\par \hich\af2\dbch\af15\loch\f15     reg[7:0]
\par \hich\af2\dbch\af15\loch\f15         acc,       // a\hich\af2\dbch\af15\loch\f15 ccumulator
\par \hich\af2\dbch\af15\loch\f15         regb,      // general
\par \hich\af2\dbch\af15\loch\f15         regc,      // general
\par \hich\af2\dbch\af15\loch\f15         regd,      // general
\par \hich\af2\dbch\af15\loch\f15         rege,      // general
\par \hich\af2\dbch\af15\loch\f15         regh,      // general
\par \hich\af2\dbch\af15\loch\f15         regl,      // general
\par \hich\af2\dbch\af15\loch\f15         ir,        // instruction
\par \hich\af2\dbch\af15\loch\f15         data;      // data outp\hich\af2\dbch\af15\loch\f15 ut
\par 
\par \hich\af2\dbch\af15\loch\f15     reg
\par \hich\af2\dbch\af15\loch\f15         aleff,     // address latch enable
\par \hich\af2\dbch\af15\loch\f15         s0ff,      // status line 0
\par \hich\af2\dbch\af15\loch\f15         s1ff,      // status line 1
\par \hich\af2\dbch\af15\loch\f15         hldaff,    // hold acknowledge
\par \hich\af2\dbch\af15\loch\f15         holdff,    // internal hold
\par \hich\af2\dbch\af15\loch\f15         intaff,    // interrupt acknowledge
\par \hich\af2\dbch\af15\loch\f15         tr\hich\af2\dbch\af15\loch\f15 apff,    // trap interrupt request
\par \hich\af2\dbch\af15\loch\f15         trapi,     // trap execution for RIM instruction
\par \hich\af2\dbch\af15\loch\f15         inte,      // previous state of interrupt enable flag
\par \hich\af2\dbch\af15\loch\f15         int,       // interrupt acknowledge in progress
\par \hich\af2\dbch\af15\loch\f15         validint,  // interrupt pending
\par \hich\af2\dbch\af15\loch\f15       \hich\af2\dbch\af15\loch\f15   haltff,    // halt request
\par \hich\af2\dbch\af15\loch\f15         resetff,   // reset output
\par \hich\af2\dbch\af15\loch\f15         clockff,   // clock output
\par \hich\af2\dbch\af15\loch\f15         sodff,     // serial output data
\par \hich\af2\dbch\af15\loch\f15         read,      // read request signal
\par \hich\af2\dbch\af15\loch\f15         write,     // write request signal
\par \hich\af2\dbch\af15\loch\f15         iomff,     // i/o memor\hich\af2\dbch\af15\loch\f15 y select
\par \hich\af2\dbch\af15\loch\f15         acontrol,  // address output control
\par \hich\af2\dbch\af15\loch\f15         dcontrol,  // data output control
\par \hich\af2\dbch\af15\loch\f15         s,         // data source control
\par \hich\af2\dbch\af15\loch\f15         cs,        // sign condition code
\par \hich\af2\dbch\af15\loch\f15         cz,        // zero condition code
\par \hich\af2\dbch\af15\loch\f15         cac,       // aux carry co\hich\af2\dbch\af15\loch\f15 ndition code
\par \hich\af2\dbch\af15\loch\f15         cp,        // parity condition code
\par \hich\af2\dbch\af15\loch\f15         cc;        // carry condition code
\par 
\par \hich\af2\dbch\af15\loch\f15     wire
\par \hich\af2\dbch\af15\loch\f15         s0 = s0ff & ~haltff,
\par \hich\af2\dbch\af15\loch\f15         s1 = s1ff & ~haltff;
\par 
\par \hich\af2\dbch\af15\loch\f15     tri[7:0]
\par \hich\af2\dbch\af15\loch\f15         ad = dcontrol ? (s ? data : addr[7:0]) : 'bz,
\par \hich\af2\dbch\af15\loch\f15         a = acontrol\hich\af2\dbch\af15\loch\f15  ? addr[15:8] : 'bz;
\par 
\par \hich\af2\dbch\af15\loch\f15     tri
\par \hich\af2\dbch\af15\loch\f15         readout = acontrol ? read : 'bz,
\par \hich\af2\dbch\af15\loch\f15         writeout = acontrol ? write : 'bz,
\par \hich\af2\dbch\af15\loch\f15         iomout = acontrol ? iomff : 'bz;
\par 
\par \hich\af2\dbch\af15\loch\f15     event
\par \hich\af2\dbch\af15\loch\f15         ec1, // clock 1 event
\par \hich\af2\dbch\af15\loch\f15         ec2; // clock 2 event
\par 
\par \hich\af2\dbch\af15\loch\f15     // internal clock generat\hich\af2\dbch\af15\loch\f15 ion
\par \hich\af2\dbch\af15\loch\f15     always begin
\par \hich\af2\dbch\af15\loch\f15         @(posedge clock) -> ec1;
\par \hich\af2\dbch\af15\loch\f15         @(posedge clock) -> ec2;
\par \hich\af2\dbch\af15\loch\f15     end
\par 
\par \hich\af2\dbch\af15\loch\f15     integer instruction; // instruction count
\par \hich\af2\dbch\af15\loch\f15     initial instruction = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15     always begin:run_processor
\par \hich\af2\dbch\af15\loch\f15         #1 reset_sequence;
\par \hich\af2\dbch\af15\loch\f15         fork              \hich\af2\dbch\af15\loch\f15                               
\par \hich\af2\dbch\af15\loch\f15             execute_instructions;             // Instructions executed
\par \hich\af2\dbch\af15\loch\f15             wait(!nreset)                     // in parallel with reset  
\par \hich\af2\dbch\af15\loch\f15                 @ec2 disable run_processor; // control. Reset will     
\par \hich\af2\dbch\af15\loch\f15         \hich\af2\dbch\af15\loch\f15 join                                  // disable run_processor   
\par \hich\af2\dbch\af15\loch\f15     end                                       // and all tasks and       
\par \hich\af2\dbch\af15\loch\f15                                               // functions enabled from  
\par \hich\af2\dbch\af15\loch\f15                                           \hich\af2\dbch\af15\loch\f15     // it when nreset set to 0.
\par 
\par \hich\af2\dbch\af15\loch\f15     task reset_sequence;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         wait(!nreset)
\par \hich\af2\dbch\af15\loch\f15         fork
\par \hich\af2\dbch\af15\loch\f15             begin
\par \hich\af2\dbch\af15\loch\f15                 $display("Performing 8085(%m) reset sequence");
\par \hich\af2\dbch\af15\loch\f15                 read = 1;
\par \hich\af2\dbch\af15\loch\f15                 write = 1;
\par \hich\af2\dbch\af15\loch\f15                 re\hich\af2\dbch\af15\loch\f15 setff = 1;
\par \hich\af2\dbch\af15\loch\f15                 dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15                 @ec1 // synchronized with clock 1 event
\par \hich\af2\dbch\af15\loch\f15                     pc = 0;
\par \hich\af2\dbch\af15\loch\f15                     ir = 0;
\par \hich\af2\dbch\af15\loch\f15                     intmask[3:0] = 7;
\par \hich\af2\dbch\af15\loch\f15                     intaff = 1;
\par \hich\af2\dbch\af15\loch\f15                     acontrol = 0;
\par \hich\af2\dbch\af15\loch\f15                     aleff = 0;
\par \hich\af2\dbch\af15\loch\f15                     intmask[7:5] = 0;
\par \hich\af2\dbch\af15\loch\f15                     sodff = 0;
\par \hich\af2\dbch\af15\loch\f15                     trapff = 0;
\par \hich\af2\dbch\af15\loch\f15                     trapi = 0;
\par \hich\af2\dbch\af15\loch\f15                     iomff = 0;
\par \hich\af2\dbch\af15\loch\f15                     haltff = 0;
\par \hich\af2\dbch\af15\loch\f15                     holdff = \hich\af2\dbch\af15\loch\f15 0;
\par \hich\af2\dbch\af15\loch\f15                     hldaff = 0;
\par \hich\af2\dbch\af15\loch\f15                     validint = 0;
\par \hich\af2\dbch\af15\loch\f15                     int = 0;
\par \hich\af2\dbch\af15\loch\f15                 disable check_reset;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             begin:check_reset
\par \hich\af2\dbch\af15\loch\f15                 wait(nreset)               // Check, in parallel with the
\par \hich\af2\dbch\af15\loch\f15  \hich\af2\dbch\af15\loch\f15                    disable run_processor; // reset sequence, that nreset
\par \hich\af2\dbch\af15\loch\f15             end                            // remains at 0.
\par \hich\af2\dbch\af15\loch\f15         join
\par \hich\af2\dbch\af15\loch\f15         wait(nreset) @ec1 @ec2 resetff = 0;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* fetch and execute instructions */
\par \hich\af2\dbch\af15\loch\f15    \hich\af2\dbch\af15\loch\f15  task execute_instructions;
\par \hich\af2\dbch\af15\loch\f15     forever begin
\par \hich\af2\dbch\af15\loch\f15         instruction = instruction + 1;
\par \hich\af2\dbch\af15\loch\f15         if(dflags[3])
\par \hich\af2\dbch\af15\loch\f15             $display("executing instruction %d", instruction);
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec1 // clock cycle 1
\par \hich\af2\dbch\af15\loch\f15             addr = pc;
\par \hich\af2\dbch\af15\loch\f15             s = 0;
\par \hich\af2\dbch\af15\loch\f15             i\hich\af2\dbch\af15\loch\f15 omff = 0;
\par \hich\af2\dbch\af15\loch\f15             read = 1;
\par \hich\af2\dbch\af15\loch\f15             write = 1;
\par \hich\af2\dbch\af15\loch\f15             acontrol = 1;
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 1;
\par \hich\af2\dbch\af15\loch\f15             aleff = 1;
\par \hich\af2\dbch\af15\loch\f15             if(haltff) begin
\par \hich\af2\dbch\af15\loch\f15                 haltff = 1;
\par \hich\af2\dbch\af15\loch\f15                 s0ff = 0;
\par \hich\af2\dbch\af15\loch\f15                 s1ff = 0;
\par \hich\af2\dbch\af15\loch\f15                 h\hich\af2\dbch\af15\loch\f15 altreq;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             else begin
\par \hich\af2\dbch\af15\loch\f15                 s0ff = 1;
\par \hich\af2\dbch\af15\loch\f15                 s1ff = 1;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             aleff = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec1 // clock cycle 2
\par \hich\af2\dbch\af15\loch\f15             read = 0;
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             r\hich\af2\dbch\af15\loch\f15 eady_hold;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2 // clock cycle 3
\par \hich\af2\dbch\af15\loch\f15             read = 1;
\par \hich\af2\dbch\af15\loch\f15             data = ad;
\par \hich\af2\dbch\af15\loch\f15             ir = ad;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec1 // clock cycle 4
\par \hich\af2\dbch\af15\loch\f15             if(do6cycles(ir)) begin
\par \hich\af2\dbch\af15\loch\f15                 // do a 6-cycle instruction fetch
\par \hich\af2\dbch\af15\loch\f15                 @ec1 @ec2 // co\hich\af2\dbch\af15\loch\f15 nditional clock cycle 5
\par \hich\af2\dbch\af15\loch\f15                     if(hold) begin
\par \hich\af2\dbch\af15\loch\f15                         holdff =1 ;
\par \hich\af2\dbch\af15\loch\f15                         acontrol = 0;
\par \hich\af2\dbch\af15\loch\f15                         dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15                         @ec2 hldaff = 1;
\par \hich\af2\dbch\af15\loch\f15                     end
\par \hich\af2\dbch\af15\loch\f15                     \hich\af2\dbch\af15\loch\f15 else begin
\par \hich\af2\dbch\af15\loch\f15                         holdff = 0;
\par \hich\af2\dbch\af15\loch\f15                         hldaff = 0;
\par \hich\af2\dbch\af15\loch\f15                     end
\par 
\par \hich\af2\dbch\af15\loch\f15                 @ec1; // conditional clock cycle 6
\par \hich\af2\dbch\af15\loch\f15             end
\par 
\par \hich\af2\dbch\af15\loch\f15             if(holdff) holdit;
\par \hich\af2\dbch\af15\loch\f15             checkint;
\par \hich\af2\dbch\af15\loch\f15             do_instruction;
\par 
\par \hich\af2\dbch\af15\loch\f15             while(hold) @ec2 begin
\par \hich\af2\dbch\af15\loch\f15                 acontrol = 0;
\par \hich\af2\dbch\af15\loch\f15                 dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             holdff = 0;
\par \hich\af2\dbch\af15\loch\f15             hldaff = 0;
\par \hich\af2\dbch\af15\loch\f15             if(validint) interrupt;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     function do6cycles;
\par \hich\af2\dbch\af15\loch\f15     input[7:0\hich\af2\dbch\af15\loch\f15 ] ireg;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         do6cycles = 0;
\par \hich\af2\dbch\af15\loch\f15         case(ireg[2:0])
\par \hich\af2\dbch\af15\loch\f15             0, 4, 5, 7: if(ireg[7:6] == 3) do6cycles = 1;
\par \hich\af2\dbch\af15\loch\f15             1: if((ireg[3] == 1) && (ireg[7:5] == 7)) do6cycles = 1;
\par \hich\af2\dbch\af15\loch\f15             3: if(ireg[7:6] == 0) do6cycles = 1;
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endfunction
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     task checkint;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         if(rst6p5)
\par \hich\af2\dbch\af15\loch\f15             if((intmask[3] == 1) && (intmask[1] == 0)) intmask[6] = 1;
\par \hich\af2\dbch\af15\loch\f15         else
\par \hich\af2\dbch\af15\loch\f15             intmask[6] = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         if(rst5p5)
\par \hich\af2\dbch\af15\loch\f15             if((intmask[3] == 1) && (intmask[0] =\hich\af2\dbch\af15\loch\f15 = 0)) intmask[5] = 1;
\par \hich\af2\dbch\af15\loch\f15         else
\par \hich\af2\dbch\af15\loch\f15             intmask[5] = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         if(\{intmask[7], intmask[3:2]\} == 6)
\par \hich\af2\dbch\af15\loch\f15             intmask[4] = 1;
\par \hich\af2\dbch\af15\loch\f15         else
\par \hich\af2\dbch\af15\loch\f15             intmask[4] = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         validint = (intmask[6:4] == 7) | trapff | intr;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     // concurently with executing instructions,
\par \hich\af2\dbch\af15\loch\f15     // process primary inputs for processor interrupt
\par \hich\af2\dbch\af15\loch\f15     always @(posedge trap) trapff = 1;
\par 
\par \hich\af2\dbch\af15\loch\f15     always @(negedge trap) trapff = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15     always @(posedge rst7p5) intmask[7] = 1;
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* check condition of r\hich\af2\dbch\af15\loch\f15 eady and hold inputs */
\par \hich\af2\dbch\af15\loch\f15     task ready_hold;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         while(!ready) @ec2;
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             if(hold) begin
\par \hich\af2\dbch\af15\loch\f15                 holdff = 1;
\par \hich\af2\dbch\af15\loch\f15                 @ec2 hldaff = 1;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* hold */
\par \hich\af2\dbch\af15\loch\f15     task holdit;
\par \hich\af2\dbch\af15\loch\f15   \hich\af2\dbch\af15\loch\f15   begin
\par \hich\af2\dbch\af15\loch\f15         while(hold) @ec2 begin
\par \hich\af2\dbch\af15\loch\f15             acontrol = 0;
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15         end
\par \hich\af2\dbch\af15\loch\f15         holdff = 0;
\par \hich\af2\dbch\af15\loch\f15         @ec2 hldaff = 0;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* halt request */
\par \hich\af2\dbch\af15\loch\f15     task haltreq;
\par \hich\af2\dbch\af15\loch\f15     forever begin
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             i\hich\af2\dbch\af15\loch\f15 f(validint) begin
\par \hich\af2\dbch\af15\loch\f15                 haltff = 0;
\par \hich\af2\dbch\af15\loch\f15                 interrupt;
\par \hich\af2\dbch\af15\loch\f15                 disable haltreq;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             else begin
\par \hich\af2\dbch\af15\loch\f15                 while(hold) @ec2 hldaff = 1;
\par \hich\af2\dbch\af15\loch\f15                 hldaff = 0;
\par \hich\af2\dbch\af15\loch\f15                 @ec2;
\par \hich\af2\dbch\af15\loch\f15             end
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec1 #10
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15             acontrol = 0;
\par \hich\af2\dbch\af15\loch\f15             checkint;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* memory read */
\par \hich\af2\dbch\af15\loch\f15     task memread;
\par \hich\af2\dbch\af15\loch\f15     output[7:0] rdata;
\par \hich\af2\dbch\af15\loch\f15     input[15:0] raddr;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             addr = raddr;
\par \hich\af2\dbch\af15\loch\f15         \hich\af2\dbch\af15\loch\f15     s = 0;
\par \hich\af2\dbch\af15\loch\f15             acontrol = 1;
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 1;
\par \hich\af2\dbch\af15\loch\f15             iomff = int;
\par \hich\af2\dbch\af15\loch\f15             s0ff = int;
\par \hich\af2\dbch\af15\loch\f15             s1ff = 1;
\par \hich\af2\dbch\af15\loch\f15             aleff = 1;
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             aleff = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec1 
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15             if(int)
\par \hich\af2\dbch\af15\loch\f15   \hich\af2\dbch\af15\loch\f15               intaff = 0;
\par \hich\af2\dbch\af15\loch\f15             else
\par \hich\af2\dbch\af15\loch\f15                 read = 0;
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             ready_hold;
\par \hich\af2\dbch\af15\loch\f15             checkint;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             intaff = 1;
\par \hich\af2\dbch\af15\loch\f15             read = 1;
\par \hich\af2\dbch\af15\loch\f15             rdata = ad;
\par \hich\af2\dbch\af15\loch\f15         if(holdff) holdit;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endta\hich\af2\dbch\af15\loch\f15 sk
\par 
\par \hich\af2\dbch\af15\loch\f15     /* memory write */
\par \hich\af2\dbch\af15\loch\f15     task memwrite;
\par \hich\af2\dbch\af15\loch\f15     input[7:0] wdata;
\par \hich\af2\dbch\af15\loch\f15     input[15:0] waddr;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             aleff = 1;
\par \hich\af2\dbch\af15\loch\f15             s0ff = 1;
\par \hich\af2\dbch\af15\loch\f15             s1ff = 0;
\par \hich\af2\dbch\af15\loch\f15             s = 0;
\par \hich\af2\dbch\af15\loch\f15             iomff = 0;
\par \hich\af2\dbch\af15\loch\f15             addr = waddr;
\par \hich\af2\dbch\af15\loch\f15        \hich\af2\dbch\af15\loch\f15      acontrol = 1;
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 1;
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             aleff = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             data = wdata;
\par \hich\af2\dbch\af15\loch\f15             write = 0;
\par \hich\af2\dbch\af15\loch\f15             s = 1;
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             ready_hold;
\par \hich\af2\dbch\af15\loch\f15             checkint;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             write = \hich\af2\dbch\af15\loch\f15 1;
\par \hich\af2\dbch\af15\loch\f15         if(holdff) holdit;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* reads from an i/o port */
\par \hich\af2\dbch\af15\loch\f15     task ioread;
\par \hich\af2\dbch\af15\loch\f15     input[7:0] sa;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             aleff = 1;
\par \hich\af2\dbch\af15\loch\f15             s0ff = 0;
\par \hich\af2\dbch\af15\loch\f15             s1ff = 1;
\par \hich\af2\dbch\af15\loch\f15             s = 0;
\par \hich\af2\dbch\af15\loch\f15             iomff = 1;
\par \hich\af2\dbch\af15\loch\f15     \hich\af2\dbch\af15\loch\f15         addr = \{sa, sa\};
\par \hich\af2\dbch\af15\loch\f15             acontrol = 1;
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 1;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             aleff = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15             if(int)
\par \hich\af2\dbch\af15\loch\f15                 intaff = 0;
\par \hich\af2\dbch\af15\loch\f15             else
\par \hich\af2\dbch\af15\loch\f15                 read = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         @e\hich\af2\dbch\af15\loch\f15 c2
\par \hich\af2\dbch\af15\loch\f15             ready_hold;
\par 
\par \hich\af2\dbch\af15\loch\f15             checkint;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             intaff = 1;
\par \hich\af2\dbch\af15\loch\f15             read = 1;
\par \hich\af2\dbch\af15\loch\f15             acc = ad;
\par \hich\af2\dbch\af15\loch\f15             if(dflags[2])
\par \hich\af2\dbch\af15\loch\f15                 $display("IN %h   data = %h", sa, acc);
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* writes into i/\hich\af2\dbch\af15\loch\f15 o port */
\par \hich\af2\dbch\af15\loch\f15     task iowrite;
\par \hich\af2\dbch\af15\loch\f15     input[7:0] sa;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             addr = \{sa, sa\};
\par \hich\af2\dbch\af15\loch\f15             aleff = 1;
\par \hich\af2\dbch\af15\loch\f15             s0ff = 1;
\par \hich\af2\dbch\af15\loch\f15             s1ff = 0;
\par \hich\af2\dbch\af15\loch\f15             s = 0;
\par \hich\af2\dbch\af15\loch\f15             iomff = 1;
\par \hich\af2\dbch\af15\loch\f15             acontrol = 1;
\par \hich\af2\dbch\af15\loch\f15             dcontrol =\hich\af2\dbch\af15\loch\f15  1;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             aleff = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             data = acc;
\par \hich\af2\dbch\af15\loch\f15             write = 0;
\par \hich\af2\dbch\af15\loch\f15             s = 1;
\par 
\par \hich\af2\dbch\af15\loch\f15             if(dflags[2])
\par \hich\af2\dbch\af15\loch\f15                 $display("OUT %h   data = %h", sa, acc);
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             ready_hold;
\par 
\par \hich\af2\dbch\af15\loch\f15             \hich\af2\dbch\af15\loch\f15 checkint;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2
\par \hich\af2\dbch\af15\loch\f15             write = 1;
\par \hich\af2\dbch\af15\loch\f15             if(holdff) holdit;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     task interrupt;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         @ec1
\par \hich\af2\dbch\af15\loch\f15             if(hold) begin
\par \hich\af2\dbch\af15\loch\f15                 holdff = 1;
\par \hich\af2\dbch\af15\loch\f15                 holdit;
\par \hich\af2\dbch\af15\loch\f15                 @ec2 hldaff = 1;
\par \hich\af2\dbch\af15\loch\f15   \hich\af2\dbch\af15\loch\f15           end
\par \hich\af2\dbch\af15\loch\f15             if(trapff) begin
\par \hich\af2\dbch\af15\loch\f15                 inte = intmask[3];
\par \hich\af2\dbch\af15\loch\f15                 trapi = 1;
\par \hich\af2\dbch\af15\loch\f15                 intic;
\par \hich\af2\dbch\af15\loch\f15                 pc = 'h24;
\par \hich\af2\dbch\af15\loch\f15                 trapi = 1;
\par \hich\af2\dbch\af15\loch\f15                 trapff = 0;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             else if(intmask[7]\hich\af2\dbch\af15\loch\f15 ) begin
\par \hich\af2\dbch\af15\loch\f15                 intic;
\par \hich\af2\dbch\af15\loch\f15                 pc = 'h3c;
\par \hich\af2\dbch\af15\loch\f15                 intmask[7] = 0;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             else if(intmask[6]) begin
\par \hich\af2\dbch\af15\loch\f15                 intic;
\par \hich\af2\dbch\af15\loch\f15                 pc = 'h34;
\par \hich\af2\dbch\af15\loch\f15                 intmask[6] = 0;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             el\hich\af2\dbch\af15\loch\f15 se if(intmask[5]) begin
\par \hich\af2\dbch\af15\loch\f15                 intic;
\par \hich\af2\dbch\af15\loch\f15                 pc = 'h2c;
\par \hich\af2\dbch\af15\loch\f15                 intmask[5] = 0;
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15             else if(intr) begin
\par \hich\af2\dbch\af15\loch\f15                 //?
\par \hich\af2\dbch\af15\loch\f15             end
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     task intic;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         aleff = 1;
\par \hich\af2\dbch\af15\loch\f15         s0ff = 1;
\par \hich\af2\dbch\af15\loch\f15         s1ff = 1;
\par \hich\af2\dbch\af15\loch\f15         s = 0;
\par \hich\af2\dbch\af15\loch\f15         iomff = 1;
\par \hich\af2\dbch\af15\loch\f15         addr = pc;
\par \hich\af2\dbch\af15\loch\f15         read = 1;
\par \hich\af2\dbch\af15\loch\f15         write = 1;
\par \hich\af2\dbch\af15\loch\f15         acontrol = 1;
\par \hich\af2\dbch\af15\loch\f15         dcontrol = 1;
\par 
\par \hich\af2\dbch\af15\loch\f15         @ec2 aleff = 0;
\par \hich\af2\dbch\af15\loch\f15         @ec1 dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15         repeat(4) @ec1;
\par \hich\af2\dbch\af15\loch\f15         pu\hich\af2\dbch\af15\loch\f15 sh2b(pc[15:8], pc[7:0]);
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* execute instruction */
\par \hich\af2\dbch\af15\loch\f15     task do_instruction;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15       if(dflags[1])
\par \hich\af2\dbch\af15\loch\f15         $display( "C%bZ%bM%bE%bI%b A=%h B=%h%h D=%h%h H=%h%h S=%h P=%h IR=%h",
\par \hich\af2\dbch\af15\loch\f15                   cc, cz, cs, cp, cac, acc, r\hich\af2\dbch\af15\loch\f15 egb,regc, regd,rege, regh,regl,
\par \hich\af2\dbch\af15\loch\f15                   sp, pc, ir);
\par 
\par \hich\af2\dbch\af15\loch\f15         pc = pc + 1;
\par \hich\af2\dbch\af15\loch\f15         @ec2 // instruction decode synchronized with clock 2 event
\par \hich\af2\dbch\af15\loch\f15             case(ir[7:6])
\par \hich\af2\dbch\af15\loch\f15                 0:
\par \hich\af2\dbch\af15\loch\f15                     case(ir[2:0])
\par \hich\af2\dbch\af15\loch\f15                         0\hich\af2\dbch\af15\loch\f15 : newops;
\par \hich\af2\dbch\af15\loch\f15                         1: if(ir[3]) addhl; else lrpi;
\par \hich\af2\dbch\af15\loch\f15                         2: sta_lda;
\par \hich\af2\dbch\af15\loch\f15                         3: inx_dcx;
\par \hich\af2\dbch\af15\loch\f15                         4: inr;
\par \hich\af2\dbch\af15\loch\f15                         5: dcr;
\par \hich\af2\dbch\af15\loch\f15                         6: movi;
\par \hich\af2\dbch\af15\loch\f15                       \hich\af2\dbch\af15\loch\f15   7: racc_spec;
\par \hich\af2\dbch\af15\loch\f15                     endcase
\par \hich\af2\dbch\af15\loch\f15                 1:
\par \hich\af2\dbch\af15\loch\f15                     move;
\par \hich\af2\dbch\af15\loch\f15                 2:
\par \hich\af2\dbch\af15\loch\f15                     rmop;
\par \hich\af2\dbch\af15\loch\f15                 3:
\par \hich\af2\dbch\af15\loch\f15                     case(ir[2:0])
\par \hich\af2\dbch\af15\loch\f15                         0,
\par \hich\af2\dbch\af15\loch\f15                         2,
\par \hich\af2\dbch\af15\loch\f15                \hich\af2\dbch\af15\loch\f15          4: condjcr;
\par \hich\af2\dbch\af15\loch\f15                         1: if(ir[3]) decode1; else pop;
\par \hich\af2\dbch\af15\loch\f15                         3: decode2;
\par \hich\af2\dbch\af15\loch\f15                         5: if(ir[3]) decode3; else push;
\par \hich\af2\dbch\af15\loch\f15                         6: immacc;
\par \hich\af2\dbch\af15\loch\f15                         7: restart;
\par \hich\af2\dbch\af15\loch\f15                \hich\af2\dbch\af15\loch\f15      endcase
\par \hich\af2\dbch\af15\loch\f15             endcase
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* move register to register */
\par \hich\af2\dbch\af15\loch\f15     task move;
\par \hich\af2\dbch\af15\loch\f15         case(ir[2:0])
\par \hich\af2\dbch\af15\loch\f15             0: rmov(regb); // MOV -,B
\par \hich\af2\dbch\af15\loch\f15             1: rmov(regc); // MOV -,C
\par \hich\af2\dbch\af15\loch\f15             2: rmov(regd); // MOV -,D
\par \hich\af2\dbch\af15\loch\f15             3: \hich\af2\dbch\af15\loch\f15 rmov(rege); // MOV -,E
\par \hich\af2\dbch\af15\loch\f15             4: rmov(regh); // MOV -,H
\par \hich\af2\dbch\af15\loch\f15             5: rmov(regl); // MOV -,L
\par \hich\af2\dbch\af15\loch\f15             6:
\par \hich\af2\dbch\af15\loch\f15                 if(ir[5:3] == 6) haltff = 1; // HLT
\par \hich\af2\dbch\af15\loch\f15                 else begin // MOV -,M
\par \hich\af2\dbch\af15\loch\f15                     memread(data, \{regh, regl\});
\par \hich\af2\dbch\af15\loch\f15    \hich\af2\dbch\af15\loch\f15                  rmov(data);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             7: rmov(acc); // MOV -,A
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* enabled only by move */
\par \hich\af2\dbch\af15\loch\f15     task rmov;
\par \hich\af2\dbch\af15\loch\f15     input[7:0] fromreg;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: regb = fromreg; // MOV B,-
\par \hich\af2\dbch\af15\loch\f15       \hich\af2\dbch\af15\loch\f15       1: regc = fromreg; // MOV C,-
\par \hich\af2\dbch\af15\loch\f15             2: regd = fromreg; // MOV D,-
\par \hich\af2\dbch\af15\loch\f15             3: rege = fromreg; // MOV E,-
\par \hich\af2\dbch\af15\loch\f15             4: regh = fromreg; // MOV H,-
\par \hich\af2\dbch\af15\loch\f15             5: regl = fromreg; // MOV L,-
\par \hich\af2\dbch\af15\loch\f15             6: memwrite(fromreg, \{regh, regl\}); // M\hich\af2\dbch\af15\loch\f15 OV M,-
\par \hich\af2\dbch\af15\loch\f15             7: acc = fromreg; // MOV A,-
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* move register and memory immediate */
\par \hich\af2\dbch\af15\loch\f15     task movi;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: memread(regb, pc); // MVI B
\par \hich\af2\dbch\af15\loch\f15             1: memread(regc, pc); // MVI C
\par \hich\af2\dbch\af15\loch\f15  \hich\af2\dbch\af15\loch\f15            2: memread(regd, pc); // MVI D
\par \hich\af2\dbch\af15\loch\f15             3: memread(rege, pc); // MVI E
\par \hich\af2\dbch\af15\loch\f15             4: memread(regh, pc); // MVI H
\par \hich\af2\dbch\af15\loch\f15             5: memread(regl, pc); // MVI L
\par \hich\af2\dbch\af15\loch\f15             6: // MVI M
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     memread(data, pc);
\par \hich\af2\dbch\af15\loch\f15                     memwrite(data, \{regh, regl\});
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             7: memread(acc, pc); // MVI A
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15         pc = pc + 1;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* increment register and memory contents */
\par \hich\af2\dbch\af15\loch\f15     task inr;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: doinc(regb); // INR B
\par \hich\af2\dbch\af15\loch\f15             1: doinc(regc); // INR C
\par \hich\af2\dbch\af15\loch\f15             2: doinc(regd); // INR D
\par \hich\af2\dbch\af15\loch\f15             3: doinc(rege); // INR E
\par \hich\af2\dbch\af15\loch\f15             4: doinc(regh); // INR H
\par \hich\af2\dbch\af15\loch\f15             5: doinc(regl); // INR L
\par \hich\af2\dbch\af15\loch\f15             6: // INR M
\par \hich\af2\dbch\af15\loch\f15           \hich\af2\dbch\af15\loch\f15       begin
\par \hich\af2\dbch\af15\loch\f15                     memread(data, \{regh, regl\});
\par \hich\af2\dbch\af15\loch\f15                     doinc(data);
\par \hich\af2\dbch\af15\loch\f15                     memwrite(data, \{regh, regl\});
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             7: doinc(acc); // INR A
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* enabled only from i\hich\af2\dbch\af15\loch\f15 ncrm */
\par \hich\af2\dbch\af15\loch\f15     task doinc;
\par \hich\af2\dbch\af15\loch\f15     inout[7:0] sr;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         cac = sr[3:0] == 'b1111;
\par \hich\af2\dbch\af15\loch\f15         sr = sr + 1;
\par \hich\af2\dbch\af15\loch\f15         calpsz(sr);
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* decrement register and memory contents */
\par \hich\af2\dbch\af15\loch\f15     task dcr;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: dodec(re\hich\af2\dbch\af15\loch\f15 gb); // DCR B
\par \hich\af2\dbch\af15\loch\f15             1: dodec(regc); // DCR C
\par \hich\af2\dbch\af15\loch\f15             2: dodec(regd); // DCR D
\par \hich\af2\dbch\af15\loch\f15             3: dodec(rege); // DCR E
\par \hich\af2\dbch\af15\loch\f15             4: dodec(regh); // DCR H
\par \hich\af2\dbch\af15\loch\f15             5: dodec(regl); // DCR L
\par \hich\af2\dbch\af15\loch\f15             6: // DCR M
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15            \hich\af2\dbch\af15\loch\f15          memread(data, \{regh, regl\});
\par \hich\af2\dbch\af15\loch\f15                     dodec(data);
\par \hich\af2\dbch\af15\loch\f15                     memwrite(data, \{regh, regl\});
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             7: dodec(acc); // DCR A
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* enabled only from decrm */
\par \hich\af2\dbch\af15\loch\f15     task dodec;
\par \hich\af2\dbch\af15\loch\f15     inout[7:0] sr;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         cac = sr[3:0] == 0;
\par \hich\af2\dbch\af15\loch\f15         sr = sr - 1;
\par \hich\af2\dbch\af15\loch\f15         calpsz(sr);
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* register and memory acc instructions */
\par \hich\af2\dbch\af15\loch\f15     task rmop;
\par \hich\af2\dbch\af15\loch\f15         case(ir[2:0])
\par \hich\af2\dbch\af15\loch\f15             0: doacci(regb);
\par \hich\af2\dbch\af15\loch\f15             1: doacci(r\hich\af2\dbch\af15\loch\f15 egc);
\par \hich\af2\dbch\af15\loch\f15             2: doacci(regd);
\par \hich\af2\dbch\af15\loch\f15             3: doacci(rege);
\par \hich\af2\dbch\af15\loch\f15             4: doacci(regh);
\par \hich\af2\dbch\af15\loch\f15             5: doacci(regl);
\par \hich\af2\dbch\af15\loch\f15             6:
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     memread(data, \{regh, regl\});
\par \hich\af2\dbch\af15\loch\f15                     doacci(data);
\par \hich\af2\dbch\af15\loch\f15               \hich\af2\dbch\af15\loch\f15   end
\par 
\par \hich\af2\dbch\af15\loch\f15             7: doacci(acc);
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* immediate acc instructions */
\par \hich\af2\dbch\af15\loch\f15     task immacc;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         memread(data, pc);
\par \hich\af2\dbch\af15\loch\f15         pc = pc + 1;
\par \hich\af2\dbch\af15\loch\f15         doacci(data);
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* operate on accumulator */
\par \hich\af2\dbch\af15\loch\f15   \hich\af2\dbch\af15\loch\f15   task doacci;
\par \hich\af2\dbch\af15\loch\f15     input[7:0] sr;
\par \hich\af2\dbch\af15\loch\f15     reg[3:0] null4;
\par \hich\af2\dbch\af15\loch\f15     reg[7:0] null8;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: // ADD ADI
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     \{cac, null4\} = acc + sr;
\par \hich\af2\dbch\af15\loch\f15                     \{cc, acc\} = \{1'b0, acc\} + sr;
\par \hich\af2\dbch\af15\loch\f15                  \hich\af2\dbch\af15\loch\f15    calpsz(acc);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             1: // ADC ACI
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     \{cac, null4\} = acc + sr + cc;
\par \hich\af2\dbch\af15\loch\f15                     \{cc, acc\} = \{1'b0, acc\} + sr + cc;
\par \hich\af2\dbch\af15\loch\f15                     calpsz(acc);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             \hich\af2\dbch\af15\loch\f15 2: // SUB SUI
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     \{cac, null4\} = acc - sr;
\par \hich\af2\dbch\af15\loch\f15                     \{cc, acc\} = \{1'b0, acc\} - sr;
\par \hich\af2\dbch\af15\loch\f15                     calpsz(acc);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             3: // SBB SBI
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     \{ca\hich\af2\dbch\af15\loch\f15 c, null4\} = acc - sr - cc;
\par \hich\af2\dbch\af15\loch\f15                     \{cc, acc\} = \{1'b0, acc\} - sr - cc;
\par \hich\af2\dbch\af15\loch\f15                     calpsz(acc);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             4: // ANA ANI
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     acc = acc & sr;
\par \hich\af2\dbch\af15\loch\f15                     cac = 1;
\par \hich\af2\dbch\af15\loch\f15        \hich\af2\dbch\af15\loch\f15              cc = 0;
\par \hich\af2\dbch\af15\loch\f15                     calpsz(acc);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             5: // XRA XRI
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     acc = acc ^ sr;
\par \hich\af2\dbch\af15\loch\f15                     cac = 0;
\par \hich\af2\dbch\af15\loch\f15                     cc = 0;
\par \hich\af2\dbch\af15\loch\f15                     calpsz(acc);
\par \hich\af2\dbch\af15\loch\f15        \hich\af2\dbch\af15\loch\f15          end
\par 
\par \hich\af2\dbch\af15\loch\f15             6: // ORA ORI
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     acc = acc | sr;
\par \hich\af2\dbch\af15\loch\f15                     cac = 0;
\par \hich\af2\dbch\af15\loch\f15                     cc = 0;
\par \hich\af2\dbch\af15\loch\f15                     calpsz(acc);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             7: // CMP CPI
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     \{cac, null4\} = acc - sr;
\par \hich\af2\dbch\af15\loch\f15                     \{cc, null8\} = \{1'b0, acc\} - sr;
\par \hich\af2\dbch\af15\loch\f15                     calpsz(null8);
\par \hich\af2\dbch\af15\loch\f15                 end
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* rotate acc and special instructions */
\par \hich\af2\dbch\af15\loch\f15     task racc_spec;
\par \hich\af2\dbch\af15\loch\f15         \hich\af2\dbch\af15\loch\f15 case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: // RLC
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     acc = \{acc[6:0], acc[7]\};
\par \hich\af2\dbch\af15\loch\f15                     cc = acc[7];
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             1: // RRC
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     acc = \{acc[0], acc[7:1]\};
\par \hich\af2\dbch\af15\loch\f15         \hich\af2\dbch\af15\loch\f15             cc = acc[0];
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             2: // RAL
\par \hich\af2\dbch\af15\loch\f15                 \{cc, acc\} = \{acc, cc\};
\par 
\par \hich\af2\dbch\af15\loch\f15             3: // RAR
\par \hich\af2\dbch\af15\loch\f15                 \{acc, cc\} = \{cc, acc\};
\par 
\par \hich\af2\dbch\af15\loch\f15             4: // DAA, decimal adjust
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     if((ac\hich\af2\dbch\af15\loch\f15 c[3:0] > 9) || cac) acc = acc + 6;
\par \hich\af2\dbch\af15\loch\f15                     if((acc[7:4] > 9) || cc) \{cc, acc\} = \{1'b0, acc\} + 'h60;
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             5: // CMA
\par \hich\af2\dbch\af15\loch\f15                 acc = ~acc;
\par 
\par \hich\af2\dbch\af15\loch\f15             6: // STC
\par \hich\af2\dbch\af15\loch\f15                 cc = 1;
\par 
\par \hich\af2\dbch\af15\loch\f15             7: // CMC
\par \hich\af2\dbch\af15\loch\f15    \hich\af2\dbch\af15\loch\f15              cc = ~cc;
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* increment and decrement register pair */
\par \hich\af2\dbch\af15\loch\f15     task inx_dcx;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: \{regb, regc\} = \{regb, regc\} + 1; // INX B
\par \hich\af2\dbch\af15\loch\f15             1: \{regb, regc\} = \{regb, regc\} - 1; // DCX B
\par \hich\af2\dbch\af15\loch\f15  \hich\af2\dbch\af15\loch\f15            2: \{regd, rege\} = \{regd, rege\} + 1; // INX D
\par \hich\af2\dbch\af15\loch\f15             3: \{regd, rege\} = \{regd, rege\} - 1; // DCX D
\par \hich\af2\dbch\af15\loch\f15             4: \{regh, regl\} = \{regh, regl\} + 1; // INX H
\par \hich\af2\dbch\af15\loch\f15             5: \{regh, regl\} = \{regh, regl\} - 1; // DCX H
\par \hich\af2\dbch\af15\loch\f15             6: sp = sp + 1;  \hich\af2\dbch\af15\loch\f15                    // INX SP
\par \hich\af2\dbch\af15\loch\f15             7: sp = sp - 1;                     // DCX SP
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* load register pair immediate */
\par \hich\af2\dbch\af15\loch\f15     task lrpi;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:4])
\par \hich\af2\dbch\af15\loch\f15             0: adread(\{regb, regc\}); // LXI B
\par \hich\af2\dbch\af15\loch\f15             1: adr\hich\af2\dbch\af15\loch\f15 ead(\{regd, rege\}); // LXI D
\par \hich\af2\dbch\af15\loch\f15             2: adread(\{regh, regl\}); // LXI H
\par \hich\af2\dbch\af15\loch\f15             3: adread(sp);           // LXI SP
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* add into regh, regl pair */
\par \hich\af2\dbch\af15\loch\f15     task addhl;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:4])
\par \hich\af2\dbch\af15\loch\f15             0: \{cc, re\hich\af2\dbch\af15\loch\f15 gh, regl\} = \{1'b0, regh, regl\} + \{regb, regc\}; // DAD B
\par \hich\af2\dbch\af15\loch\f15             1: \{cc, regh, regl\} = \{1'b0, regh, regl\} + \{regd, rege\}; // DAD D
\par \hich\af2\dbch\af15\loch\f15             2: \{cc, regh, regl\} = \{1'b0, regh, regl\} + \{regh, regl\}; // DAD H
\par \hich\af2\dbch\af15\loch\f15             3: \{cc, regh, regl\} = \{1'b0, reg\hich\af2\dbch\af15\loch\f15 h, regl\} + sp;           // DAD SP
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15         holdreq;
\par \hich\af2\dbch\af15\loch\f15         holdreq;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* store and load instruction */
\par \hich\af2\dbch\af15\loch\f15     task sta_lda;
\par \hich\af2\dbch\af15\loch\f15     reg[15:0] ra;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: memwrite(acc, \{regb, regc\}); // STAX B
\par \hich\af2\dbch\af15\loch\f15             1: memread(acc, \{regb, regc\});  // LDAX B
\par \hich\af2\dbch\af15\loch\f15             2: memwrite(acc, \{regd, rege\}); // STAX D
\par \hich\af2\dbch\af15\loch\f15             3: memread(acc, \{regd, rege\});  // LDAX D
\par 
\par \hich\af2\dbch\af15\loch\f15             4: // SHLD
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     adread(ra);
\par \hich\af2\dbch\af15\loch\f15                 \hich\af2\dbch\af15\loch\f15     memwrite(regl, ra);
\par \hich\af2\dbch\af15\loch\f15                     memwrite(regh, ra + 1);
\par \hich\af2\dbch\af15\loch\f15                 end
\par \hich\af2\dbch\af15\loch\f15             5: // LHLD
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     adread(ra);
\par \hich\af2\dbch\af15\loch\f15                     memread(regl, ra);
\par \hich\af2\dbch\af15\loch\f15                     memread(regh, ra + 1);
\par \hich\af2\dbch\af15\loch\f15          \hich\af2\dbch\af15\loch\f15        end
\par 
\par \hich\af2\dbch\af15\loch\f15             6: // STA
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     adread(ra);
\par \hich\af2\dbch\af15\loch\f15                     memwrite(acc, ra);
\par \hich\af2\dbch\af15\loch\f15                 end
\par \hich\af2\dbch\af15\loch\f15             7: // LDA
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     adread(ra);
\par \hich\af2\dbch\af15\loch\f15                     memread(acc, \hich\af2\dbch\af15\loch\f15 ra);
\par \hich\af2\dbch\af15\loch\f15                 end
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* push register pair from stack */
\par \hich\af2\dbch\af15\loch\f15     task push;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:4])
\par \hich\af2\dbch\af15\loch\f15             0: push2b(regb, regc); // PUSH B
\par \hich\af2\dbch\af15\loch\f15             1: push2b(regd, rege); // PUSH D
\par \hich\af2\dbch\af15\loch\f15             2: push2b(regh, regl); \hich\af2\dbch\af15\loch\f15 // PUSH H
\par \hich\af2\dbch\af15\loch\f15             3: push2b(acc, \{cs,cz,1'b1,cac,1'b1,cp,1'b1,cc\}); // PUSH PSW
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* push 2 bytes onto stack */
\par \hich\af2\dbch\af15\loch\f15     task push2b;
\par \hich\af2\dbch\af15\loch\f15     input[7:0] highb, lowb;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         sp = sp - 1;
\par \hich\af2\dbch\af15\loch\f15         memwrite(highb, sp);
\par \hich\af2\dbch\af15\loch\f15     \hich\af2\dbch\af15\loch\f15     sp = sp - 1;
\par \hich\af2\dbch\af15\loch\f15         memwrite(lowb, sp);
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* pop register pair from stack */
\par \hich\af2\dbch\af15\loch\f15     task pop;
\par \hich\af2\dbch\af15\loch\f15     reg null1;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:4])
\par \hich\af2\dbch\af15\loch\f15             0: pop2b(regb, regc); // POP B
\par \hich\af2\dbch\af15\loch\f15             1: pop2b(regd, rege); // POP D
\par \hich\af2\dbch\af15\loch\f15             2\hich\af2\dbch\af15\loch\f15 : pop2b(regh, regl); // POP H
\par \hich\af2\dbch\af15\loch\f15             3: pop2b(acc,
\par \hich\af2\dbch\af15\loch\f15                 \{cs, cz, null1, cac, null1, cp, null1, cc\}); // POP PSW
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* pop 2 bytes from stack */
\par \hich\af2\dbch\af15\loch\f15     task pop2b;
\par \hich\af2\dbch\af15\loch\f15     output[7:0] highb, lowb;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         mem\hich\af2\dbch\af15\loch\f15 read(lowb, sp);
\par \hich\af2\dbch\af15\loch\f15         sp = sp + 1;
\par \hich\af2\dbch\af15\loch\f15         memread(highb, sp);
\par \hich\af2\dbch\af15\loch\f15         sp = sp + 1;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* check hold request */
\par \hich\af2\dbch\af15\loch\f15     task holdreq;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         aleff = 0;
\par \hich\af2\dbch\af15\loch\f15         s0ff = 0;
\par \hich\af2\dbch\af15\loch\f15         s1ff = 1;
\par \hich\af2\dbch\af15\loch\f15         iomff = 0;
\par \hich\af2\dbch\af15\loch\f15         addr = pc;
\par \hich\af2\dbch\af15\loch\f15         if(hold) begin
\par \hich\af2\dbch\af15\loch\f15             holdff = 1;
\par \hich\af2\dbch\af15\loch\f15             acontrol = 0;
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15             @ec2 hldaff = 1;
\par \hich\af2\dbch\af15\loch\f15         end
\par \hich\af2\dbch\af15\loch\f15         else begin
\par \hich\af2\dbch\af15\loch\f15             acontrol = 1;
\par \hich\af2\dbch\af15\loch\f15             dcontrol = 1;
\par \hich\af2\dbch\af15\loch\f15         end
\par \hich\af2\dbch\af15\loch\f15         @ec1 dcontrol = 0;
\par \hich\af2\dbch\af15\loch\f15      \hich\af2\dbch\af15\loch\f15    @ec1 @ec2;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15     /* conditional jump, call and return instructions */
\par \hich\af2\dbch\af15\loch\f15     task condjcr;
\par \hich\af2\dbch\af15\loch\f15     reg branch;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: branch = !cz; // JNZ CNZ RNZ
\par \hich\af2\dbch\af15\loch\f15             1: branch = cz;  // JZ  CZ  RZ
\par \hich\af2\dbch\af15\loch\f15            \hich\af2\dbch\af15\loch\f15  2: branch = !cc; // JNC CNC RNC
\par \hich\af2\dbch\af15\loch\f15             3: branch = cc;  // JC  CC  RC
\par \hich\af2\dbch\af15\loch\f15             4: branch = !cp; // JPO CPO RPO
\par \hich\af2\dbch\af15\loch\f15             5: branch = cp;  // JPE CPE RPE
\par \hich\af2\dbch\af15\loch\f15             6: branch = !cs; // JP  CP  RP
\par \hich\af2\dbch\af15\loch\f15             7: branch = cs;  // JM  CM  RM
\par \hich\af2\dbch\af15\loch\f15       \hich\af2\dbch\af15\loch\f15   endcase
\par \hich\af2\dbch\af15\loch\f15         if(branch)
\par \hich\af2\dbch\af15\loch\f15             case(ir[2:0])
\par \hich\af2\dbch\af15\loch\f15                 0: // return
\par \hich\af2\dbch\af15\loch\f15                     pop2b(pc[15:8], pc[7:0]);
\par 
\par \hich\af2\dbch\af15\loch\f15                 2: // jump
\par \hich\af2\dbch\af15\loch\f15                     adread(pc);
\par 
\par \hich\af2\dbch\af15\loch\f15                 4: // call
\par \hich\af2\dbch\af15\loch\f15                     begin :call
\par \hich\af2\dbch\af15\loch\f15       \hich\af2\dbch\af15\loch\f15                   reg [15:0] newpc;
\par \hich\af2\dbch\af15\loch\f15                         adread(newpc);
\par \hich\af2\dbch\af15\loch\f15                         push2b(pc[15:8], pc[7:0]);
\par \hich\af2\dbch\af15\loch\f15                         pc = newpc;
\par \hich\af2\dbch\af15\loch\f15                     end
\par 
\par \hich\af2\dbch\af15\loch\f15                 default no_instruction;
\par \hich\af2\dbch\af15\loch\f15             endcase
\par \hich\af2\dbch\af15\loch\f15         e\hich\af2\dbch\af15\loch\f15 lse
\par \hich\af2\dbch\af15\loch\f15             case(ir[2:0])
\par \hich\af2\dbch\af15\loch\f15                 0: ;
\par \hich\af2\dbch\af15\loch\f15                 2, 4:
\par \hich\af2\dbch\af15\loch\f15                     begin
\par \hich\af2\dbch\af15\loch\f15                         memread(data, pc);
\par \hich\af2\dbch\af15\loch\f15                         pc = pc + 2;
\par \hich\af2\dbch\af15\loch\f15                     end
\par \hich\af2\dbch\af15\loch\f15                 default no_instruction;
\par \hich\af2\dbch\af15\loch\f15             e\hich\af2\dbch\af15\loch\f15 ndcase
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* restart instructions */
\par \hich\af2\dbch\af15\loch\f15     task restart;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         push2b(pc[15:8], pc[7:0]);
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: pc = 'h00; // RST 0
\par \hich\af2\dbch\af15\loch\f15             1: pc = 'h08; // RST 1
\par \hich\af2\dbch\af15\loch\f15             2: pc = 'h10; // RST 2
\par \hich\af2\dbch\af15\loch\f15       \hich\af2\dbch\af15\loch\f15       3: pc = 'h18; // RST 3
\par \hich\af2\dbch\af15\loch\f15             4: pc = 'h20; // RST 4
\par \hich\af2\dbch\af15\loch\f15             5: pc = 'h28; // RST 5
\par \hich\af2\dbch\af15\loch\f15             6: pc = 'h30; // RST 6
\par \hich\af2\dbch\af15\loch\f15             7: pc = 'h38; // RST 7
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* new instructions - except for NOP */
\par \hich\af2\dbch\af15\loch\f15     t\hich\af2\dbch\af15\loch\f15 ask newops;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: ; // NOP
\par 
\par \hich\af2\dbch\af15\loch\f15             4: // RIM
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     acc = \{sid, intmask[7:5], intmask[3:0]\};
\par \hich\af2\dbch\af15\loch\f15                     if(trapi) begin
\par \hich\af2\dbch\af15\loch\f15                         intmask[3] = inte;
\par \hich\af2\dbch\af15\loch\f15              \hich\af2\dbch\af15\loch\f15            trapi = 0;
\par \hich\af2\dbch\af15\loch\f15                     end
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             6: // SIM
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     if(acc[3]) begin
\par \hich\af2\dbch\af15\loch\f15                         intmask[2:0] = acc[2:0];
\par \hich\af2\dbch\af15\loch\f15                         intmask[6:5] = intmask[6:5] & acc[1\hich\af2\dbch\af15\loch\f15 :0];
\par \hich\af2\dbch\af15\loch\f15                     end
\par \hich\af2\dbch\af15\loch\f15                     intmask[8] = acc[4];
\par \hich\af2\dbch\af15\loch\f15                     if(acc[6]) @ec1 @ec1 @ec2 sodff = acc[7];
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             default no_instruction;
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* decode 1 instructions */
\par \hich\af2\dbch\af15\loch\f15     t\hich\af2\dbch\af15\loch\f15 ask decode1;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:4])
\par \hich\af2\dbch\af15\loch\f15             0: pop2b(pc[15:8], pc[7:0]); // RET
\par \hich\af2\dbch\af15\loch\f15             2: pc = \{regh, regl\}; // PCHL
\par \hich\af2\dbch\af15\loch\f15             3: sp = \{regh, regl\}; // SPHL
\par \hich\af2\dbch\af15\loch\f15             default no_instruction;
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* decode 2 instruc\hich\af2\dbch\af15\loch\f15 tions */
\par \hich\af2\dbch\af15\loch\f15     task decode2;
\par \hich\af2\dbch\af15\loch\f15     reg[7:0] saveh, savel;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:3])
\par \hich\af2\dbch\af15\loch\f15             0: adread(pc); // JMP
\par 
\par \hich\af2\dbch\af15\loch\f15             2: // OUT
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     memread(data, pc);
\par \hich\af2\dbch\af15\loch\f15                     pc = pc + 1;
\par \hich\af2\dbch\af15\loch\f15                     iowrite(d\hich\af2\dbch\af15\loch\f15 ata);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             3: // IN
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     memread(data, pc);
\par \hich\af2\dbch\af15\loch\f15                     pc = pc + 1;
\par \hich\af2\dbch\af15\loch\f15                     ioread(data);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             4: // XTHL
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15               \hich\af2\dbch\af15\loch\f15       saveh = regh;
\par \hich\af2\dbch\af15\loch\f15                     savel = regl;
\par \hich\af2\dbch\af15\loch\f15                     pop2b(regh, regl);
\par \hich\af2\dbch\af15\loch\f15                     push2b(saveh, savel);
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             5: // XCHG
\par \hich\af2\dbch\af15\loch\f15                 begin
\par \hich\af2\dbch\af15\loch\f15                     saveh = regh;
\par \hich\af2\dbch\af15\loch\f15                     s\hich\af2\dbch\af15\loch\f15 avel = regl;
\par \hich\af2\dbch\af15\loch\f15                     regh = regd;
\par \hich\af2\dbch\af15\loch\f15                     regl = rege;
\par \hich\af2\dbch\af15\loch\f15                     regd = saveh;
\par \hich\af2\dbch\af15\loch\f15                     rege = savel;
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             6: // DI, disable interrupt
\par \hich\af2\dbch\af15\loch\f15                 \{intmask[6:5], intmask[3]\} = 0;
\par 
\par \hich\af2\dbch\af15\loch\f15             7: // EI, enable interrupt
\par \hich\af2\dbch\af15\loch\f15                 intmask[3] = 1;
\par 
\par \hich\af2\dbch\af15\loch\f15             default no_instruction;
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* decode 3 instructions */
\par \hich\af2\dbch\af15\loch\f15     task decode3;
\par \hich\af2\dbch\af15\loch\f15         case(ir[5:4])
\par \hich\af2\dbch\af15\loch\f15             0: // CALL
\par \hich\af2\dbch\af15\loch\f15                 begin \hich\af2\dbch\af15\loch\f15 :call
\par \hich\af2\dbch\af15\loch\f15                     reg [15:0] newpc;
\par \hich\af2\dbch\af15\loch\f15                     adread(newpc);
\par \hich\af2\dbch\af15\loch\f15                     push2b(pc[15:8], pc[7:0]);
\par \hich\af2\dbch\af15\loch\f15                     pc = newpc;
\par \hich\af2\dbch\af15\loch\f15                 end
\par 
\par \hich\af2\dbch\af15\loch\f15             default no_instruction;
\par \hich\af2\dbch\af15\loch\f15         endcase
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* fetc\hich\af2\dbch\af15\loch\f15 h address from pc+1, pc+2 */
\par \hich\af2\dbch\af15\loch\f15     task adread;
\par \hich\af2\dbch\af15\loch\f15     output[15:0] address;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         memread(address[7:0], pc);
\par \hich\af2\dbch\af15\loch\f15         pc = pc + 1;
\par \hich\af2\dbch\af15\loch\f15         memread(address[15:8], pc);
\par \hich\af2\dbch\af15\loch\f15         if(!int) pc = pc + 1;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* calculate cp cs and cz \hich\af2\dbch\af15\loch\f15 */
\par \hich\af2\dbch\af15\loch\f15     task calpsz;
\par \hich\af2\dbch\af15\loch\f15     input[7:0] tr;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         cp = ^tr;
\par \hich\af2\dbch\af15\loch\f15         cz = tr == 0;
\par \hich\af2\dbch\af15\loch\f15         cs = tr[7];
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* undefined instruction */
\par \hich\af2\dbch\af15\loch\f15     task no_instruction;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         $display("Undefined instruction");
\par \hich\af2\dbch\af15\loch\f15         dumpsta\hich\af2\dbch\af15\loch\f15 te;
\par \hich\af2\dbch\af15\loch\f15         $finish;
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par 
\par \hich\af2\dbch\af15\loch\f15     /* print the state of the 8085a */
\par \hich\af2\dbch\af15\loch\f15     task dumpstate;
\par \hich\af2\dbch\af15\loch\f15     begin
\par \hich\af2\dbch\af15\loch\f15         $write( "\\nDUMP OF 8085A REGISTERS\\n",
\par \hich\af2\dbch\af15\loch\f15             "acc=%h regb=%h regc=%h regd=%h rege=%h regh=%h regl=%h\\n",
\par \hich\af2\dbch\af15\loch\f15                 acc, regb\hich\af2\dbch\af15\loch\f15 , regc, regd, rege, regh, regl,
\par \hich\af2\dbch\af15\loch\f15             "cs=%h cz=%h cac=%h cp=%h cc=%h\\n",
\par \hich\af2\dbch\af15\loch\f15                 cs, cz, cac, cp, cc,
\par \hich\af2\dbch\af15\loch\f15             "pc=%h sp=%h addr=%h ir=%h data=%h\\n",
\par \hich\af2\dbch\af15\loch\f15                 pc, sp, ir, addr, data,
\par \hich\af2\dbch\af15\loch\f15             "intmask=%h aleff=%h s0ff=%h s1ff=%h\hich\af2\dbch\af15\loch\f15  hldaff=%h holdff=%h\\n",
\par \hich\af2\dbch\af15\loch\f15                 intmask, aleff, s0ff, s1ff, hldaff, holdff,
\par \hich\af2\dbch\af15\loch\f15             "intaff=%h trapff=%h trapi=%h inte=%h int=%h validint=%h\\n",
\par \hich\af2\dbch\af15\loch\f15                 intaff, trapff, trapi, inte, int, validint,
\par \hich\af2\dbch\af15\loch\f15             "haltff=%h resetff=%h cloc\hich\af2\dbch\af15\loch\f15 kff=%h sodff=%h\\n",
\par \hich\af2\dbch\af15\loch\f15                 haltff, resetff, clockff, sodff,
\par \hich\af2\dbch\af15\loch\f15             "read=%h write=%h iomff=%h acontrol=%h dcontrol=%h s=%h\\n",
\par \hich\af2\dbch\af15\loch\f15                 read, write, iomff, acontrol, dcontrol, s,
\par \hich\af2\dbch\af15\loch\f15             "clock=%h x2=%h sid=%h trap=%h rst7p5=%h rst\hich\af2\dbch\af15\loch\f15 6p5=%h rst5p5=%h\\n",
\par \hich\af2\dbch\af15\loch\f15                 clock, x2, sid, trap, rst7p5, rst6p5, rst5p5,
\par \hich\af2\dbch\af15\loch\f15             "intr=%h nreset=%h hold=%h ready=%h a=%h ad=%h\\n\\n",
\par \hich\af2\dbch\af15\loch\f15                 intr, nreset, hold, ready, a, ad,
\par \hich\af2\dbch\af15\loch\f15             "instructions executed = %d\\n\\n", \hich\af2\dbch\af15\loch\f15 instruction);
\par \hich\af2\dbch\af15\loch\f15     end
\par \hich\af2\dbch\af15\loch\f15     endtask
\par 
\par \hich\af2\dbch\af15\loch\f15 endmodule /* of i85 */  
\par 
\par }{\loch\af15\hich\af2\dbch\f15 \'c9\'cf\'c3\'e6\'c1\'bd\'b8\'f6\'c0\'fd\'d7\'d3\'ca\'c7\'b3\'a3\'d3\'c3\'b5\'c4\'ce\'a2\'b4\'a6\'c0\'ed\'bb\'fa}{\hich\af2\dbch\af15\loch\f15 CPU}{\loch\af15\hich\af2\dbch\f15 \'ba\'cd\'cd\'e2\'ce\'a7\'d0\'be\'c6\'ac
\'a1\'a3\'d4\'da\'cf\'b5\'cd\'b3\'d0\'be\'c6\'ac\'b5\'c4\'c9\'e8\'bc\'c6\'d6\'d0\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'d3\'c3\'d0\'e9\'c4\'e2\'c4\'a3\'d0\'cd\'c0\'b4\'b4\'fa\'cc\'e6\'d5\'e6\'ca\'b5\'b5\'c4\'c6\'f7\'bc\'fe\'b6\'d4\'d7\'d4\'bc\'ba
\'cb\'f9\'c9\'e8\'bc\'c6\'b5\'c4\'b5\'e7\'c2\'b7\'b9\'a6\'c4\'dc\'bd\'f8\'d0\'d0\'b7\'c2\'d5\'e6\'a3\'ac\'c8\'ab\'c3\'e6\'be\'ab\'c8\'b7\'b5\'d8\'d1\'e9\'d6\'a4\'d7\'d4\'bc\'ba\'cb\'f9\'c9\'e8\'bc\'c6\'b5\'c4\'b2\'bf\'b7\'d6\'ca\'c7\'b7\'f1\'d5\'fd
\'c8\'b7\'a1\'a3\'d4\'da}{\hich\af2\dbch\af15\loch\f15 ASIC}{\loch\af15\hich\af2\dbch\f15 \'b5\'c4\'d6\'c6\'d4\'ec\'b9\'fd\'b3\'cc\'d6\'d0\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'c0\'fb\'d3\'c3\'cf\'d6\'b4\'e6\'b5\'c4\'d3\'eb\'d6\'ae\'b6\'d4\'d3\'a6\'b5\'c4
\'c3\'c5\'bc\'b6\'bd\'e1\'b9\'b9\'b5\'c4\'b5\'e7\'c2\'b7\'ca\'b5\'cc\'e5\'c0\'b4\'ca\'b5\'cf\'d6\'b5\'e7\'c2\'b7\'b5\'c4\'b9\'a6\'c4\'dc\'a1\'a3\'d5\'e2\'d1\'f9\'be\'cd\'c4\'dc\'d3\'c3\'bd\'cf\'bf\'ec\'b5\'c4\'cb\'d9\'b6\'c8\'b0\'d1\'d0\'ed\'b6\'e0
\'c8\'cb\'b5\'c4\'c0\'cd\'b6\'af\'b3\'c9\'b9\'fb\'bc\'af\'ba\'cf\'d4\'da\'d2\'bb\'c6\'f0\'a3\'ac\'b0\'d1\'d2\'bb\'b8\'f6\'bc\'ab\'c6\'e4\'b8\'b4\'d4\'d3\'b5\'c4\'ca\'fd\'d7\'d6\'cf\'b5\'cd\'b3\'bc\'af\'b3\'c9\'d4\'da\'d2\'bb\'b8\'f6\'ba\'dc\'d0\'a1
\'b5\'c4\'b9\'e8\'c6\'ac\'c9\'cf\'a1\'a3}{
\par 
\par 
\par }{\b \loch\af15\hich\af2\dbch\f15 \'cb\'bc\'bf\'bc\'cc\'e2\'a3\'ba}{\b 
\par {\pntext\pard\plain\s31 \fs21\kerning2\hich\af2 \hich\af2\dbch\af15\loch\f15 1)\tab}}\pard \s31\qj\fi-425\li425\nowidctlpar\jclisttab\tx425{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec\pnb0\pni0\pnf15\pnfs21\pnstart1\pnindent425\pnhang{\pntxta \dbch )}}
\aspalpha\aspnum\faroman\ls1 {\loch\af15\hich\af2\dbch\f15 \'ce\'aa\'ca\'b2\'c3\'b4\'d2\'aa\'c9\'e8\loch\af15\hich\af2\dbch\f15 \'bc\'c6\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'a3\'bf}{
\par {\pntext\pard\plain\s31 \fs21\kerning2\hich\af2 \hich\af2\dbch\af15\loch\f15 2)\tab}}\pard \s31\qj\fi-425\li425\nowidctlpar\jclisttab\tx425{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec\pnb0\pni0\pnf15\pnfs21\pnstart1\pnindent425\pnhang{\pntxta \dbch )}}
\aspalpha\aspnum\faroman\ls1 {\loch\af15\hich\af2\dbch\f15 \'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'d3\'d0\'bc\'b8\'d6\'d6\'c0\'e0\'d0\'cd\'a3\'bf}{
\par {\pntext\pard\plain\s31 \fs21\kerning2\hich\af2 \hich\af2\dbch\af15\loch\f15 3)\tab}}\pard \s31\qj\fi-425\li425\nowidctlpar\jclisttab\tx425{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec\pnb0\pni0\pnf15\pnfs21\pnstart1\pnindent425\pnhang{\pntxta \dbch )}}
\aspalpha\aspnum\faroman\ls1 {\loch\af15\hich\af2\dbch\f15 \'ce\'aa\'ca\'b2\'c3\'b4\'d4\'da}{\hich\af2\dbch\af15\loch\f15 ASIC}{\loch\af15\hich\af2\dbch\f15 \'c9\'e8\'bc\'c6\'d6\'d0\'d2\'aa\'be\'a1\'c1\'bf\'c0\'fb\'d3\'c3\'c9\'cc\'d2\'b5\'bb\'af\'b5\'c4
\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'ba\'cd}{\hich\af2\dbch\af15\loch\f15 IP?
\par {\pntext\pard\plain\s31 \fs21\kerning2\hich\af2 \hich\af2\dbch\af15\loch\f15 4)\tab}}\pard \s31\qj\fi-425\li425\nowidctlpar\jclisttab\tx425{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec\pnb0\pni0\pnf15\pnfs21\pnstart1\pnindent425\pnhang{\pntxta \dbch )}}
\aspalpha\aspnum\faroman\ls1 {\loch\af15\hich\af2\dbch\f15 \'ce\'aa\'ca\'b2\'c3\'b4\'cb\'b5\'b1\'e0\'d0\'b4\'cd\'ea\'d5\'fb\'be\'ab\'c8\'b7\'b5\'c4\'d0\'e9\'c4\'e2\'c4\'a3\'bf\'e9\'a3\'ac\'b1\'e0\'d0\'b4\'d5\'df\'b2\'bb\'b5\'ab\'d0\'e8\'d2\'aa\'c8\'ab
\'c3\'e6\'ca\'ec\'c1\'b7\'b5\'d8\'d5\'c6\'ce\'d5}{\hich\af2\dbch\af15\loch\f15 Verilog}{\loch\af15\hich\af2\dbch\f15 \'d3\'ef\'d1\'d4\'a3\'ac\'bb\'b9\'d0\'e8\'d2\'aa\'d3\'d0\'b8\'df\'b6\'c8\'b5\'c4\'d4\'f0\'c8\'ce\'d0\'d4\'a3\'ac\'b2\'a2\'c7\'d2\'d0\'e8
\'d2\'aa\'d3\'d0\'d2\'bb\'b8\'f6\'d1\'cf\'b8\'f1\'b5\'c4\'d6\'ca\'c1\'bf\'b1\'a3\'d6\'a4\'cc\'e5\'cf\'b5\'c0\'b4\'c8\'b7\'b1\'a3\'d3\'eb\'b9\'a4\'d2\'d5\'b5\'c4\'b5\'e7\'c2\'b7\'b5\'c4\'d2\'bb\'d6\'c2\'d0\'d4\'a3\'bf}{\hich\af2\dbch\af15\loch\f15  
\par }}