// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/22/2020 18:36:47"
                                                                                
// Verilog Test Bench template for design : exp3_1
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module exp3_1_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg [8:0] SW;
// wires                                               
wire [6:0]  LEDR;

// assign statements (if any)                          
exp3_1 i1 (
// port map - connection between master ports and signals/registers   
	.LEDR(LEDR),
	.SW(SW)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin
                          
   SW[0]=1'b0; SW[4:1]=4'b0000; SW[8:5]=4'b0011; #20;
// 0 + 3 = 3 = 4'b0011; cf = 0; of = 0; zf = 0;
	SW[0]=1'b1;												 #20;
// 0 - 3 = -3 = 4'b1101; cf = 0; of = 0; zf = 0;
	SW[0]=1'b0; SW[4:1]=4'b0111;						 #20;
// 7 + 3 = 10 = 4'b1010; cf = 0; of = 1; zf = 0;
	SW[0]=1'b1;												 #20;
// 7 - 3 = 4 = 4'b0100; cf = 1; of = 0; zf = 0;
	SW[0]=1'b0;						  SW[8:5]=4'b1111; #20;
// 7 + (-1) = 6 = 4'b0110; cf = 1; of = 0; zf = 0;
	SW[0]=1'b1;			 								    #20;
// 7 - (-1) = 8 = 4'b1000; cf = 0; of = 1; zf = 0;
	SW[0]=1'b0;	SW[4:1]=4'b1000;						 #20;
// (-8) + (-1) = -9 = 4'b0111; cf = 1; of = 1; zf = 0;
	SW[0]=1'b1;												 #20;
// (-8) - (-1) = -7 = 4'b1001; cf = 0; of = 0; zf = 0;
										  SW[8:5]=4'b0000; #20;
// (-8) - 0 = -8 = 4'b1000; cf = 0; of = 0; zf = 0;
	SW[0]=1'b0; 					  SW[8:5]=4'b1000; #20;
// (-8) + (-8) = -16 = 4'b0000; cf = 1; of = 1; zf = 1;
					SW[4:1]=4'b0111;						 #20;
// 7 + (-8) = -1 = 4'b1111; cf = 0; of = 0; zf = 0;
	SW[0]=1'b1;												 #20;
// 7 - (-8) = 15 = 4'b1111; cf = 0; of = 1; zf = 0;
										  SW[8:5]=4'b0111; #20;
// 7 - 7 = 0 = 4'b0000; cf = 1; of = 0; zf = 1;
										  
// --> end                                             
//$display("Running testbench");                       
end                                                    
//always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
//begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
//@eachvec;                                              
// --> end                                             
//end                                                    
endmodule

