// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/12/2020 15:55:01"
                                                                                
// Verilog Test Bench template for design : exp6_1
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module exp6_1_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg clk;
reg [7:0] d;
reg lin;
reg [2:0] s;
// wires                                               
wire [7:0]  q;

// assign statements (if any)                          
exp6_1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.d(d),
	.lin(lin),
	.q(q),
	.s(s)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
   clk = 0; d = 7'b01010101; lin = 1; s = 000; #8;
												  s = 001; #10;
												  s = 010; #30;
												  s = 011; #40;
												  s = 100; #20;
												  s = 101; #15;
									  lin = 0;			  #15;		  
												  s = 110; #30;
												  s = 111; #30;
												  s = 000; #20;
	$stop;
// --> end                                             
//$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
   #5 clk = ~clk;                                                    
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

